{"data": "# SpringBoot\u901a\u8fc7\u81ea\u5b9a\u4e49\u6ce8\u89e3\u5b9e\u73b0\u591a\u6570\u636e\u6e90\n\n> \u4f5c\u8005\uff1a[Leo](https://wx.zsxq.com/dweb2/index/footprint/581115115488824)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 12644\n\n## 1.\u524d\u8a00\u2615\n\n\u5927\u5bb6\u597d\uff0c\u6211\u662fLeo\u54e5\ud83e\udee3\ud83e\udee3\ud83e\udee3\uff0c\u4eca\u5929\u7ee7\u7eed\u5e26\u6765\u4e00\u7bc7\u5173\u4e8eSpringBoot\u5b9e\u73b0\u591a\u6570\u636e\u6e90\u7684\u5b9e\u6218\u6848\u4f8b\u3002\u597d\u4e86\uff0c\u8bdd\u4e0d\u591a\u8bf4\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\u3002\n\n## 2.\u6982\u8ff0\n\n\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u5f80\u5f80\u9762\u4e34\u4e00\u4e2a\u5e94\u7528\u9700\u8981\u8bbf\u95ee\u591a\u4e2a\u6570\u636e\u5e93\u7684\u60c5\u51b5\u3002\u4f8b\u5982\u4e0b\u9762\u4e24\u79cd\u573a\u666f\u3002\n\n- **\u4e1a\u52a1\u590d\u6742\uff1a** \u6570\u636e\u5206\u5e03\u5728\u4e0d\u540c\u7684\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u62c6\u4e86\uff0c\u5e94\u7528\u6ca1\u62c6\uff0c\u4e00\u4e2a\u516c\u53f8\u6709\u591a\u4e2a\u5b50\u9879\u76ee\uff0c\u5404\u7528\u5404\u7684\u6570\u636e\u5e93\u3002\n\n- \u8bfb**\u5199\u5206\u79bb\uff1a** \u4e3a\u4e86\u89e3\u51b3\u6570\u636e\u5e93\u7684\u8bfb\u6027\u80fd\u74f6\u9888\uff08\u8bfb\u6bd4\u5199\u6027\u80fd\u66f4\u9ad8\uff0c\u5199\u9501\u4f1a\u5f71\u54cd\u8bfb\u963b\u585e\uff0c\u4ece\u800c\u5f71\u54cd\u8bfb\u7684\u6027\u80fd\uff09\n\n  \u5f88\u591a\u6570\u636e\u5e93\u62e5\u6709\u4e3b\u4ece\u67b6\u6784\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u53f0 **\u4e3b\u6570\u636e\u5e93\u670d\u52a1\u5668**\uff0c\u662f\u5bf9\u5916\u63d0\u4f9b\u589e\u5220\u6539\u67e5\u4e1a\u52a1\u7684\u751f\u4ea7\u670d\u52a1\u5668\uff1b\n\n  \u53e6\u4e00\u53f0**\u4ece\u6570\u636e\u5e93\u670d\u52a1\u5668**\uff0c\u4e3b\u8981\u8fdb\u884c\u8bfb\u7684\u64cd\u4f5c\u3002\n\n  \u8bfb\u5199\u5206\u79bb\uff1a\u89e3\u51b3\u9ad8\u5e76\u53d1\u4e0b\u8bfb\u5199\u53d7\u5f71\u54cd\u3002\u6570\u636e\u66f4\u65b0\u5728\u4e3b\u5e93\u4e0a\u8fdb\u884c\uff0c\u4e3b\u5e93\u5c06\u6570\u636e\u53d8\u66f4\u4fe1\u606f\u540c\u6b65\u7ed9\u4ece\u5e93\u3002\u5728\u67e5\u8be2\u65f6\uff0c\u5728\u4ece\u5e93\u4e0a\u8fdb\u884c\uff0c\u4ece\u800c\u5206\u62c5\u4e3b\u5e93\u7684\u538b\u529b\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u5c42\u9762\u89e3\u51b3\u8fd9\u79cd\u52a8\u6001\u6570\u636e\u6e90\u5207\u6362\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528 **mycat**\u3001**shardingJDBC** \u7b49\u5176\u4ed6\u4e2d\u95f4\u4ef6\u3002\u672c\u6587\u5c06\u4e3b\u8981\u4ee5\u81ea\u5b9a\u4e49\u6ce8\u89e3 + \u7ee7\u627f `AbstractRoutingDataSource` \u5b9e\u73b0\u8bfb\u5199\u5206\u79bb\u3002\n\n## 3.\u5982\u4f55\u5b9e\u73b0\u591a\u6570\u636e\u6e90\n\n\u5728 **SpringBoot** \u9879\u76ee\u4e2d\u5b9e\u73b0\u8bfb\u5199\u5206\u79bb\u901a\u5e38\u9700\u8981\u4ee5\u4e0b\u51e0\u6b65\uff1a\n\n1. \u914d\u7f6e\u6570\u636e\u6e90\uff1a\u4f60\u9700\u8981\u4e3a\u8bfb\u64cd\u4f5c\u548c\u5199\u64cd\u4f5c\u5206\u522b\u914d\u7f6e\u4e00\u4e2a\u6570\u636e\u6e90\u3002\n2. \u521b\u5efa\u6570\u636e\u6e90\u8def\u7531\u903b\u8f91\uff1a\u8fd9\u901a\u5e38\u901a\u8fc7\u6269\u5c55 Spring \u7684 `AbstractRoutingDataSource` \u6765\u5b9e\u73b0\u3002\u5b83\u5141\u8bb8\u4f60\u6839\u636e\u4e00\u5b9a\u7684\u903b\u8f91\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u6e90\uff08\u8bfb\u6216\u5199\uff09\u3002\n3. \u914d\u7f6e\u4e8b\u52a1\u7ba1\u7406\u5668\uff1a\u8fd9\u4f7f\u5f97\u4f60\u80fd\u591f\u5728\u4f7f\u7528\u4e0d\u540c\u6570\u636e\u6e90\u65f6\u4fdd\u6301\u4e8b\u52a1\u7684\u4e00\u81f4\u6027\u3002\n4. \u670d\u52a1\u5c42\u6216DAO\u5c42\u8bbe\u8ba1\uff1a\u786e\u4fdd\u5728\u6267\u884c\u8bfb\u64cd\u4f5c\u65f6\u4f7f\u7528\u8bfb\u6570\u636e\u6e90\uff0c\u5728\u6267\u884c\u5199\u64cd\u4f5c\u65f6\u4f7f\u7528\u5199\u6570\u636e\u6e90\u3002\n5. \u81ea\u5b9a\u4e49\u5207\u9762\uff0c\u5728\u5207\u9762\u4e2d\u89e3\u6790 **@DataSource** \u6ce8\u89e3\u3002\u5f53\u4e00\u4e2a\u65b9\u6cd5\u6216\u8005\u7c7b\u4e0a\u9762\uff0c\u6709 @DataSource \u6ce8\u89e3\u7684\u65f6\u5019\uff0c\u5c06 @DataSource \u6ce8\u89e3\u6240\u6807\u8bb0\u7684\u6570\u636e\u6e90\u5217\u51fa\u6765\u5b58\u5165\u5230 ThreadLocal \u4e2d\u3002\n\n\u6ce8\u610f\uff1a\u8fd9\u91cc\u4f7f\u7528ThreadLocal\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4fdd\u8bc1\u6211\u4eec\u7684\u7ebf\u7a0b\u5b89\u5168\u3002\n\n## 4.\u6848\u4f8b\u5b9e\u73b0\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6309\u7167\u4ee5\u4e0a\u6b65\u9aa4\u8fdb\u884c\u7f16\u7801\u5b9e\u73b0\u3002\n\n### 4.1 \u521b\u5efa\u65b0\u6a21\u5757\n\n\u9996\u5148\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6a21\u5757\u547d\u540d\u4e3a\uff1a**springboot-dynamic-source**\n\n![](https://pic.yupi.icu/5563/202404180837230.png)\n\n#### 1.\u5bfc\u5165\u4f9d\u8d56\n\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>cn.hutool</groupId>\n            <artifactId>hutool-all</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n        </dependency>\n        <!--mybatis plus-->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n#### 2.\u521b\u5efayml\u914d\u7f6e\u6587\u4ef6\n\n```yml\nserver:\n  port: 8007\n\n\nspring:\n  application:\n    name:  dynamic-source\n  jackson:\n    date-format: yyyy-MM-dd HH:mm:ss\n    time-zone: GMT+8\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    driverClassName: com.mysql.cj.jdbc.Driver\n    ds:\n      # \u4e3b\u5e93\u6570\u636e\u6e90\n      master:\n        url: jdbc:mysql://localhost:3307/test01?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n        username: root\n        password: root\n      # \u4ece\u5e93\u6570\u636e\u6e90\n      slave:\n        url: jdbc:mysql://localhost:3307/test02?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n        username: root\n        password: root\n    # \u521d\u59cb\u8fde\u63a5\u6570\n    initialSize: 5\n    # \u6700\u5c0f\u8fde\u63a5\u6c60\u6570\u91cf\n    minIdle: 10\n    # \u6700\u5927\u8fde\u63a5\u6c60\u6570\u91cf\n    maxActive: 20\n    # \u914d\u7f6e\u83b7\u53d6\u8fde\u63a5\u7b49\u5f85\u8d85\u65f6\u7684\u65f6\u95f4\n    maxWait: 60000\n    # \u914d\u7f6e\u95f4\u9694\u591a\u4e45\u624d\u8fdb\u884c\u4e00\u6b21\u68c0\u6d4b\uff0c\u68c0\u6d4b\u9700\u8981\u5173\u95ed\u7684\u7a7a\u95f2\u8fde\u63a5\uff0c\u5355\u4f4d\u662f\u6beb\u79d2\n    timeBetweenEvictionRunsMillis: 60000\n    # \u914d\u7f6e\u4e00\u4e2a\u8fde\u63a5\u5728\u6c60\u4e2d\u6700\u5c0f\u751f\u5b58\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u6beb\u79d2\n    minEvictableIdleTimeMillis: 300000\n    # \u914d\u7f6e\u4e00\u4e2a\u8fde\u63a5\u5728\u6c60\u4e2d\u6700\u5927\u751f\u5b58\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u6beb\u79d2\n    maxEvictableIdleTimeMillis: 900000\n    # \u914d\u7f6e\u68c0\u6d4b\u8fde\u63a5\u662f\u5426\u6709\u6548\n    validationQuery: SELECT 1 FROM DUAL\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    webStatFilter:\n      enabled: true\n    statViewServlet:\n      enabled: true\n      # \u8bbe\u7f6e\u767d\u540d\u5355\uff0c\u4e0d\u586b\u5219\u5141\u8bb8\u6240\u6709\u8bbf\u95ee\n      allow:\n      url-pattern: /druid/*\n      # \u63a7\u5236\u53f0\u7ba1\u7406\u7528\u6237\u540d\u548c\u5bc6\u7801\n      login-username: admin\n      login-password: 123456\n    filter:\n      stat:\n        enabled: true\n        # \u6162SQL\u8bb0\u5f55\n        log-slow-sql: true\n        slow-sql-millis: 1000\n        merge-sql: true\n      wall:\n        config:\n          multi-statement-allow: true\n\n\nlogging:\n  level:\n    org.javatop: debug\n  pattern:\n    dateformat: HH:mm:ss:SSS\n  file:\n    path: \"logs/${spring.application.name}\"\n```\n\nds \u4e2d\u662f\u6211\u4eec\u7684\u6240\u6709\u6570\u636e\u6e90\u3002**master** \u662f\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\uff0c\u4e0d\u53ef\u4fee\u6539\uff0c\u5176\u4ed6\u7684\u6570\u636e\u6e90\u53ef\u4ee5\u4fee\u6539\u5e76\u6dfb\u52a0\u591a\u4e2a\u3002\n\n#### 3.\u51c6\u5907\u6570\u636e\u5e93\n\n\u6211\u8fd9\u91cc\u9700\u8981\u63d0\u524d\u51c6\u5907\u4e24\u4e2a\u6570\u636e\u5e93\uff0c\u4e00\u4e2a\u662f\u4e3b\u6570\u636e\u5e93master\uff0c\u4e00\u4e2a\u662f\u4ece\u6570\u636e\u5e93slave\u3002\n\n\u6211\u4eec\u4f1a\u540e\u9762\u4f1a\u901a\u8fc7\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6ce8\u89e3\u53bb\u5b9e\u73b0\u52a8\u6001\u5207\u6362\u6570\u636e\u5e93\u3002\n\n\u8fd9\u91cc\u7ed9\u51fa\u6211\u4eec\u521b\u5efa\u7684\u4e00\u4e2auser\u8868\u7684SQL\u8bed\u53e5\u3002\n\n```sql\nCREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `username` varchar(50) DEFAULT NULL,\n  `age` int DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n```\n\n### 4.2 \u52a0\u8f7d\u6570\u636e\u6e90\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7@ConfigurationProperties \u6ce8\u89e3\u52a0\u8f7d\u5b9a\u4e49\u7684\u914d\u7f6e\u6587\u4ef6\u3002spring.datasource \u5bf9\u5e94\u7684\u6ce8\u89e3\u90fd\u4f1a\u5339\u914d\u5230\u3002\n\n```java\npackage org.javatop.dynamic.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport javax.sql.DataSource;\nimport java.util.Map;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:10\n * @description :\n */\n@ConfigurationProperties(prefix = \"spring.datasource\")\npublic class DruidProperties {\n    private String type;\n    private String driverClassName;\n    private Map<String, Map<String,String>> ds;\n\n    private Integer initialSize;\n    private Integer minIdle;\n    private Integer maxActive;\n    private Integer maxWait;\n\n    /**\n     *\u4e00\u4f1a\u5728\u5916\u90e8\u6784\u5efa\u597d\u4e00\u4e2a DruidDataSource \u5bf9\u8c61\uff0c\u5305\u542b\u4e09\u4e2a\u6838\u5fc3\u5c5e\u6027 url\u3001username\u3001password\n     * \u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u8bbe\u7f6e\u516c\u5171\u5c5e\u6027\n     * @param druidDataSource\n     * @return\n     */\n    public DataSource dataSource(DruidDataSource druidDataSource){\n        druidDataSource.setInitialSize(initialSize);\n        druidDataSource.setMinIdle(minIdle);\n        druidDataSource.setMaxActive(maxActive);\n        druidDataSource.setMaxWait(maxWait);\n        return druidDataSource;\n    }\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getDriverClassName() {\n        return driverClassName;\n    }\n\n    public void setDriverClassName(String driverClassName) {\n        this.driverClassName = driverClassName;\n    }\n\n    public Map<String, Map<String, String>> getDs() {\n        return ds;\n    }\n\n    public void setDs(Map<String, Map<String, String>> ds) {\n        this.ds = ds;\n    }\n\n    public Integer getInitialSize() {\n        return initialSize;\n    }\n\n    public void setInitialSize(Integer initialSize) {\n        this.initialSize = initialSize;\n    }\n\n    public Integer getMinIdle() {\n        return minIdle;\n    }\n\n    public void setMinIdle(Integer minIdle) {\n        this.minIdle = minIdle;\n    }\n\n    public Integer getMaxActive() {\n        return maxActive;\n    }\n\n    public void setMaxActive(Integer maxActive) {\n        this.maxActive = maxActive;\n    }\n\n    public Integer getMaxWait() {\n        return maxWait;\n    }\n\n    public void setMaxWait(Integer maxWait) {\n        this.maxWait = maxWait;\n    }\n}\n```\n\n\u7136\u540e\u6211\u4eec\u5f00\u59cb\u901a\u8fc7\u8fdb\u884c\u52a0\u8f7d`DruidProperties`\u6765\u52a0\u8f7d\u6570\u636e\u6e90\u3002\n\n**@EnableConfigurationProperties** :\u8fd9\u4e2a\u6ce8\u89e3\u7684\u610f\u601d\u662f\u4f7f ConfigurationProperties \u6ce8\u89e3\u751f\u6548\u3002\n\n```java\npackage org.javatop.dynamic.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.pool.DruidDataSourceFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:12\n * @description : \u52a0\u8f7d\u6570\u636e\u6e90\n */\n\n@Component\n@EnableConfigurationProperties(DruidProperties.class)\npublic class LoadDataSource {\n\n    @Autowired\n    DruidProperties druidProperties;\n\n    public Map<String, DataSource> loadAllDataSource()   {\n        Map<String, DataSource> map =new HashMap<>();\n        Map<String, Map<String, String>> ds = druidProperties.getDs();\n        try {\n            Set<String> keySet = ds.keySet();\n            for (String key : keySet) {\n                map.put(key, druidProperties.dataSource((DruidDataSource) DruidDataSourceFactory.createDataSource(ds.get(key))));\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return map;\n    }\n}\n```\n\n**loadAllDataSource()** \u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6application.yml\u914d\u7f6e\u6587\u4ef6\u4e2d\u6240\u6709\u6570\u636e\u6e90\u5bf9\u8c61\u3002(\u6211\u4eec\u8fd9\u91cc\u6709\u4e00\u4e2amaster\u4e3b\u6570\u636e\u5e93\uff0c\u548c\u4e00\u4e2aslave\u4ece\u6570\u636e\u5e93)\n\n**druidProperties.dataSource\uff08DruidDataSource druidDataSource\uff09** \u8fd9\u4e2a\u65b9\u6cd5\u4e3a\u6bcf\u4e2a\u6570\u636e\u6e90\u914d\u7f6e\u5176\u4ed6\u989d\u5916\u7684\u5c5e\u6027\uff08\u6700\u5927\u8fde\u63a5\u6c60\u7b49\u4fe1\u606f\uff09\u3002\n\n**DruidDataSourceFactory.createDataSource(ds.get(key)**\uff1a\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6e90\uff0c\u8d4b\u4e88\u4e09\u4e2a\u6838\u5fc3\u7684\u5c5e\u6027\u3002\uff08username\u3001url\u3001password\uff09\n\n\u6700\u7ec8\uff0c\u6240\u6709\u7684\u6570\u636e\u6e90\u90fd\u4f1a\u5b58\u5165map\u4e2d\u3002\n\n### 4.3 \u81ea\u5b9a\u4e49ThreadLocal\u5de5\u5177\u7c7b\n\n\u6211\u4eec\u8fd9\u91cc\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684ThreadLocal\u5de5\u5177\u7c7b\n\n```java\npackage org.javatop.dynamic.utils;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:13\n * @description : ThreadLocal\u5de5\u5177\u7c7b\n */\npublic class DynamicDataSourceUtil {\n\n    private static final ThreadLocal<String> CONTEXT_HOLDER =new ThreadLocal<>();\n\n    public static void setDataSourceType(String dsType){\n        CONTEXT_HOLDER.set(dsType);\n    }\n    public static String getDataSourceType(){\n        return CONTEXT_HOLDER.get();\n    }\n\n    public static void clear(){\n        CONTEXT_HOLDER.remove();\n    }\n}\n```\n\n### 4.4 \u81ea\u5b9a\u4e49\u6ce8\u89e3\n\n\u9996\u5148\u9700\u8981\u901a\u8fc7\u4e00\u4e2a\u679a\u4e3e\u7c7b\u6765\u8bbe\u5b9a\u4e00\u4e0b\u6211\u4eec\u7684\u9ed8\u8ba4\u6570\u636e\u6e90\uff0c\u4e5f\u662f\u662fmaster\u4e3b\u6570\u636e\u5e93\u3002\n\n```java\npackage org.javatop.dynamic.constant;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:13\n * @description :\n */\npublic interface DataSourceType {\n    String default_ds_name =\"master\";\n}\n```\n\n\u7136\u540e\u81ea\u5b9a\u4e49\u4e00\u4e2a\u6ce8\u89e3\uff0c\u540e\u9762\u4e5f\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u6ce8\u89e3\u6765\u52a8\u6001\u7684\u914d\u7f6e\u5207\u6362\u6211\u4eec\u7684\u6570\u636e\u6e90\uff0c\u8fd9\u91cc\u5c31\u4e5f\u53ebDatasource\u5427\u3002\n\n```java\npackage org.javatop.dynamic.annotation;\n\nimport org.javatop.dynamic.constant.DataSourceType;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:14\n * @description :  \u8fd9\u4e2a\u6ce8\u89e3\u5c06\u6765\u53ef\u4ee5\u52a0\u5728\u67d0\u4e00\u4e2a service \u7c7b\u4e0a\u6216\u8005\u65b9\u6cd5\u4e0a\uff0c\u901a\u8fc7 value \u5c5e\u6027\u6765\u6307\u5b9a\u7c7b\u6216\u8005\u65b9\u6cd5\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u6e90\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface DataSource{\n\n    /**\n     * \u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u4e0a\u52a0\u4e86 @DataSource \u6ce8\u89e3\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u6307\u5b9a\u6570\u636e\u6e90\u7684\u540d\u79f0\uff0c\u90a3\u4e48\u9ed8\u8ba4\u4f7f\u7528 Master \u6570\u636e\u6e90\n     * @return\n     */\n    String value() default DataSourceType.default_ds_name;\n}\n```\n\n### 4.5 AOP\u89e3\u6790\u81ea\u5b9a\u4e49\u6ce8\u89e3\n\n```java\npackage org.javatop.dynamic.annotation;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.javatop.dynamic.utils.DynamicDataSourceUtil;\nimport org.springframework.core.annotation.AnnotationUtils;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:15\n * @description : AOP\u89e3\u6790\u81ea\u5b9a\u4e49\u6ce8\u89e3\n */\n@Component\n@Aspect\npublic class DataSourceAspect {\n\n\n    /**\n     * @annotation(org.javatop.dynamic.annotation.DataSource) \u8868\u793a\u65b9\u6cd5\u4e0a\u6709 @DataSource \u6ce8\u89e3 \u5c31\u5c06\u65b9\u6cd5\u62e6\u622a\u4e0b\u6765\u3002\n     * @within :\u5982\u679c\u7c7b\u4e0a\u9762\u6709 @DataSource \u6ce8\u89e3\uff0c\u5c31\u5c06\u7c7b\u4e2d\u7684\u65b9\u6cd5\u62e6\u622a\u4e0b\u6765\u3002\n     */\n    @Pointcut(\"@annotation(org.javatop.dynamic.annotation.DataSource) || \" +\n            \"@within(org.javatop.dynamic.annotation.DataSource)\")\n    public void pc(){\n\n    }\n\n    @Around(\"pc()\")\n    public Object around(ProceedingJoinPoint point){\n        //\u83b7\u53d6\u65b9\u6cd5\u4e0a\u9762\u7684\u6ce8\u89e3\n        DataSource dataSource =getDataSource(point);\n        if(dataSource!=null){\n            // \u6ce8\u89e3\u4e2d\u6570\u636e\u6e90\u7684\u540d\u79f0\n            String value = dataSource.value();\n            DynamicDataSourceUtil.setDataSourceType(value);\n        }\n        try {\n            return point.proceed();\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }finally {\n            DynamicDataSourceUtil.clear();\n        }\n        return null;\n    }\n\n    private DataSource getDataSource(ProceedingJoinPoint point) {\n        /**\n         * \u5148\u53bb\u67e5\u627e\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u518d\u53bb\u7c7b\u4e2d\u627e\u3002\n         */\n        MethodSignature signature = (MethodSignature)point.getSignature();\n        DataSource annotation = AnnotationUtils.findAnnotation(signature.getMethod(), DataSource.class);\n        if(annotation!=null){\n            return annotation;\n        }\n        return AnnotationUtils.findAnnotation(signature.getDeclaringType(),DataSource.class);\n    }\n}\n```\n\n#### @Pointcut \u5b9a\u4e49\n\n```java\n@Pointcut(\"@annotation(org.javatop.dynamic.annotation.DataSource) || \" +\n          \"@within(org.javatop.dynamic.annotation.DataSource)\")\npublic void pc() {\n\n}\n```\n\n- `@Pointcut` \u662f\u4e00\u4e2a\u5b9a\u4e49\u5728\u65b9\u6cd5\u4e0a\u7684\u6ce8\u89e3\uff0c\u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u5207\u70b9\uff08\u5373\u5728\u4f55\u5904\u8fdb\u884c\u62e6\u622a\uff09\u3002\n- `\"@annotation(org.javatop.dynamic.annotation.DataSource)\"` \u8868\u793a\u62e6\u622a\u6240\u6709\u88ab `@DataSource` \u6ce8\u89e3\u6807\u8bb0\u7684\u65b9\u6cd5\u3002\n- `\"@within(org.javatop.dynamic.annotation.DataSource)\"` \u8868\u793a\u62e6\u622a\u6240\u6709\u5728\u7c7b\u7ea7\u522b\u88ab `@DataSource` \u6ce8\u89e3\u6807\u8bb0\u7684\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002\n- `pc()` \u65b9\u6cd5\u672c\u8eab\u662f\u7a7a\u7684\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u903b\u8f91\u90fd\u5c06\u5728\u4e0e\u8fd9\u4e2a\u5207\u70b9\u76f8\u5173\u7684\u901a\u77e5\uff08advice\uff09\u4e2d\u5b9a\u4e49\u3002\n\n#### @Around \u901a\u77e5\n\n```java\ne@Around(\"pc()\")\npublic Object around(ProceedingJoinPoint point) {\n    DataSource dataSource = getDataSource(point);\n    if (dataSource != null) {\n        String value = dataSource.value();\n        DynamicDataSourceUtil.setDataSourceType(value);\n    }\n    try {\n        return point.proceed();\n    } catch (Throwable throwable) {\n        throwable.printStackTrace();\n    } finally {\n        DynamicDataSourceUtil.clear();\n    }\n    return null;\n}\n```\n\n- `@Around(\"pc()\")` \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u73af\u7ed5\u901a\u77e5\uff0c\u5b83\u4f1a\u5728 `pc()` \u65b9\u6cd5\u6240\u5b9a\u4e49\u7684\u5207\u70b9\u524d\u540e\u6267\u884c\u3002\n- `ProceedingJoinPoint point` \u662f\u8fde\u63a5\u70b9\u7684\u4fe1\u606f\uff0c\u5b83\u5305\u542b\u4e86\u65b9\u6cd5\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u65b9\u6cd5\u540d\u3001\u53c2\u6570\u7b49\u3002\n- `getDataSource(point)` \u7528\u6765\u83b7\u53d6\u65b9\u6cd5\u6216\u7c7b\u4e0a\u7684 `@DataSource` \u6ce8\u89e3\u3002\n- \u5982\u679c\u5b58\u5728 `@DataSource` \u6ce8\u89e3\uff0c\u5b83\u4f1a\u4ece\u6ce8\u89e3\u4e2d\u83b7\u53d6\u6570\u636e\u6e90\u7684\u540d\u79f0\uff0c\u5e76\u901a\u8fc7 `DynamicDataSourceUtil.setDataSourceType(value)` \u8bbe\u7f6e\u5f53\u524d\u7ebf\u7a0b\u7684\u6570\u636e\u6e90\u3002\n- `point.proceed()` \u662f\u8c03\u7528\u539f\u59cb\u65b9\u6cd5\u7684\u5730\u65b9\u3002\n- `finally` \u5757\u4e2d\u7684 `DynamicDataSourceUtil.clear()` \u7528\u4e8e\u5728\u65b9\u6cd5\u6267\u884c\u5b8c\u6bd5\u540e\u6e05\u7406\u6570\u636e\u6e90\u8bbe\u7f6e\uff0c\u786e\u4fdd\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u3002\n\n**\u6700\u540e\u83b7\u53d6@DataSource\u6ce8\u89e3**\n\n### 4.6 \u81ea\u5b9a\u4e49\u52a8\u6001\u6570\u636e\u6e90\n\n```java\npackage org.javatop.dynamic.config;\n\nimport org.javatop.dynamic.constant.DataSourceType;\nimport org.javatop.dynamic.utils.DynamicDataSourceUtil;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\nimport org.springframework.stereotype.Component;\n\nimport javax.sql.DataSource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:18\n * @description : \u5b9a\u4e49\u52a8\u6001\u6570\u636e\u6e90\n */\n@Component\npublic class DynamicDataSource extends AbstractRoutingDataSource {\n\n    public DynamicDataSource(LoadDataSource loadDataSource) {\n        // 1\u3001\u8bbe\u7f6e\u6240\u6709\u7684\u6570\u636e\u6e90\n        Map<String, DataSource> stringDataSourceMap = loadDataSource.loadAllDataSource();\n        super.setTargetDataSources(new HashMap<>(stringDataSourceMap));\n        // 2\u3001\u8bbe\u7f6e\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\n        super.setDefaultTargetDataSource(stringDataSourceMap.get(DataSourceType.default_ds_name));\n\n        super.afterPropertiesSet();\n    }\n\n    /**\n     * \u8fd9\u4e2a\u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u6570\u636e\u6e90\u540d\u79f0\uff0c\u5f53\u7cfb\u7edf\u9700\u8981\u83b7\u53d6\u6570\u636e\u6e90\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528\u8be5\u65b9\u6cd5\u83b7\u53d6\u6570\u636e\u6e90\u7684\u540d\u79f0\n     * @return\n     */\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DynamicDataSourceUtil.getDataSourceType();\n    }\n}\n```\n\n1. `DynamicDataSource` \u7c7b\u6269\u5c55\u81ea `AbstractRoutingDataSource` \u7c7b\uff0c\u8fd9\u662fSpring\u6846\u67b6\u63d0\u4f9b\u7684\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6570\u636e\u6e90\u7684\u52a8\u6001\u8def\u7531\u3002\n\n2. \u6784\u9020\u51fd\u6570\n\n    \n\n   ```\n   public DynamicDataSource(LoadDataSource loadDataSource)\n   ```\n\n    \n\n   \u63a5\u6536\u4e00\u4e2a\n\n    \n\n   ```\n   LoadDataSource\n   ```\n\n    \n\n   \u7c7b\u578b\u7684\u53c2\u6570\u3002\u8fd9\u4e2a\u53c2\u6570\u88ab\u7528\u4e8e\u52a0\u8f7d\u6240\u6709\u7684\u6570\u636e\u6e90\u914d\u7f6e\u3002\n\n   - `Map<String, DataSource> stringDataSourceMap = loadDataSource.loadAllDataSource();` \u8fd9\u884c\u4ee3\u7801\u8c03\u7528\u4e86 `loadDataSource` \u7684 `loadAllDataSource` \u65b9\u6cd5\u6765\u52a0\u8f7d\u6240\u6709\u6570\u636e\u6e90\u914d\u7f6e\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3a `stringDataSourceMap` \u7684Map\u4e2d\uff0c\u5176\u4e2d\u952e\u662f\u6570\u636e\u6e90\u7684\u540d\u79f0\uff0c\u503c\u662f\u5bf9\u5e94\u7684 `DataSource` \u5bf9\u8c61\u3002\n   - `super.setTargetDataSources(new HashMap<>(stringDataSourceMap));` \u8fd9\u884c\u4ee3\u7801\u8bbe\u7f6e\u4e86\u76ee\u6807\u6570\u636e\u6e90\u3002\u5b83\u5c06\u524d\u9762\u52a0\u8f7d\u7684\u6240\u6709\u6570\u636e\u6e90 `stringDataSourceMap` \u8bbe\u7f6e\u4e3a\u76ee\u6807\u6570\u636e\u6e90\u3002\n   - `super.setDefaultTargetDataSource(stringDataSourceMap.get(DataSourceType.default_ds_name));` \u8fd9\u884c\u4ee3\u7801\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\u3002\u5b83\u901a\u8fc7 `DataSourceType.default_ds_name` \u4ece `stringDataSourceMap` \u4e2d\u83b7\u53d6\u9ed8\u8ba4\u7684\u6570\u636e\u6e90\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u6570\u636e\u6e90\u3002\n   - `super.afterPropertiesSet();` \u662f\u4e00\u4e2a\u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u786e\u4fdd\u6240\u6709\u5c5e\u6027\u90fd\u88ab\u6b63\u786e\u8bbe\u7f6e\u3002\n\n3. ```\n   determineCurrentLookupKey()\n   ```\n\n    \n\n   \u65b9\u6cd5\u662f\n\n    \n\n   ```\n   AbstractRoutingDataSource\n   ```\n\n    \n\n   \u7684\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5\uff0c\u5fc5\u987b\u8981\u5b9e\u73b0\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7528\u4e8e\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u6e90\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u6839\u636e\u67d0\u79cd\u6761\u4ef6\u52a8\u6001\u8fd4\u56de\u6570\u636e\u6e90\u540d\u79f0\u3002\n\n   - `return DynamicDataSourceUtil.getDataSourceType();` \u8fd9\u884c\u4ee3\u7801\u8fd4\u56de\u5f53\u524d\u7ebf\u7a0b\u6240\u4f7f\u7528\u7684\u6570\u636e\u6e90\u7684\u540d\u79f0\u3002`DynamicDataSourceUtil` \u662f\u4e00\u4e2a\u5de5\u5177\u7c7b\uff0c\u53ef\u80fd\u63d0\u4f9b\u4e86\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\uff08ThreadLocal\uff09\u6765\u5b58\u50a8\u6bcf\u4e2a\u7ebf\u7a0b\u6240\u9009\u62e9\u7684\u6570\u636e\u6e90\u540d\u79f0\u3002\n\n\u8fd9\u6837\uff0c\u5f53\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u4ea4\u4e92\u65f6\uff0c\u5c31\u4f1a\u901a\u8fc7 `DynamicDataSource` \u83b7\u53d6\u5230\u5f53\u524d\u7ebf\u7a0b\u6240\u6307\u5b9a\u7684\u6570\u636e\u6e90\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u3002\u8fd9\u79cd\u65b9\u5f0f\u80fd\u591f\u5728\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u4e2d\u7075\u6d3b\u5207\u6362\u6570\u636e\u6e90\uff0c\u975e\u5e38\u9002\u5408\u591a\u79df\u6237\u3001\u8bfb\u5199\u5206\u79bb\u7b49\u590d\u6742\u7684\u6570\u636e\u5e93\u5e94\u7528\u573a\u666f\u3002\n\n### 4.7 \u7f16\u5199\u4e1a\u52a1\u5c42\n\n\u6211\u4eec\u7f16\u5199\u4e00\u4e2aservice\u5c42\n\n```java\npackage org.javatop.dynamic.service;\n\nimport org.javatop.dynamic.annotation.DataSource;\nimport org.javatop.dynamic.domain.User;\nimport org.javatop.dynamic.mapper.UserMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:26\n * @description :\n */\n@Service\npublic class UserService{\n    @Autowired\n    private UserMapper userMapper;\n\n    @DataSource(\"slave\")\n//    @DataSource\n    public List<User> getAll(){\n        List<User> all = userMapper.getAll();\n        return all;\n    }\n}\n```\n\n\u6211\u4eec\u5728getAll()\u65b9\u6cd5\u4e0a\u52a0\u4e0a@DataSource(\"slave\")\uff0c\u5e76\u6307\u5b9aslave\u4ece\u6570\u636e\u5e93\u3002\n\n\u7136\u540e\u518d\u7f16\u5199\u4e00\u4e2amapper\uff0c\u53bb\u64cd\u4f5c\u6570\u636e\u5e93\u3002\n\n```java\npackage org.javatop.dynamic.mapper;\n\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Select;\nimport org.javatop.dynamic.domain.User;\n\nimport java.util.List;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:26\n * @description :\n */\n@Mapper\npublic interface UserMapper {\n    @Select(\"select * from user\")\n    List<User> getAll();\n}\n```\n\n### 4.8 \u6d4b\u8bd5\n\n```java\npackage org.javatop.dynamic;\n\nimport org.javatop.dynamic.domain.User;\nimport org.javatop.dynamic.service.UserService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.List;\n\n/**\n * @author : Leo\n * @version 1.0\n * @date 2024-01-02 15:32\n * @description :\n */\n@SpringBootTest\npublic class DynamicTest {\n\n    @Autowired\n    private UserService userService;\n\n    /**\n     *  \u7528\u4e8e\u6d4b\u8bd5:\n     */\n    @Test\n    public void test() {\n        List<User> all = userService.getAll();\n        if(all !=null){\n            for (User user : all) {\n                System.out.println(user);\n            }\n        }\n    }\n}\n```\n\n\u6211\u4eec\u67e5\u770b\u63a7\u5236\u53f0\u3002\n\n![](https://pic.yupi.icu/5563/202404180837200.png)\n\n![](https://pic.yupi.icu/5563/202404180837222.png)\n\n\u53ef\u4ee5\u770b\u51fa\u6765\u6211\u4eec\u53bb\u67e5\u8be2\u7684\u662ftest02\u5e93\u4e2d\u7684user\u6570\u636e\u3002\n\n\u5927\u529f\u544a\u6210!!!"}