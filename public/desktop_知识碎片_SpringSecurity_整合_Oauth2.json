{"data": "# SpringSecurity \u6574\u5408 Oauth2\n\n> \u4f5c\u8005\uff1a[\u60f3\u98de\u5929\u7684\u732a\u5934](https://www.sweetmore.cn/)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 9414\n\nOAuth \u662f\u4e00\u4e2a\u5f00\u653e\u7684\u975e\u5e38\u91cd\u8981\u7684\u8ba4\u8bc1\u6807\u51c6/\u534f\u8bae\uff0c\u8be5\u6807\u51c6\u5141\u8bb8\u7528\u6237\u8ba9\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u8be5\u7528\u6237\u5728\u67d0\u4e00\u7f51\u7ad9\u4e0a\u5b58\u50a8\u7684\u79c1\u5bc6\u8d44\u6e90\uff0c\u800cSpringSecurity\u4f5c\u4e3a\u73b0\u5728\u5f88\u91cd\u8981\u7684\u5b89\u5168\u6846\u67b6\u4e5f\u652f\u6301\u4e86Oauth2\u534f\u8bae\n\n## Oauth\u7b80\u4ecb\n\nOAuth \u662f\u4e00\u4e2a\u5f00\u653e\u7684\u975e\u5e38\u91cd\u8981\u7684\u8ba4\u8bc1\u6807\u51c6/\u534f\u8bae\uff0c\u8be5\u6807\u51c6\u5141\u8bb8\u7528\u6237\u8ba9\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u8be5\u7528\u6237\u5728\u67d0\u4e00\u7f51\u7ad9\u4e0a\u5b58\u50a8\u7684\u79c1\u5bc6\u8d44\u6e90\uff08\u5982\u5934\u50cf\u3001\u7167\u7247\u3001\u89c6\u9891\u7b49\uff09\uff0c\u5e76\u4e14\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u65e0\u987b\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002\u901a\u8fc7\u4ee4\u724c\uff08token\uff09\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\uff0c\u6bcf\u4e00\u4e2a\u4ee4\u724c\u6388\u6743\u4e00\u4e2a\u7279\u5b9a\u7684\u7f51\u7ad9\u5728\u7279\u5b9a\u7684\u65f6\u6bb5\u5185\u5141\u8bb8\u53ef\u7279\u5b9a\u7684\u8d44\u6e90\u3002OAuth \u8ba9\u7528\u6237\u53ef\u4ee5\u6388\u6743\u7b2c\u4e09\u65b9\u7f51\u7ad9\u7075\u6d3b\u8bbf\u95ee\u5b83\u4eec\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e9b\u8d44\u6e90\u670d\u52a1\u5668\u4e0a\u7684\u7279\u5b9a\u4fe1\u606f\uff0c\u800c\u975e\u6240\u6709\u5185\u5bb9\u3002\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\uff0c\u6211\u4eec\u5728\u4e92\u8054\u7f51\u5e94\u7528\u4e2d\u6700\u5e38\u89c1\u7684 OAuth \u5e94\u7528\u5c31\u662f\u5404\u79cd\u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u4f8b\u5982QQ\u6388\u6743\u767b\u5f55\u3001\u5fae\u4fe1\u6388\u6743\u767b\u5f55\u3001\u5fae\u535a\u6388\u6743\u767b\u5f55\u3001GitHub \u6388\u6743\u767b\u5f55\u7b49\u3002\n\n\u4f8b\u5982\u7528\u6237\u60f3\u767b\u5f55 Ruby China\uff0c\u4f20\u7edf\u65b9\u5f0f\u662f\u4f7f\u7528\u7528\u6237\u540d\u5bc6\u7801\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5b89\u5168\uff0c\u56e0\u4e3a\u7f51\u7ad9\u4f1a\u5b58\u50a8\u4f60\u7684\u7528\u6237\u540d\u5bc6\u7801\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5bc6\u7801\u6cc4\u9732\u3002\u8fd9\u79cd\u6388\u6743\u65b9\u5f0f\u5b89\u5168\u9690\u60a3\u5f88\u5927\uff0c\u5982\u679c\u4f7f\u7528 OAuth \u534f\u8bae\u5c31\u80fd\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\n\n![](https://pic.yupi.icu/5563/202311211035897.png)\n\n## OAuth2 \u6388\u6743\u603b\u4f53\u6d41\u7a0b\n\n\u89d2\u8272\u68b3\u7406: \u7b2c\u4e09\u65b9\u5e94\u7528 <----> \u5b58\u50a8\u7528\u6237\u79c1\u5bc6\u4fe1\u606f\u5e94\u7528 ----> \u6388\u6743\u670d\u52a1\u5668 ----> \u8d44\u6e90\u670d\u52a1\u5668\n\n![](https://pic.yupi.icu/5563/202311211033233.png)\n\n```markdown\nA\uff09\u7528\u6237\u6253\u5f00\u5ba2\u6237\u7aef\u4ee5\u540e\uff0c\u5ba2\u6237\u7aef\u8981\u6c42\u7528\u6237\u7ed9\u4e88\u6388\u6743\u3002\nB\uff09\u7528\u6237\u540c\u610f\u7ed9\u4e88\u5ba2\u6237\u7aef\u6388\u6743\u3002\nC\uff09\u5ba2\u6237\u7aef\u4f7f\u7528\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u6388\u6743\uff0c\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u7533\u8bf7\u4ee4\u724c\u3002\nD\uff09\u8ba4\u8bc1\u670d\u52a1\u5668\u5bf9\u5ba2\u6237\u7aef\u8fdb\u884c\u8ba4\u8bc1\u4ee5\u540e\uff0c\u786e\u8ba4\u65e0\u8bef\uff0c\u540c\u610f\u53d1\u653e\u4ee4\u724c\u3002\nE\uff09\u5ba2\u6237\u7aef\u4f7f\u7528\u4ee4\u724c\uff0c\u5411\u8d44\u6e90\u670d\u52a1\u5668\u7533\u8bf7\u83b7\u53d6\u8d44\u6e90\u3002\nF\uff09\u8d44\u6e90\u670d\u52a1\u5668\u786e\u8ba4\u4ee4\u724c\u65e0\u8bef\uff0c\u540c\u610f\u5411\u5ba2\u6237\u7aef\u5f00\u653e\u8d44\u6e90\u3002\n```\n\n\u4ece\u4e0a\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u516d\u4e2a\u6b65\u9aa4\u4e4b\u4e2d\uff0cB\u662f\u5173\u952e\uff0c\u5373\u7528\u6237\u600e\u6837\u624d\u80fd\u7ed9\u4e8e\u5ba2\u6237\u7aef\u6388\u6743\u3002\u540c\u65f6\u4f1a\u53d1\u73b0 OAuth2 \u4e2d\u5305\u542b\u56db\u79cd\u4e0d\u540c\u7684\u89d2\u8272\uff1a\n\n- **Client\uff1a**\u7b2c\u4e09\u65b9\u5e94\u7528\u3002\n- **Resource Owner**\uff1a\u8d44\u6e90\u6240\u6709\u8005\u3002\n- **Authorization Server** \uff1a\u6388\u6743\u670d\u52a1\u5668\u3002\n- **Resource Server**\uff1a \u8d44\u6e90\u670d\u52a1\u5668\u3002\n\n## \u56db\u79cd\u6388\u6743\u6a21\u5f0f\n\n### \u6388\u6743\u7801\u6a21\u5f0f\n\n**\u6388\u6743\u7801\u6a21\u5f0f\uff08`Authorization Code`\uff09** \u662f\u529f\u80fd\u6700\u5b8c\u6574\u3001\u6d41\u7a0b\u6700\u4e25\u5bc6\u3001\u6700\u5b89\u5168\u5e76\u4e14\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u4e00\u79cdOAuth2\u6388\u6743\u6a21\u5f0f\u3002\u540c\u65f6\u4e5f\u662f\u6700\u590d\u6742\u7684\u4e00\u79cd\u6388\u6743\u6a21\u5f0f\uff0c\u5b83\u7684\u7279\u70b9\u5c31\u662f\u901a\u8fc7\u5ba2\u6237\u7aef\u7684\u540e\u53f0\u670d\u52a1\u5668\uff0c\u4e0e`\u670d\u52a1\u63d0\u4f9b\u5546`\u7684\u8ba4\u8bc1\u670d\u52a1\u5668\u8fdb\u884c\u4e92\u52a8\u3002\u5176\u5177\u4f53\u7684\u6388\u6743\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff08\u56fe\u7247\u6765\u81ea RFC6749\u6587\u6863 https://tools.ietf.org/html/rfc6749)\n\n- Third-party application\uff1a\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\uff0c\u7b80\u79f0\"\u5ba2\u6237\u7aef\"\uff08client\uff09\uff1b\n- Resource Owner\uff1a\u8d44\u6e90\u6240\u6709\u8005\uff0c\u7b80\u79f0\"\u7528\u6237\"\uff08user\uff09\uff1b\n- User Agent\uff1a\u7528\u6237\u4ee3\u7406\uff0c\u662f\u6307\u6d4f\u89c8\u5668\uff1b\n- Authorization Server\uff1a\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u5373\u670d\u52a1\u7aef\u4e13\u95e8\u7528\u6765\u5904\u7406\u8ba4\u8bc1\u7684\u670d\u52a1\u5668\uff1b\n- Resource Server\uff1a\u8d44\u6e90\u670d\u52a1\u5668\uff0c\u5373\u670d\u52a1\u7aef\u5b58\u653e\u7528\u6237\u751f\u6210\u7684\u8d44\u6e90\u7684\u670d\u52a1\u5668\u3002\u5b83\u4e0e\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u662f\u540c\u4e00\u53f0\u670d\u52a1\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u670d\u52a1\u5668\u3002\n\n![](https://pic.yupi.icu/5563/202311211033235.png)\n\n\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b:\n\n- \uff08A\uff09\u7528\u6237\u8bbf\u95ee\u7b2c\u4e09\u65b9\u5e94\u7528\uff0c\u7b2c\u4e09\u65b9\u5e94\u7528\u901a\u8fc7\u6d4f\u89c8\u5668\u5bfc\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u3002\n- \uff08B\uff09\u7528\u6237\u9009\u62e9\u662f\u5426\u7ed9\u4e88\u5ba2\u6237\u7aef\u6388\u6743\u3002\n- \uff08C\uff09\u5047\u8bbe\u7528\u6237\u7ed9\u4e88\u6388\u6743\uff0c\u8ba4\u8bc1\u670d\u52a1\u5668\u5c06\u7528\u6237\u5bfc\u5411\u5ba2\u6237\u7aef\u4e8b\u5148\u6307\u5b9a\u7684\"\u91cd\u5b9a\u5411URI\"\uff08redirection URI\uff09\uff0c\u540c\u65f6\u9644\u4e0a\u4e00\u4e2a\u6388\u6743\u7801\u3002\n- \uff08D\uff09\u5ba2\u6237\u7aef\u6536\u5230\u6388\u6743\u7801\uff0c\u9644\u4e0a\u65e9\u5148\u7684\"\u91cd\u5b9a\u5411URI\"\uff0c\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u7533\u8bf7\u4ee4\u724c\u3002\u8fd9\u4e00\u6b65\u662f\u5728\u5ba2\u6237\u7aef\u7684\u540e\u53f0\u7684\u670d\u52a1\u5668\u4e0a\u5b8c\u6210\u7684\uff0c\u5bf9\u7528\u6237\u4e0d\u53ef\u89c1\u3002\n- \uff08E\uff09\u8ba4\u8bc1\u670d\u52a1\u5668\u6838\u5bf9\u4e86\u6388\u6743\u7801\u548c\u91cd\u5b9a\u5411URI\uff0c\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u8bbf\u95ee\u4ee4\u724c\uff08access token\uff09\u548c\u66f4\u65b0\u4ee4\u724c\uff08refresh token\uff09\u3002\n\n\u6838\u5fc3\u53c2\u6570:\n\n```http\nhttps://wx.com/oauth/authorize?response_type=code&client_id=CLIENT_ID&redirect_uri=http://www.baidu.com&scope=read\n```\n\n| \u5b57\u6bb5          | \u63cf\u8ff0                                          |\n| ------------- | --------------------------------------------- |\n| client_id     | \u6388\u6743\u670d\u52a1\u5668\u6ce8\u518c\u5e94\u7528\u540e\u7684\u552f\u4e00\u6807\u8bc6                |\n| response_type | \u5fc5\u987b \u56fa\u5b9a\u503c \u5728\u6388\u6743\u7801\u4e2d\u5fc5\u987b\u4e3a code             |\n| redirect_uri  | \u5fc5\u987b \u901a\u8fc7\u5ba2\u6237\u7aef\u6ce8\u518c\u7684\u91cd\u5b9a\u5411URL                |\n| scope         | \u5fc5\u987b \u4ee4\u724c\u53ef\u4ee5\u8bbf\u95ee\u8d44\u6e90\u6743\u9650 read \u53ea\u8bfb all \u8bfb\u5199  |\n| state         | \u53ef\u9009 \u5b58\u5728\u539f\u6837\u8fd4\u56de\u5ba2\u6237\u7aef \u7528\u6765\u9632\u6b62 CSRF\u8de8\u7ad9\u653b\u51fb |\n\n### \u7b80\u5316\u6a21\u5f0f\n\n**\u7b80\u5316\u6a21\u5f0f\uff08`implicit` grant type\uff09**\u4e0d\u901a\u8fc7\u7b2c\u4e09\u65b9\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\u5668\uff0c\u76f4\u63a5\u5728\u6d4f\u89c8\u5668\u4e2d\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u7533\u8bf7\u4ee4\u724c\uff0c\u8df3\u8fc7\u4e86\"\u6388\u6743\u7801\"\u8fd9\u4e2a\u6b65\u9aa4\uff0c\u56e0\u6b64\u5f97\u540d\u3002\u6240\u6709\u6b65\u9aa4\u5728\u6d4f\u89c8\u5668\u4e2d\u5b8c\u6210\uff0c\u4ee4\u724c\u5bf9\u8bbf\u95ee\u8005\u662f\u53ef\u89c1\u7684\uff0c\u4e14\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u8ba4\u8bc1\u3002\u5176\u5177\u4f53\u7684\u6388\u6743\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff08\u56fe\u7247\u6765\u81ea RFC6749\u6587\u6863 https://tools.ietf.org/html/rfc6749)\n\n![](https://pic.yupi.icu/5563/202311211033640.png)\n\n\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b:\n\n- \uff08A\uff09\u7b2c\u4e09\u65b9\u5e94\u7528\u5c06\u7528\u6237\u5bfc\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u3002\n- \uff08B\uff09\u7528\u6237\u51b3\u5b9a\u662f\u5426\u7ed9\u4e8e\u5ba2\u6237\u7aef\u6388\u6743\u3002\n- \uff08C\uff09\u5047\u8bbe\u7528\u6237\u7ed9\u4e88\u6388\u6743\uff0c\u8ba4\u8bc1\u670d\u52a1\u5668\u5c06\u7528\u6237\u5bfc\u5411\u5ba2\u6237\u7aef\u6307\u5b9a\u7684\"\u91cd\u5b9a\u5411URI\"\uff0c\u5e76\u5728URI\u7684Hash\u90e8\u5206\u5305\u542b\u4e86\u8bbf\u95ee\u4ee4\u724c\u3002#token\n- \uff08D\uff09\u6d4f\u89c8\u5668\u5411\u8d44\u6e90\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\uff0c\u5176\u4e2d\u4e0d\u5305\u62ec\u4e0a\u4e00\u6b65\u6536\u5230\u7684Hash\u503c\u3002\n- \uff08E\uff09\u8d44\u6e90\u670d\u52a1\u5668\u8fd4\u56de\u4e00\u4e2a\u7f51\u9875\uff0c\u5176\u4e2d\u5305\u542b\u7684\u4ee3\u7801\u53ef\u4ee5\u83b7\u53d6Hash\u503c\u4e2d\u7684\u4ee4\u724c\u3002\n- \uff08F\uff09\u6d4f\u89c8\u5668\u6267\u884c\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u811a\u672c\uff0c\u63d0\u53d6\u51fa\u4ee4\u724c\u3002\n- \uff08G\uff09\u6d4f\u89c8\u5668\u5c06\u4ee4\u724c\u53d1\u7ed9\u5ba2\u6237\u7aef\u3002\n\n\u6838\u5fc3\u53c2\u6570:\n\n```http\nhttps://wx.com/oauth/authorize?response_type=token&client_id=CLIENT_ID&redirect_uri=http://www.baidu.com&scope=read\n```\n\n| \u5b57\u6bb5          | \u63cf\u8ff0                                          |\n| ------------- | --------------------------------------------- |\n| client_id     | \u6388\u6743\u670d\u52a1\u5668\u6ce8\u518c\u5e94\u7528\u540e\u7684\u552f\u4e00\u6807\u8bc6                |\n| response_type | \u5fc5\u987b \u56fa\u5b9a\u503c \u5728\u6388\u6743\u7801\u4e2d\u5fc5\u987b\u4e3a token            |\n| redirect_uri  | \u5fc5\u987b \u901a\u8fc7\u5ba2\u6237\u7aef\u6ce8\u518c\u7684\u91cd\u5b9a\u5411URL                |\n| scope         | \u5fc5\u987b \u4ee4\u724c\u53ef\u4ee5\u8bbf\u95ee\u8d44\u6e90\u6743\u9650                     |\n| state         | \u53ef\u9009 \u5b58\u5728\u539f\u6837\u8fd4\u56de\u5ba2\u6237\u7aef \u7528\u6765\u9632\u6b62 CSRF\u8de8\u7ad9\u653b\u51fb |\n\n### \u5bc6\u7801\u6a21\u5f0f\n\n**\u5bc6\u7801\u6a21\u5f0f\uff08Resource Owner `Password` Credentials Grant\uff09**\u4e2d\uff0c\u7528\u6237\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u81ea\u5df1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\u5ba2\u6237\u7aef\u4f7f\u7528\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5411\"\u670d\u52a1\u5546\u63d0\u4f9b\u5546\"\u7d22\u8981\u6388\u6743\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e2d\uff0c\u7528\u6237\u5fc5\u987b\u628a\u81ea\u5df1\u7684\u5bc6\u7801\u7ed9\n\n\u7aef\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u5f97\u50a8\u5b58\u5bc6\u7801\u3002\u8fd9\u901a\u5e38\u7528\u5728\u7528\u6237\u5bf9\u5ba2\u6237\u7aef\u9ad8\u5ea6\u4fe1\u4efb\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u5ba2\u6237\u7aef\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u6216\u8005\u7531\u4e00\u4e2a\u76f8\u540c\u516c\u53f8\u51fa\u54c1\u3002\u800c\u8ba4\u8bc1\u670d\u52a1\u5668\u53ea\u6709\u5728\u5176\u4ed6\u6388\u6743\u6a21\u5f0f\u65e0\u6cd5\u6267\u884c\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u8003\u8651\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u3002\u5176\u5177\u4f53\u7684\u6388\u6743\u6d41\u7a0b\u5982\u56fe\u6240\u793a\uff08\u56fe\u7247\u6765\u81ea RFC6749\u6587\u6863 https://tools.ietf.org/html/rfc6749)\n\n![](https://pic.yupi.icu/5563/202311211033335.png)\n\n\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b:\n\n- \uff08A\uff09\u7528\u6237\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\n- \uff08B\uff09\u5ba2\u6237\u7aef\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u53d1\u7ed9\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u5411\u540e\u8005\u8bf7\u6c42\u4ee4\u724c\u3002\n- \uff08C\uff09\u8ba4\u8bc1\u670d\u52a1\u5668\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bbf\u95ee\u4ee4\u724c\u3002\n\n\u6838\u5fc3\u53c2\u6570:\n\n```http\nhttps://wx.com/token?grant_type=password&username=USERNAME&password=PASSWORD&client_id=CLIENT_ID\n```\n\n### \u5ba2\u6237\u7aef\u6a21\u5f0f\n\n**\u5ba2\u6237\u7aef\u6a21\u5f0f\uff08`Client Credentials` Grant\uff09**\u6307\u5ba2\u6237\u7aef\u4ee5\u81ea\u5df1\u7684\u540d\u4e49\uff0c\u800c\u4e0d\u662f\u4ee5\u7528\u6237\u7684\u540d\u4e49\uff0c\u5411\"\u670d\u52a1\u63d0\u4f9b\u5546\"\u8fdb\u884c\u8ba4\u8bc1\u3002\u4e25\u683c\u5730\u8bf4\uff0c\u5ba2\u6237\u7aef\u6a21\u5f0f\u5e76\u4e0d\u5c5e\u4e8eOAuth\u6846\u67b6\u6240\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e2d\uff0c\u7528\u6237\u76f4\u63a5\u5411\u5ba2\u6237\u7aef\u6ce8\u518c\uff0c\u5ba2\u6237\u7aef\u4ee5\u81ea\u5df1\u7684\u540d\u4e49\u8981\u6c42\"\u670d\u52a1\u63d0\u4f9b\u5546\"\u63d0\u4f9b\u670d\u52a1\uff0c\u5176\u5b9e\u4e0d\u5b58\u5728\u6388\u6743\u95ee\u9898\u3002\n\n![](https://pic.yupi.icu/5563/202311211033053.png)\n\n\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b:\n\n- \uff08A\uff09\u5ba2\u6237\u7aef\u5411\u8ba4\u8bc1\u670d\u52a1\u5668\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\uff0c\u5e76\u8981\u6c42\u4e00\u4e2a\u8bbf\u95ee\u4ee4\u724c\u3002\n- \uff08B\uff09\u8ba4\u8bc1\u670d\u52a1\u5668\u786e\u8ba4\u65e0\u8bef\u540e\uff0c\u5411\u5ba2\u6237\u7aef\u63d0\u4f9b\u8bbf\u95ee\u4ee4\u724c\u3002\n\n```http\nhttps://wx.com/token?grant_type=client_credentials&client_id=CLIENT_ID&client_secret=CLIENT_SECRET\n```\n\n## OAuth2 \u6807\u51c6\u63a5\u53e3\n\n- `/oauth/authorize`\uff1a\u6388\u6743\u7aef\u70b9\n- `/oauth/token`\uff1a\u83b7\u53d6\u4ee4\u724c\u7aef\u70b9\n- /oauth/confirm_access\uff1a\u7528\u6237\u786e\u8ba4\u6388\u6743\u63d0\u4ea4\u7aef\u70b9\n- /oauth/error\uff1a\u6388\u6743\u670d\u52a1\u9519\u8bef\u4fe1\u606f\u7aef\u70b9\n- /oauth/check_token\uff1a\u7528\u4e8e\u8d44\u6e90\u670d\u52a1\u8bbf\u95ee\u7684\u4ee4\u724c\u89e3\u6790\u7aef\u70b9\n- /oauth/token_key\uff1a\u63d0\u4f9b\u516c\u6709\u5bc6\u5319\u7684\u7aef\u70b9\uff0c\u5982\u679c\u4f7f\u7528JWT\u4ee4\u724c\u7684\u8bdd\n\n### GitHub \u6388\u6743\u767b\u5f55\n\n#### \u521b\u5efa OAuth \u5e94\u7528\n\n\u8bbf\u95ee github \u5e76\u767b\u5f55\uff0c\u5728https://github.com/settings/profile\u4e2d\u627e\u5230 Developer Settings \u9009\u9879\n\n![](https://pic.yupi.icu/5563/202311211033684.png)\n\n- \u521b\u5efa OAuth App\u5e76\u8f93\u5165\u4e00\u4e0b\u57fa\u672c\u4fe1\u606f:\n\n![](https://pic.yupi.icu/5563/202311211033071.png)\n\n- \u6ce8\u518c\u6210\u529f\u540e\u4f1a\u83b7\u53d6\u5230\u5bf9\u5e94\u7684 Client ID \u548c Client Secret\u3002\n\n![](https://pic.yupi.icu/5563/202311211033351.png)\n\n## \u9879\u76ee\u5f00\u53d1\n\n\u521b\u5efa springboot \u5e94\u7528\uff0c\u5e76\u5f15\u5165\u4f9d\u8d56\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n- \u521b\u5efa\u6d4b\u8bd5 controller\n\n```java\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public DefaultOAuth2User hello(){\n        System.out.println(\"hello \");\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        return (DefaultOAuth2User) authentication.getPrincipal();\n    }\n}\n```\n\n- \u914d\u7f6e security\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n                .oauth2Login(); \n    }\n}\n```\n\n- \u914d\u7f6e\u914d\u7f6e\u6587\u4ef6\n\n```properties\nserver.port=8080\n\nspring.security.oauth2.client.registration.github.client-id=d6ea299b9ade3cd3b97d\nspring.security.oauth2.client.registration.github.client-secret=aaa44b2675a7b636b1b43371e509e88ee9013816\n#  \u4e00\u5b9a\u8981\u4e0e\u91cd\u5b9a\u5411\u56de\u8c03 URL \u4e00\u81f4\nspring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8080/login/oauth2/code/github\n```\n\n- \u542f\u52a8\u6d4b\u8bd5\n\n![](https://pic.yupi.icu/5563/202311211033343.png)\n\n- \u70b9\u51fb github \u767b\u5f55,\u70b9\u51fb\u6388\u6743 \u8bbf\u95ee hello \u63a5\u53e3\n\n![](https://pic.yupi.icu/5563/202311211033643.png)\n\n## Spring Security OAuth2\n\nSpring Security \u5bf9 OAuth2 \u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u652f\u6301\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u5728 Spring Security\u4e2d\u4f7f\u7528 OAuth2 \u975e\u5e38\u5730\u65b9\u4fbf\u3002\u7136\u800c\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cSpring Seaurity\u5bf9 OAuth2 \u7684\u652f\u6301\u6bd4\u8f83\u6df7\u4e71\uff0c\u8fd9\u91cc\u7b80\u5355\u68b3\u7406\u4e00\u4e0b\u3002\n\n\u5927\u7ea6\u5341\u5e74\u524d\uff0cSpring \u5f15\u5165\u4e86\u4e00\u4e2a\u793e\u533a\u9a71\u52a8\u7684\u5f00\u6e90\u9879\u76ee Spring Security OAuth\uff0c \u5e76\u5c06\u5176\u7eb3\u5165 Spring \u9879\u76ee\u7ec4\u5408\u4e2d\u3002\u5230\u4eca\u5929\u4e3a\u6b62\uff0c\u8fd9\u4e2a\u9879\u76ee\u5df1\u7ecf\u53d1\u5c55\u6210\u4e3a\u4e00\u4e2a\u6210\u719f\u7684\u9879\u76ee\uff0c\u53ef\u4ee5\u652f\u6301\u5927\u90e8\u5206OAuth \u89c4\u8303\uff0c\u5305\u62ec\u8d44\u6e90\u670d\u52a1\u5668\u3001 \u5ba2\u6237\u7aef\u548c\u6388\u6743\u670d\u52a1\u5668\u7b49\u3002\n\n\u7136\u800c\u65e9\u671f\u7684\u9879\u76ee\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982\uff1a\n\n- OAuth \u662f\u5728\u65e9\u671f\u5b8c\u6210\u7684\uff0c\u5f00\u53d1\u8005\u65e0\u6cd5\u9884\u6599\u672a\u6765\u7684\u53d8\u5316\u4ee5\u53ca\u8fd9\u4e9b\u4ee3\u7801\u5230\u5e95\u8981\u88ab\u600e\u4e48\u4f7f\u7528\uff0c\n\n  \u8fd9\u5bfc\u81f4\u5f88\u591a Spring \u9879\u76ee\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684 OAuth \u652f\u6301\uff0c\u4e5f\u5c31\u5e26\u6765\u4e86 OAuth \u652f\u6301\u7684\u788e\u7247\u5316\u3002\n\n- \u6700\u65e9\u7684OAuth\u9879\u76ee\u540c\u65f6\u652f\u7279 OAuth1.0 \u548c OAuth2.0\uff0c\u800c\u73b0\u5728OAuth1.0 \u65e9\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\uff0c\n\n  \u53ef\u4ee5\u653e\u5f03\u4e86\u3002\n\n- \u73b0\u5728\u6211\u4eec\u6709\u66f4\u591a\u7684\u5e93\u53ef\u4ee5\u9009\u62e9\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5e93\u7684\u57fa\u7840\u4e0a\u53bb\u5f00\u53d1\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u652f\u6301JWT\u7b49\u65b0\u6280\u672f\u3002\n\n\u57fa\u4e8e\u4ee5\u4e0a\u8fd9\u4e9b\u539f\u56e0\uff0c\u5b98\u65b9\u51b3\u5b9a\u91cd\u5199 Spring Security OAuth\uff0c \u4ee5\u4fbf\u66f4\u597d\u5730\u534f\u8c03 Spring \u548cOAuth\uff0c\u5e76\u7b80\u5316\u4ee3\u7801\u5e93\uff0c\u4f7fSpring \u7684 OAuth \u652f\u6301\u66f4\u52a0\u7075\u6d3b\u3002\u7136\u800c\uff0c\u5728\u91cd\u5199\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d1\u751f\u4e86\u4e0d\u5c11\u6ce2\u6298\u3002\n\n2018\u5e741\u670830\u65e5\uff0cSpring \u5b98\u65b9\u53d1\u4e86\u4e00\u4e2a\u901a\u77e5\uff0c\u8868\u793a\u8981\u9010\u6e10\u505c\u6b62\u73b0\u6709\u7684 OAuth2\u652f\u6301\uff0c\u7136\u540e\u5728 Spring Security 5\u4e2d\u6784\u5efa\u4e0b\u4e00\u4ee3 OAuth2.0 \u652f\u6301\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5f53\u65f6 OAuth2 \u7684\u843d\u5730\u65b9\u6848\u6bd4\u8f83\u6df7\u4e71\uff0c\u5728 Spring Security OAuth\u3001 Spring Cloud Security\u3001Spring Boot 1.5.x \u4ee5\u53ca\u5f53\u65f6\u6700\u65b0\u7684Spring Security 5.x \u4e2d\u90fd\u63d0\u4f9b\u4e86\u5bf9 OAuth2 \u7684\u5b9e\u73b0\u3002\u4ee5\u81f3\u4e8e\u5f53\u5f00\u53d1\u8005\u9700\u8981\u4f7f\u7528 OAuth2 \u65f6\uff0c\u4e0d\u5f97\u4e0d\u95ee\uff0c\u5230\u5e95\u9009\u54ea\u4e00\u4e2a\u4f9d\u8d56\u5408\u9002\u5462\uff1f\n\n\u6240\u4ee5Spring \u5b98\u65b9\u51b3\u5b9a\u6709\u5fc5\u8981\u5c06 OAuth2.0 \u7684\u652f\u6301\u7edf\u4e00\u5230\u4e00\u4e2a\u9879\u76ee\u4e2d\uff0c\u4ee5\u4fbf\u4e3a\u7528\u6237\u63d0\u4f9b\u660e\u786e\u7684\u9009\u62e9\uff0c\u5e76\u907f\u514d\u4efb\u4f55\u6f5c\u5728\u7684\u6df7\u4e71\uff0c\u540c\u65f6 OAuth2.0 \u7684\u5f00\u53d1\u6587\u6863\u4e5f\u8981\u91cd\u65b0\u7f16\u5199\uff0c\u4ee5\u65b9\u4fbf\u5f00\u53d1\u4eba\u5458\u5b66\u4e60\u3002\u6240\u6709\u7684\u51b3\u5b9a\u5c06\u5728 Spring Security 5 \u4e2d\u5f00\u59cb\uff0c\u6784\u5efa\u4e0b\u4e00\u4ee3 OAuth2.0\u7684\u652f\u6301\u3002\u4ece\u90a3\u4e2a\u65f6\u5019\u8d77\uff0cSpring Security OAuth \u9879\u76ee\u5c31\u6b63\u5f0f\u5904\u4e8e\u7ef4\u62a4\u6a21\u5f0f\u3002\u5b98\u65b9\u5c06\u63d0\u4f9b\u81f3\u5c11\u4e00\u5e74\u7684\u9519\u8bc6/\u5b89\u5168\u4fee\u590d\u7a0b\u5e8f\uff0c\u5e76\u4e14\u4f1a\u8003\u8651\u6dfb\u52a0\u6b21\u8981\u529f\u80fd\uff0c\u4f46\u4e0d\u4f1a\u6dfb\u52a0\u4e3b\u8981\u529f\u80fd\u3002\u540c\u65f6\u5c06 Spring Security OAuth\u4e2d\u7684\u6240\u6709\u529f\u80fd\u91cd\u6784\u5230 Spring Security 5.x \u4e2d\u3002\n\n\u5230\u4e862019\u5e7411\u670814\u65e5\uff0cSpring \u5b98\u65b9\u53c8\u53d1\u5e03\u4e00\u4e2a\u901a\u77e5\uff0c\u8fd9\u6b21\u7684\u901a\u77e5\u9996\u5148\u8868\u793a Spring Security OAuth \u5728\u8fc1\u5f80 Spring Security 5.x \u7684\u8fc7\u7a0b\u975e\u5e38\u987a\u5229\uff0c\u5927\u90fd\u5206\u8fc1\u7a0b\u5de5\u4f5c\u5df2\u7ecf\u5b8c\u6210\u4e86\uff0c\u5269\u4e0b\u7684\u5c06\u57285.3 \u7248\u672c\u4e2d\u5b8c\u6210\u8fc1\u79fb\uff0c\u5728\u8fc1\u79fb\u7684\u8fc7\u7a0b\u4e2d\u8fd8\u6dfb\u52a0\u4e86\u8bb8\u591a\u65b0\u529f\u80fd\u3002\u5305\u62ec\u5bf9 OpenID Connect1.0 \u7684\u652f\u6301\u3002\u540c\u65f6\u8fd8\u5ba3\u5e03\u5c06\u4e0d\u518d\u652f\u6301\u6388\u6743\u670d\u52a1\u5668\uff0c\u4e0d\u652f\u6301\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff1a\n\n1. `\u57282019\u5e74\uff0c\u5df2\u7ecf\u6709\u5927\u91cf\u7684\u5546\u4e1a\u548c\u5f00\u6e90\u6388\u6743\u670d\u52a1\u5668\u53ef\u7528\u3002`\n2. `\u6388\u6743\u670d\u52a1\u5668\u662f\u4f7f\u7528\u4e00\u4e2a\u5e93\u6765\u6784\u5efa\u4ea7\u54c1\uff0c\u800c Spring Security \u4f5c\u4e3a\u6846\u67b6\uff0c\u5e76\u4e0d\u9002\u5408\u505a\u8fd9\u4ef6\u4e8b\u60c5\u3002`\n\n\u4e00\u77f3\u6fc0\u8d77\u5343\u5c42\u6d6a\uff0c\u8bb8\u591a\u5f00\u53d1\u8005\u8868\u793a\u5bf9\u6b64\u96be\u4ee5\u63a5\u53d7\u3002\u8fd9\u4ef6\u4e8b\u4e5f\u5728Spring \u793e\u533a\u5f15\u53d1\u4e86\u6fc0\u70c8\u7684\u8ba8\u8bba\uff0c\u597d\u5728 Spring \u5b98\u65b9\u613f\u610f\u503e\u542c\u6765\u81ea\u793e\u533a\u7684\u58f0\u97f3\u3002\n\n\u5230\u4e862020\u5e744\u670815\u65e5\uff0cSpring \u5b98\u65b9\u5ba3\u5e03\u542f\u52a8 Spring Authorization server \u9879\u76ee\u3002\u8fd9\u662f\u4e00\u4e2a\u7531 Spring Security \u56e2\u961f\u9886\u5bfc\u7684\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\uff0c\u81f4\u529b\u4e8e\u5411 Spring \u793e\u533a\u63d0\u4f9b Authorization Server\u652f\u6301\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0cSpring \u53c8\u91cd\u65b0\u652f\u6301\u6388\u6743\u670d\u52a1\u5668\u4e86\u3002\n\n2020\u5e748\u670821\u65e5\uff0cSpring Authorization Server 0.0.1 \u6b63\u5f0f\u53d1\u5e03\uff01\n\n\u8fd9\u5c31\u662f OAuth2 \u5728Spring \u5bb6\u65cf\u4e2d\u7684\u53d1\u5c55\u5386\u7a0b\u4e86\u3002\u5728\u540e\u9762\u7684\u5b66\u4e60\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u8d44\u6e90\u670d\u52a1\u5668\u90fd\u5c06\u91c7\u7528\u6700\u65b0\u7684\u65b9\u5f0f\u6765\u6784\u5efa\uff0c\u6388\u6743\u670d\u52a1\u5668\u4f9d\u7136\u91c7\u7528\u65e7\u7684\u65b9\u5f0f\u6765\u6784\u5efa\uff0c\u56e0\u4e3a\u76ee\u524d\u7684 Spring Authorization Server 0.0.1 \u529f\u80fd\u8f83\u5c11\u4e14 BUG \u8f83\u591a\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u6211\u4eec\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 OAuth2 \u65f6\uff0c\u90fd\u662f\u5f00\u53d1\u5ba2\u6237\u7aef\uff0c\u6388\u6743\u670d\u52a1\u5668\u548c\u8d44\u6e90\u670d\u52a1\u5668\u90fd\u662f\u7531\u5916\u90e8\u63d0\u4f9b\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u5728\u81ea\u5df1\u642d\u5efa\u7f51\u7ad9\u4e0a\u96c6\u6210 GitHub \u7b2c\u4e09\u65b9\u767b\u5f55\uff0c\u53ea\u9700\u8981\u5f00\u53d1\u81ea\u5df1\u7684\u5ba2\u6237\u7aef\u5373\u53ef\uff0c\u8ba4\u8bc1\u670d\u52a1\u5668\u548c\u6388\u6743\u670d\u52a1\u5668\u90fd\u662f\u7531 GitHub \u63d0\u4f9b\u7684\u3002\n\n### \u6388\u6743\u3001\u8d44\u6e90\u670d\u52a1\u5668\n\n\u524d\u9762\u7684 GitHub \u6388\u6743\u767b\u5f55\u4e3b\u8981\u5411\u5927\u5bb6\u5c55\u793a\u4e86 OAuth2 \u4e2d\u5ba2\u6237\u7aef\u7684\u5de5\u4f5c\u6a21\u5f0f\u3002\u5bf9\u4e8e\u5927\u90e8\u5206\u7684\u5f00\u53d1\u8005\u800c\u8a00\uff0c\u65e5\u5e38\u63a5\u89e6\u5230\u7684 OAuth2 \u90fd\u662f\u5f00\u53d1\u5ba2\u6237\u7aef\uff0c\u4f8b\u5982\u63a5\u5165 QQ \u767b\u5f55\u3001\u63a5\u5165\u5fae\u4fe1\u767b\u5f55\u7b49\u3002\u4e0d\u8fc7\u4e5f\u6709\u5c11\u91cf\u573a\u666f\uff0c\u53ef\u80fd\u9700\u8981\u5f00\u53d1\u8005\u63d0\u4f9b\u6388\u6743\u670d\u52a1\u5668\u4e0e\u8d44\u6e90\u670d\u52a1\u5668\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u901a\u8fc7\u4e00\u4e2a\u5b8c\u6574\u7684\u6848\u4f8b\u6f14\u793a\u5982\u4f55\u642d\u5efa\u6388\u6743\u670d\u52a1\u5668\u4e0e\u8d44\u6e90\u670d\u52a1\u5668\u3002\n\n\u642d\u5efa\u6388\u6743\u670d\u52a1\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u73b0\u6210\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u76f4\u63a5\u8fd0\u884c\u5373\u53ef\uff0c\u4f8b\u5982\uff1a\n\n- Keycloak\uff1a RedFat \u516c\u53f8\u63d0\u4f9b\u7684\u5f00\u6e90\u5de5\u5177\uff0c\u63d0\u4f9b\u4e86\u5f88\u591a\u5b9e\u7528\u529f\u80fd\uff0c\u5012\u5982\u5355\u70b9\u767b\u5f55\u3001\u652f\u6301OpenID\u3001\u53ef\u89c6\u5316\u540e\u53f0\u7ba1\u7406\u7b49\u3002\n- Apache Oltu: Apache \u4e0a\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6700\u8fd1\u51e0\u5e74\u6ca1\u600e\u4e48\u7ef4\u62a4\u4e86\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u642d\u5efa\u4e00\u4e2a\u5305\u542b\u6388\u6743\u670d\u52a1\u5668\u3001\u8d44\u6e90\u670d\u52a1\u5668\u4ee5\u53ca\u5ba2\u6237\u7aef\u5728\u5185\u7684 OAuth2 \u6848\u4f8b\u3002\n\n\u9879\u76ee\u89c4\u5212\u9996\u5148\u628a\u9879\u76ee\u5206\u4e3a\u4e09\u90e8\u5206\uff1a\n\n- \u6388\u6743\u670d\u52a1\u5668\uff1a\u91c7\u7528\u8f83\u65e9\u7684 spring-cloud-starter-oauth2 \u6765\u642d\u5efa\u6388\u6743\u670d\u52a1\u5668\u3002\n- \u8d44\u6e90\u670d\u52a1\u5668\uff1a\u91c7\u7528\u6700\u65b0\u7684 Spring Security 5.x \u642d\u5efa\u8d44\u6e90\u670d\u52a1\u5668\uff0c\n- \u5ba2\u6237\u7aef: \u91c7\u7528\u6700\u65b0\u7684 Spring Security5.x \u642d\u5efa\u5ba2\u6237\u7aef\u3002\n\n### \u6388\u6743\u670d\u52a1\u5668\u642d\u5efa\n\n#### 1. \u57fa\u4e8e\u5185\u5b58\u5ba2\u6237\u7aef\u548c\u4ee4\u724c\u5b58\u50a8\n\n\u521b\u5efa springboot \u5e94\u7528,\u5e76\u5f15\u5165\u4f9d\u8d56\n\n> \u6ce8\u610f: \u964d\u4f4e springboot \u7248\u672c\u4e3a 2.2.5.RELEASE\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-oauth2</artifactId>\n  <version>2.2.5.RELEASE</version>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```\n\n\u7f16\u5199\u914d\u7f6e\u7c7b,\u6dfb\u52a0 security \u914d\u7f6e\u7c7b\u4ee5\u53ca oauth \u914d\u7f6e\u7c7b\n\n> Spring Security \u914d\u7f6e\u7c7b:\n\n```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n    @Override\n    @Bean\n    protected AuthenticationManager authenticationManager() throws Exception {\n        return super.authenticationManager();\n    }\n    @Bean\n    public UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager inMemoryUserDetailsManager = new InMemoryUserDetailsManager();\n        UserDetails user = User.withUsername(\"root\").password(passwordEncoder().encode(\"123\")).roles(\"ADMIN\").build();\n        inMemoryUserDetailsManager.createUser(user);\n        return inMemoryUserDetailsManager;\n    }\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService());\n    }\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.csrf().disable().formLogin();\n    }\n}\n```\n\n> Authorization Server \u914d\u7f6e\u7c7b:\n\n```java\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServer extends AuthorizationServerConfigurerAdapter {\n  \n    private final PasswordEncoder passwordEncoder;\n\n    private final UserDetailsService userDetailsService;\n\n    @Autowired\n    public AuthorizationServer(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService) {\n        this.passwordEncoder = passwordEncoder;\n        this.userDetailsService = userDetailsService;\n    }\n\n    /**\n     * \u914d\u7f6e\u5ba2\u6237\u7aef\u7ec6\u8282 \u5982 \u5ba2\u6237\u7aef id \u79d8\u94a5 \u91cd\u5b9a\u5411 url \u7b49\n     *\n     * @throws Exception\n     */\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory().withClient(\"client\")\n                .secret(passwordEncoder.encode(\"secret\"))\n                .redirectUris(\"http://www.baidu.com\")\n                .scopes(\"client:read,user:read\")\n                .authorizedGrantTypes(\"authorization_code\", \"refresh_token\",\"implicit\",\"password\",\"client_credentials\");\n    }\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.userDetailsService(userDetailsService);//\u5f00\u542f\u5237\u65b0\u4ee4\u724c\u5fc5\u987b\u6307\u5b9a\n    }\n}\n```\n\n\u542f\u52a8\u670d\u52a1,\u767b\u5f55\u4e4b\u540e\u8fdb\u884c\u6388\u6743\u7801\u83b7\u53d6\n\n![](https://pic.yupi.icu/5563/202311211033565.png)\n\n```http\nhttp://localhost:8080/oauth/authorize?client_id=client&response_type=code&redirect_uri=http://www.baidu.com\n```\n\n![](https://pic.yupi.icu/5563/202311211033797.png)\n\n\u70b9\u51fb\u6388\u6743\u83b7\u53d6\u6388\u6743\u7801\n\n![](https://pic.yupi.icu/5563/202311211034088.png)\n\n\u6839\u636e\u6388\u6743\u7801,\u7533\u8bf7\u4ee4\u724c\n\n```http\ncurl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d 'grant_type=authorization_code&code=IwvCtx&redirect_uri=http://www.baidu.com' \"http://client:secret@localhost:8080/oauth/token\"\n```\n\n![](https://pic.yupi.icu/5563/202311211034404.png)\n\n\u5237\u65b0\u4ee4\u724c\n\n```http\ncurl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d 'grant_type=refresh_token&refresh_token=f6583d8a-598c-46bb-81d8-01fa6484cf05&client_id=client' \"http://client:secret@localhost:8080/oauth/token\"\n```\n\n![](https://pic.yupi.icu/5563/202311211034985.png)\n\n#### \u57fa\u4e8e\u6570\u636e\u5e93\u5ba2\u6237\u7aef\u548c\u4ee4\u724c\u5b58\u50a8\n\n\u5728\u4e0a\u9762\u7684\u6848\u4f8b\u4e2d\uff0cTokenStore \u7684\u9ed8\u8ba4\u5b9e\u73b0\u4e3a InMemoryTokenStore \u5373\u5185\u5b58\u5b58\u50a8\uff0c\u5bf9\u4e8e Client \u4fe1\u606f\uff0cClientDetailsService \u63a5\u53e3\u8d1f\u8d23\u4ece\u5b58\u50a8\u4ed3\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5728\u4e0a\u9762\u7684\u6848\u4f8b\u4e2d\u9ed8\u8ba4\u4f7f\u7528\u7684\u4e5f\u662f InMemoryClientDetailsService \u5b9e\u73b0\u7c7b\u3002\n\n\u5982\u679c\u8981\u60f3\u4f7f\u7528\u6570\u636e\u5e93\u5b58\u50a8\uff0c\u53ea\u8981\u63d0\u4f9b\u8fd9\u4e9b\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u5373\u53ef\uff0c\u800c\u6846\u67b6\u5df2\u7ecf\u4e3a\u6211\u4eec\u5199\u597d JdbcTokenStore \u548c JdbcClientDetailsService\n\n\u5efa\u8868:\n\n```http\nhttps://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\n# \u6ce8\u610f: \u5e76\u7528 BLOB \u66ff\u6362\u8bed\u53e5\u4e2d\u7684 LONGVARBINARY \u7c7b\u578b\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for clientdetails\n-- ----------------------------\nDROP TABLE IF EXISTS `clientdetails`;\nCREATE TABLE `clientdetails` (\n  `appId` varchar(256) NOT NULL,\n  `resourceIds` varchar(256) DEFAULT NULL,\n  `appSecret` varchar(256) DEFAULT NULL,\n  `scope` varchar(256) DEFAULT NULL,\n  `grantTypes` varchar(256) DEFAULT NULL,\n  `redirectUrl` varchar(256) DEFAULT NULL,\n  `authorities` varchar(256) DEFAULT NULL,\n  `access_token_validity` int(11) DEFAULT NULL,\n  `refresh_token_validity` int(11) DEFAULT NULL,\n  `additionalInformation` varchar(4096) DEFAULT NULL,\n  `autoApproveScopes` varchar(256) DEFAULT NULL,\n  PRIMARY KEY (`appId`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_access_token\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_access_token`;\nCREATE TABLE `oauth_access_token` (\n  `token_id` varchar(256) DEFAULT NULL,\n  `token` blob,\n  `authentication_id` varchar(256) NOT NULL,\n  `user_name` varchar(256) DEFAULT NULL,\n  `client_id` varchar(256) DEFAULT NULL,\n  `authentication` blob,\n  `refresh_token` varchar(256) DEFAULT NULL,\n  PRIMARY KEY (`authentication_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_approvals\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_approvals`;\nCREATE TABLE `oauth_approvals` (\n  `userId` varchar(256) DEFAULT NULL,\n  `clientId` varchar(256) DEFAULT NULL,\n  `scope` varchar(256) DEFAULT NULL,\n  `status` varchar(10) DEFAULT NULL,\n  `expiresAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `lastModifiedAt` date DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_client_details\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_client_details`;\nCREATE TABLE `oauth_client_details` (\n  `client_id` varchar(256) NOT NULL,\n  `resource_ids` varchar(256) DEFAULT NULL,\n  `client_secret` varchar(256) DEFAULT NULL,\n  `scope` varchar(256) DEFAULT NULL,\n  `authorized_grant_types` varchar(256) DEFAULT NULL,\n  `web_server_redirect_uri` varchar(256) DEFAULT NULL,\n  `authorities` varchar(256) DEFAULT NULL,\n  `access_token_validity` int(11) DEFAULT NULL,\n  `refresh_token_validity` int(11) DEFAULT NULL,\n  `additional_information` varchar(4096) DEFAULT NULL,\n  `autoapprove` varchar(256) DEFAULT NULL,\n  PRIMARY KEY (`client_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_client_token\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_client_token`;\nCREATE TABLE `oauth_client_token` (\n  `token_id` varchar(256) DEFAULT NULL,\n  `token` blob,\n  `authentication_id` varchar(256) NOT NULL,\n  `user_name` varchar(256) DEFAULT NULL,\n  `client_id` varchar(256) DEFAULT NULL,\n  PRIMARY KEY (`authentication_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_code\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_code`;\nCREATE TABLE `oauth_code` (\n  `code` varchar(256) DEFAULT NULL,\n  `authentication` blob\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for oauth_refresh_token\n-- ----------------------------\nDROP TABLE IF EXISTS `oauth_refresh_token`;\nCREATE TABLE `oauth_refresh_token` (\n  `token_id` varchar(256) DEFAULT NULL,\n  `token` blob,\n  `authentication` blob\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n-- \u5199\u5165\u5ba2\u6237\u7aef\u4fe1\u606f\nINSERT INTO `oauth_client_details` VALUES ('client', NULL, '$2a$10$QCsINtuRfP8kM112xRVdvuI58MrefLlEP2mM0kzB5KZCPhnOf4392', 'read', 'authorization_code,refresh_token', 'http://www.baidu.com', NULL, NULL, NULL, NULL, NULL);\n```\n\n\u5f15\u5165\u4f9d\u8d56\n\n```xml\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n```\n\n\u7f16\u5199\u914d\u7f6e\u6587\u4ef6\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/oauth?characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=root\n```\n\n\u7f16\u5199\u6570\u636e\u5e93\u4fe1\u606f\u5b9e\u73b0\n\n```java\n@Configuration\n@EnableAuthorizationServer\npublic class JdbcAuthorizationServer extends AuthorizationServerConfigurerAdapter {\n\n    private final AuthenticationManager authenticationManager;\n\n\n    private final PasswordEncoder passwordEncoder;\n\n    private final DataSource dataSource;\n\n\n    @Autowired\n    public JdbcAuthorizationServer(AuthenticationManager authenticationManager, PasswordEncoder passwordEncoder, DataSource dataSource) {\n        this.authenticationManager = authenticationManager;\n        this.passwordEncoder = passwordEncoder;\n        this.dataSource = dataSource;\n    }\n\n    @Bean // \u58f0\u660eTokenStore\u5b9e\u73b0\n    public TokenStore tokenStore() {\n        return new JdbcTokenStore(dataSource);\n    }\n\n    @Bean // \u58f0\u660e ClientDetails\u5b9e\u73b0\n    public ClientDetailsService clientDetails() {\n        JdbcClientDetailsService jdbcClientDetailsService = new JdbcClientDetailsService(dataSource);\n        jdbcClientDetailsService.setPasswordEncoder(passwordEncoder);\n        return jdbcClientDetailsService;\n    }\n\n    @Override //\u914d\u7f6e\u4f7f\u7528\u6570\u636e\u5e93\u5b9e\u73b0\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.authenticationManager(authenticationManager);//\u8ba4\u8bc1\u7ba1\u7406\u5668\n        endpoints.tokenStore(tokenStore());//\u914d\u7f6e\u4ee4\u724c\u5b58\u50a8\u4e3a\u6570\u636e\u5e93\u5b58\u50a8\n\n        // \u914d\u7f6eTokenServices\u53c2\u6570\n        DefaultTokenServices tokenServices = new DefaultTokenServices();//\u4fee\u6539\u9ed8\u8ba4\u4ee4\u724c\u751f\u6210\u670d\u52a1\n        tokenServices.setTokenStore(endpoints.getTokenStore());//\u57fa\u4e8e\u6570\u636e\u5e93\u4ee4\u724c\u751f\u6210\n        tokenServices.setSupportRefreshToken(true);//\u662f\u5426\u652f\u6301\u5237\u65b0\u4ee4\u724c\n        tokenServices.setReuseRefreshToken(true);//\u662f\u5426\u91cd\u590d\u4f7f\u7528\u5237\u65b0\u4ee4\u724c\uff08\u76f4\u5230\u8fc7\u671f\uff09\n\n        tokenServices.setClientDetailsService(endpoints.getClientDetailsService());//\u8bbe\u7f6e\u5ba2\u6237\u7aef\u4fe1\u606f\n        tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());//\u7528\u6765\u63a7\u5236\u4ee4\u724c\u5b58\u50a8\u589e\u5f3a\u7b56\u7565\n        //\u8bbf\u95ee\u4ee4\u724c\u7684\u9ed8\u8ba4\u6709\u6548\u671f\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u8fc7\u671f\u7684\u4ee4\u724c\u4e3a\u96f6\u6216\u8d1f\u6570\u3002\n        tokenServices.setAccessTokenValiditySeconds((int) TimeUnit.DAYS.toSeconds(30)); // 30\u5929\n        //\u5237\u65b0\u4ee4\u724c\u7684\u6709\u6548\u6027\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u96f6\uff0c\u5219\u4ee4\u724c\u5c06\u4e0d\u4f1a\u8fc7\u671f\n        tokenServices.setRefreshTokenValiditySeconds((int) TimeUnit.DAYS.toSeconds(3)); //3\u5929\n        endpoints.tokenServices(tokenServices);//\u4f7f\u7528\u914d\u7f6e\u4ee4\u724c\u670d\u52a1\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.withClientDetails(clientDetails());//\u4f7f\u7528 jdbc\u5b58\u50a8\n    }\n}\n```\n\n\u542f\u52a8\u6d4b\u8bd5,\u53d1\u73b0\u6570\u636e\u5e93\u4e2d\u5df2\u7ecf\u5b58\u50a8\u76f8\u5173\u7684\u4ee4\u724c\n\n![](https://pic.yupi.icu/5563/202311211034418.png)\n\n### \u8d44\u6e90\u670d\u52a1\u5668\u642d\u5efa\n\n\u5f15\u5165\u4f9d\u8d56\n\n```xml\n<properties>\n        <java.version>1.8</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>2.2.5.RELEASE</spring-boot.version>\n        <spring-cloud.version>Hoxton.SR9</spring-cloud.version>\n\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-oauth2</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-oauth2-resource-server</artifactId>\n        </dependency>\n\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n\n\u521b\u5efa\u8d44\u6e90\n\n```java\n@RestController\npublic class HelloController {\n    @GetMapping(\"/hello\")\n    public String hello(){\n        return \"hello!\";\n    }\n}\n```\n\n\u7f16\u5199\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\u7c7b\n\n```java\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {\n    private final DataSource dataSource;\n    @Autowired\n    public ResourceServerConfig(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {\n        resources.tokenStore(tokenStore());\n    }\n    @Bean\n    public TokenStore tokenStore() {\n        return new JdbcTokenStore(dataSource);\n    }\n}\n```\n\n\u7f16\u5199\u914d\u7f6e\u6587\u4ef6\n\n```properties\n# \u5e94\u7528\u670d\u52a1 WEB \u8bbf\u95ee\u7aef\u53e3\nserver.port=8081\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=root\nlogging.level.org.springframework.jdbc.core=debug\n```\n\n\u542f\u52a8\u6d4b\u8bd5,\u751f\u6210\u4ee4\u724c\u4e4b\u540e\u5e26\u6709\u4ee4\u724c\u8bbf\u95ee:\n\n```http\ncurl -H \"Authorization:Bearer dffa62d2-1078-457e-8a2b-4bd46fae0f47\" http://localhost:8081/hello\n```\n\n![](https://pic.yupi.icu/5563/202311211034462.png)\n\n### \u6388\u6743\u670d\u52a1\u5668\u9881\u53d1 JWT \u4ee4\u724c\n\n\u914d\u7f6e\u9881\u53d1 JWT \u4ee4\u724c\n\n```java\n@Configuration\n@EnableAuthorizationServer\npublic class JwtAuthServerConfig extends AuthorizationServerConfigurerAdapter {\n\n    private final PasswordEncoder passwordEncoder;\n    private final AuthenticationManager authenticationManager;\n    private final DataSource dataSource;\n\n    @Autowired\n    public JwtAuthServerConfig(PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager, DataSource dataSource) {\n        this.passwordEncoder = passwordEncoder;\n        this.authenticationManager = authenticationManager;\n        this.dataSource = dataSource;\n    }\n    @Override //\u914d\u7f6e\u4f7f\u7528 jwt \u65b9\u5f0f\u9881\u53d1\u4ee4\u724c,\u540c\u65f6\u914d\u7f6e jwt \u8f6c\u6362\u5668\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.tokenStore(tokenStore())\n                .accessTokenConverter(jwtAccessTokenConverter())\n                .authenticationManager(authenticationManager);\n    }\n    @Bean//\u4f7f\u7528JWT\u65b9\u5f0f\u751f\u6210\u4ee4\u724c\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(jwtAccessTokenConverter());\n    }\n    @Bean//\u4f7f\u7528\u540c\u4e00\u4e2a\u5bc6\u94a5\u6765\u7f16\u7801 JWT \u4e2d\u7684  OAuth2 \u4ee4\u724c\n    public JwtAccessTokenConverter jwtAccessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(\"123\");//\u53ef\u4ee5\u91c7\u7528\u5c5e\u6027\u6ce8\u5165\u65b9\u5f0f \u751f\u4ea7\u4e2d\u5efa\u8bae\u52a0\u5bc6\n        return converter;\n    }\n    @Bean // \u58f0\u660e ClientDetails\u5b9e\u73b0\n    public ClientDetailsService clientDetails() {\n        JdbcClientDetailsService jdbcClientDetailsService = new JdbcClientDetailsService(dataSource);\n        jdbcClientDetailsService.setPasswordEncoder(passwordEncoder);\n        return jdbcClientDetailsService;\n    }\n    @Override//\u4f7f\u7528\u6570\u636e\u5e93\u65b9\u5f0f\u5ba2\u6237\u7aef\u5b58\u50a8\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.withClientDetails(clientDetails());\n    }\n}\n```\n\n\u542f\u52a8\u670d\u52a1,\u6839\u636e\u6388\u6743\u7801\u83b7\u53d6\u4ee4\u724c\n\n![](https://pic.yupi.icu/5563/202311211034556.png)\n\n![image-20231120114040975](https://pic.yupi.icu/5563/202311211034989.png)\n\n### \u4f7f\u7528 JWT \u4ee4\u724c\u8d44\u6e90\u670d\u52a1\u5668\n\n\u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u89e3\u6790jwt\n\n```java\n@Configuration\n@EnableResourceServer\npublic class JwtResourceServerConfig extends ResourceServerConfigurerAdapter {\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {\n        resources.tokenStore(tokenStore());\n    }\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(jwtAccessTokenConverter());\n    }\n    @Bean\n    public JwtAccessTokenConverter jwtAccessTokenConverter() {\n        JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();\n        jwtAccessTokenConverter.setSigningKey(\"123\");\n        return jwtAccessTokenConverter;\n    }\n}\n```\n\n\u542f\u52a8\u6d4b\u8bd5,\u901a\u8fc7 jwt \u4ee4\u724c\u8bbf\u95ee\u8d44\u6e90\n\n```http\ncurl -H \"Authorization:Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjAzMzM4MjgsInVzZXJfbmFtZSI6InJvb3QiLCJhdXRob3JpdGllcyI6WyJST0xFX0FETUlOIl0sImp0aSI6ImJmZGVjMzg1LWQyYmYtNDc5Yi05YjhhLTgyZWE4YTRkNzgzMyIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFwcDpyZWFkIl19.QlELW7LMLuD4OghbEFFzJpIxjW80hC3WHd3I0PiuI7Y\" http://localhost:8081/hello\n```\n\n![](https://pic.yupi.icu/5563/202311211034551.png)"}