{"data": "# cx_Oracle_async\n\n.VERSION | LICENCE | VERSION | PUBLISH | BUILD | DOCS | VISITORS\n:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:\n![fury](https://img.shields.io/pypi/v/cx-Oracle-async.svg) | ![licence](https://img.shields.io/github/license/GoodManWEN/cx_Oracle_async) | ![pyversions](https://img.shields.io/pypi/pyversions/cx-Oracle-async.svg) | ![Publish](https://github.com/GoodManWEN/cx_Oracle_async/workflows/Publish/badge.svg) | ![Build](https://github.com/GoodManWEN/cx_Oracle_async/workflows/Build/badge.svg) | ![Docs](https://readthedocs.org/projects/cx-oracle-async/badge/?version=latest) | ![Visitors](https://visitor-badge.glitch.me/badge?page_id=goodmanwen.cx_Oracle_async&style=flat-square&color=0088cc)\n\nA very simple asynchronous wrapper that allows you to get access to the Oracle database in asyncio programs. \n\nEasy to use , buy may not the best practice for efficiency concern.\n\n## Requirements\n- [cx_Oracle >= 8.1.0](https://github.com/oracle/python-cx_Oracle) (Take into consideration that author of cx_Oracle said he's trying to implement asyncio support , APIs maybe change in future version. Switch to 8.1.0 if there's something wrong makes it not gonna work.)\n- [ThreadPoolExecutorPlus >= 0.2.0](https://github.com/GoodManWEN/ThreadPoolExecutorPlus)\n\n## Install\n\n    pip install cx_Oracle_async\n\n## Feature\n- Nearly all the same as aiomysql in asynchronous operational approach , with limited cx_Oracle feature support.\n- No automaticly date format transition built-in.\n- AQ feature added , check [docs here](https://cx_oracle_async.readthedocs.io/en/latest/user_guide/advancedfeatures.html#oracle-advanced-queuing-aq) for further information.\n- You can modify some of the connection properties simply like you're using cx_Oracle. \n- You can do basic insert / select / delete etc.\n- If you're connecting to database which is on a different machine from python process , you need to install oracle client module in order to use this library. Check [cx-Oracle's installation guide](https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html) for further information.\n\n## Documentation\n\n[https://cx_oracle_async.readthedocs.io](https://cx_oracle_async.readthedocs.io)\n\n## Performance\nquery type | asynchronous multithreading | synchronous multithreading | synchronous single thread\n-|-|-|-\nfast single line query | 6259.80 q/s | 28906.93 q/s | 14805.61 q/s\nsingle line insertion | 1341.88 q/s | 1898 q/s | 1685.17 q/s\n\n*/\\* Test platform: \\*/*<br>\n*AMD Ryzen 3700x*<br>\n*Windows 10 LTSC*<br>\n*Oracle 19c*<br>\n*You can find performance test codes [here](https://github.com/GoodManWEN/cx_Oracle_async/blob/main/misc).* \n\n## Examples\nBefore running examples , make sure you've already installed a [Oracle Client](https://cx-oracle-async.readthedocs.io/en/latest/user_guide/quickstart.html#install-oracle-client) on your machine.\n```Python\n# basic_usages.py\nimport asyncio\nimport cx_Oracle_async\n\nasync def main():\n    oracle_pool = await cx_Oracle_async.create_pool(\n        host='localhost', \n        port='1521',\n        user='user', \n        password='password',\n        service_name='orcl', \n        min = 2,\n        max = 4,\n    )\n\n    async with oracle_pool.acquire() as connection:\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM V$SESSION\")\n            print(await cursor.fetchall())\n\n    await oracle_pool.close()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n"}