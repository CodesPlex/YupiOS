{"data": "# fnvhash-c\n\n.VERSION | LICENCE | VERSION | PUBLISH | BUILD | DOCS \n:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:\n![fury](https://img.shields.io/pypi/v/fnvhash-c.svg) | ![licence](https://img.shields.io/github/license/GoodManWEN/py-fnvhash-c) | ![pyversions](https://img.shields.io/pypi/pyversions/fnvhash-c.svg) | ![Publish](https://github.com/GoodManWEN/py-fnvhash-c/workflows/Publish/badge.svg) | ![Build](https://github.com/GoodManWEN/py-fnvhash-c/workflows/Build/badge.svg) | ![Docs](https://readthedocs.org/projects/fnvhash-c/badge/?version=latest)\n\nPython FNV hash implementation based on cython, to give you an alternative choice when you need a high speed hash in python, could reduce the latency of a single call to tens of nanoseconds.\n\nBecause of deprecation, we selectively did not implement FNV-0. \n\nWith code structure referenced to [https://github.com/znerol/py-fnvhash](https://github.com/znerol/py-fnvhash)\n\n## Install\n\n    pip install fnvhash-c\n\n## Feature\n- Implementation in pure C, you can expect a 30x to 50x speedup.\n- Hash latency reduce to under 100ns.\n- A simple bloom filter built inside , which uses a slightly different parameter than the default value to keep result diverse. Ultra fast to use for distributed blacklist scenarios.\n- CityHash included, since the [original repo](https://github.com/escherba/python-cityhash) is no longer maintained, it is difficult to compile directly on windows.\n\n## Documentation\nhttps://fnvhash-c.readthedocs.io\n\n## Example\n\n```Python3\n# example.py\nimport fnvhash_c\n\nprint(fnvhash_c.fnv1_32(b'Hello world!'))\nprint(fnvhash_c.fnv1a_32(b'Hello world!'))\nprint(fnvhash_c.fnv1_64(b'Hello world!'))\nprint(fnvhash_c.fnv1a_64(b'Hello world!'))\n\ncenter = fnvhash_c.BloomFilter(capability = 4096) \n# To reduce runtime overhead, The default capacity is set to a constant compiled in the program.\n# If you wish to change it, you need to compile the libs yourself to make sure the program work fine.\n# Generally speaking, depending on the conversion time between Python and C, \n# a shorter capability usually helps to make filter run faster.\n\nimport random\nrandom_char_generator = lambda : f\"{random.randint(1000000000,9999999999)}+salt\".encode()\n\ntest_time = 1000000\nhit = 0\nmiss = 0\nfor _ in range(test_time):\n    if center.hit(random_char_generator()):\n        hit += 1\n    else:\n        miss += 1\n\n# Since the filter is total blank ,the hit rate should be very low\nassert (hit * 100 / test_time) <= 0.01\nprint(f\"Empty filter hit rate: {round(hit * 100 / test_time)}%\")\n\n# Now we put something into the filter list.\nblack_list = [random_char_generator() for _ in range(10000)]\nfor char in black_list:\n    center.update(char)\n    \nhit = 0\nfor _ in range(test_time):\n    if center.hit(random_char_generator()):\n        hit += 1\nprint(f\"Filter with 10k elements hit rate: {round(hit * 100 / test_time,2)}%\")\n\nhit = 0\nfor char in black_list:\n    if center.hit(char):\n        hit += 1\nprint(f\"Items in the blacklist hit rate: {round(hit * 100 / len(black_list),2)}%\", ) # should be 100%\n```\n"}