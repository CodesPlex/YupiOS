{"data": "# \u57fa\u4e8e Redis \u5b9e\u73b0\u77ed\u4fe1\u767b\u5f55\n\n> \u4f5c\u8005\uff1a[\u5bd2\u6708](https://wx.zsxq.com/dweb2/index/footprint/818288821184212)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 11102\n\n\u4f7f\u7528redis\u5b9e\u73b0\u77ed\u4fe1\u767b\u5f55\n\n\u76ee\u5f55\n\n\u4e00\u3001\u8bbe\u8ba1Key\u7684\u7ed3\u6784\n\n\u4e8c\u3001\u8bbf\u95ee\u6d41\u7a0b\n\n\u4e09\u3001\u4ee3\u7801\u5b9e\u73b0\n\n# \u4e00\u3001\u8bbe\u8ba1Key\u7684\u7ed3\u6784\n\n\u9996\u5148\u6211\u4eec\u8981\u601d\u8003\u4e00\u4e0b\u5229\u7528redis\u6765\u5b58\u50a8\u6570\u636e\uff0c\u90a3\u4e48\u5230\u5e95\u4f7f\u7528\u54ea\u79cd\u7ed3\u6784\u5462\uff1f\u7531\u4e8e\u5b58\u5165\u7684\u6570\u636e\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528String\uff0c\u6216\u8005\u662f\u4f7f\u7528\u54c8\u5e0c\uff0c\u5982\u4e0b\u56fe\uff0c\u5982\u679c\u4f7f\u7528String\uff0c\u540c\u5b66\u4eec\u6ce8\u610f\u4ed6\u7684value\uff0c\u8981\u591a\u5360\u7528\u4e00\u70b9\u7a7a\u95f4\uff0c\u5982\u679c\u4f7f\u7528\u54c8\u5e0c\uff0c\u5219\u4ed6\u7684value\u4e2d\u53ea\u4f1a\u5b58\u50a8\u4ed6\u6570\u636e\u672c\u8eab\uff0c\u5982\u679c\u4e0d\u662f\u7279\u522b\u5728\u610f\u5185\u5b58\uff0c\u5176\u5b9e\u4f7f\u7528String\u5c31\u53ef\u4ee5\u5566\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528String\u7ed3\u6784\uff0c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684key\uff0cvalue\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u5173\u4e8ekey\u7684\u5904\u7406\uff0csession\u4ed6\u662f\u6bcf\u4e2a\u7528\u6237\u90fd\u6709\u81ea\u5df1\u7684session\uff0c\u4f46\u662fredis\u7684key\u662f\u5171\u4eab\u7684\uff0c\u54b1\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528code\u4e86\n\n> \u5728\u8bbe\u8ba1\u8fd9\u4e2akey\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e4b\u524d\u8bb2\u8fc7\u9700\u8981\u6ee1\u8db3\u4e24\u70b9\n>\n> 1\u3001key\u8981\u5177\u6709\u552f\u4e00\u6027\n>\n> 2\u3001key\u8981\u65b9\u4fbf\u643a\u5e26\n\n\u5982\u679c\u6211\u4eec\u91c7\u7528phone\uff1a\u624b\u673a\u53f7\u8fd9\u4e2a\u7684\u6570\u636e\u6765\u5b58\u50a8\u5f53\u7136\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5982\u679c\u628a\u8fd9\u6837\u7684\u654f\u611f\u6570\u636e\u5b58\u50a8\u5230redis\u4e2d\u5e76\u4e14\u4ece\u9875\u9762\u4e2d\u5e26\u8fc7\u6765\u6bd5\u7adf\u4e0d\u592a\u5408\u9002\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u540e\u53f0\u751f\u6210\u4e00\u4e2a\u968f\u673a\u4e32token\uff0c\u7136\u540e\u8ba9\u524d\u7aef\u5e26\u6765\u8fd9\u4e2atoken\u5c31\u80fd\u5b8c\u6210\u6211\u4eec\u7684\u6574\u4f53\u903b\u8f91\u4e86\n\n# \u4e8c\u3001\u8bbf\u95ee\u6d41\u7a0b\n\n\u5f53\u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u7528\u6237\u53bb\u767b\u5f55\u4f1a\u53bb\u6821\u9a8c\u7528\u6237\u63d0\u4ea4\u7684\u624b\u673a\u53f7\u548c\u9a8c\u8bc1\u7801\uff0c\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\uff0c\u5219\u6839\u636e\u624b\u673a\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f\uff0c\u4e0d\u5b58\u5728\u5219\u65b0\u5efa\uff0c\u6700\u540e\u5c06\u7528\u6237\u6570\u636e\u4fdd\u5b58\u5230redis\uff0c\u5e76\u4e14\u751f\u6210token\u4f5c\u4e3aredis\u7684key\uff0c\u5f53\u6211\u4eec\u6821\u9a8c\u7528\u6237\u662f\u5426\u767b\u5f55\u65f6\uff0c\u4f1a\u53bb\u643a\u5e26\u7740token\u8fdb\u884c\u8bbf\u95ee\uff0c\u4eceredis\u4e2d\u53d6\u51fatoken\u5bf9\u5e94\u7684value\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\u5219\u62e6\u622a\uff0c\u5982\u679c\u5b58\u5728\u5219\u5c06\u5176\u4fdd\u5b58\n\n\u4e09\u3001\u4ee3\u7801\u5b9e\u73b0 \u5148\u52a0\u5165\u914d\u7f6e\n\n```nestedtext\nspring:\n   redis:\n     host: xxxxxxxx\n     port: xxx\n     password: xxxxx\n     lettuce:\n       pool:\n         max-active: 10\n         max-idle: 10\n         min-idle: 1\n         time-between-eviction-runs: 10s\n```\n\n## 1\u3001\u5b58\u50a8\u9a8c\u8bc1\u7801\n\n \n\n```java\npublic static final String LOGIN_CODE_KEY = \"login:code:\";\n   public static final Long LOGIN_CODE_TTL = 2L;\n```\n\n\u4fee\u6539service\u5c42sendcode\u65b9\u6cd5\n\n \n\n```armasm\n//\u58f0\u660e\u5e38\u91cf\u540e\n stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);\n```\n\n\u6240\u4ee5\u8fd9\u91cc\u4fee\u6539\u6210redis\u767b\u5f55\u540e\u53d1\u9001\u9a8c\u8bc1\u7801\u8fd9\u5757\u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\n\n### 1\uff09controller\u5c42\n\n```reasonml\n@GetMapping(\"/code\")\n     public Result SendCode(String phone, HttpSession session) {\n         //1\u3001\u6821\u9a8c\u624b\u673a\u53f7\u662f\u5426\u5408\u6cd5\n         if (!RegexUtils.isPhoneInvalid(phone)) {\n             return Result.fail(\"\u9a8c\u8bc1\u7801\u683c\u5f0f\u5f02\u5e38\");\n         }\n         String code = userService.sendCode(phone, session);\n         //Object code1 = session.getAttribute(\"code\");\n         return Result.ok(code);\n     }\n```\n\n### 2\uff09service\u5c42\n\n```reasonml\n@Override\n     public String sendCode(String phone, HttpSession session) {\n         //1\u3001\u6821\u9a8c\u624b\u673a\u53f7\u662f\u5426\u5408\u6cd5\n         if (!RegexUtils.isPhoneInvalid(phone)) {\n             return \"\u624b\u673a\u53f7\u683c\u5f0f\u5f02\u5e38\";\n         }\n         //2\u3001\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u5417\n         String code = RandomUtil.randomNumbers(6);\n         //4\u3001\u4fdd\u5b58\u9a8c\u8bc1\u7801\u5230redis\n         //\u8bbe\u7f6ekey\u6709\u6548\u671f2\u5206\u949f\n         stringRedisTemplate.opsForValue()\n                 .set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);\n         //4\u3001\u6253\u5370\u65e5\u5fd7\n         log.debug(\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u6210\u529f\uff0c\u9a8c\u8bc1\u7801:{}\", code);\n         //\u524d\u7aef\u63a7\u5236\u53f0\u8f93\u51fa\n         return \"\u9a8c\u8bc1\u7801\u53d1\u9001\u6210\u529f:\"+code;\n     }\n```\n\n\u53ef\u4ee5\u770b\u5230\u8fd4\u56de\u540e\u7684\u7ed3\u679c\n\nredis\u4e2d\n\n![](https://pic.yupi.icu/5563/202311230843708.png)\n\n### 3\uff09\u65b0\u5efa\u7ed3\u679c\u8fd4\u56de\u7c7b\n\n\u8fd9\u91cc\u7684\u65b9\u6cd5\u8fd4\u56de\u503c\u6709\u4e9b\u6211\u6539\u6210\u4e86Result\uff0c\u56e0\u4e3a\u6211\u53d1\u73b0\u8fd9\u4e2a\u5168\u5c40\u7edf\u4e00\u6846\u67b6\u7684\u8fd9\u4e2a\u4f9d\u8d56\u8fd8\u662f\u4e0d\u592a\u597d\u7528\uff0c\u53ea\u5bf9\u8bf7\u6c42\u6210\u529f\u65f6\u7684\u7ed3\u679c\u8fdb\u884c\u8fd4\u56de\uff0c\u800c\u51fa\u73b0\u5f02\u5e38\u6216\u4e3anull\u7684\u60c5\u51b5\uff0c\u524d\u7aef\u4e0d\u4f1a\u6709\u4efb\u4f55\u53cd\u9988\n\n \n\n```reasonml\n@Override\n     public String sendCode(String phone, HttpSession session) {\n         //1\u3001\u6821\u9a8c\u624b\u673a\u53f7\u662f\u5426\u5408\u6cd5\n         if (!RegexUtils.isPhoneInvalid(phone)) {\n             return \"\u624b\u673a\u53f7\u683c\u5f0f\u5f02\u5e38\";\n         }\n         //2\u3001\u751f\u6210\u968f\u673a\u9a8c\u8bc1\u5417\n         String code = RandomUtil.randomNumbers(6);\n         //4\u3001\u4fdd\u5b58\u9a8c\u8bc1\u7801\u5230redis\n         //\u8bbe\u7f6ekey\u6709\u6548\u671f2\u5206\u949f\n         stringRedisTemplate.opsForValue()\n                 .set(LOGIN_CODE_KEY+phone,code,LOGIN_CODE_TTL, TimeUnit.MINUTES);\n         //4\u3001\u6253\u5370\u65e5\u5fd7\n         log.debug(\"\u53d1\u9001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u6210\u529f\uff0c\u9a8c\u8bc1\u7801:{}\", code);\n         //\u524d\u7aef\u63a7\u5236\u53f0\u8f93\u51fa\n         return \"\u9a8c\u8bc1\u7801\u53d1\u9001\u6210\u529f:\"+code;\n     }\n```\n\n\u524d\u7aef\u8fd4\u56de\n\n## 2\u3001\u767b\u5f55\u6821\u9a8c\n\n> \u6211\u7684\u767b\u5f55\u903b\u8f91\uff1a\n\n-> \u6821\u9a8c\u7528\u6237\u767b\u5f55\u6001\u2014\u2014\u5148\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6Key\uff0c\u5224\u65ad\u7528\u6237\u662f\u5426\u66fe\u767b\u9646\u8fc7\n\n```gams\nSet<Object> cacheKey = stringRedisTemplate.\n    opsForHash().keys(LOGIN_USER_KEY + phone);\n```\n\n- > \u767b\u9646\u8fc7\u2014\u2014\u76f4\u63a5\u6839\u636ecacheKey\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\n- > \u672a\u66fe\u767b\u9646\u8fc7\u2014\u2014\u8fd9\u91cc\u5206\u6210\u4e24\u79cd\u60c5\u51b5\n\n- > \u4e00\uff1a\u7528\u6237\u4e3a\u65b0\u7528\u6237\uff0c\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\n\n- > \u4e8c\u3001\u7528\u6237\u767b\u9646\u8fc7\uff0c\u4f46\u7f13\u5b58\u5931\u6548\u4e86\n\n> \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u7528\u6237\u662f\u5426\u5b58\u5728\uff0c \u8fd9\u91cc\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u6821\u9a8c\u9a8c\u8bc1\u7801\u4e86\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u8bf4\u901a\u8fc7\u4e86\n\n1. > \u5b58\u5728\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u8fdb\u884c\u767b\u5f55\u64cd\u4f5c\uff0c\u76f4\u63a5\u5c06\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u51fa\u7684\u7528\u6237\u4fe1\u606f\u5b58\u5230\u7f13\u5b58\u4e2d\u5c31OK\u4e86\n\n2. > \u4e0d\u5b58\u5728\uff0c\u5c31\u8fdb\u884c\u6ce8\u518c\u64cd\u4f5c\uff0c\u521b\u5efa\u65b0\u7528\u6237\uff0c\u5c06\u65b0\u7528\u6237\u4fe1\u606f\u5b58\u50a8\u5230\u6570\u636e\u5e93\u548credis\u4e2d\n\n> \u6574\u4e2a\u903b\u8f91\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837 \u4fee\u6539login\u65b9\u6cd5\n\n\u5b9a\u4e49\u5e38\u91cf  \n\n```java\n    public static final String LOGIN_USER_KEY = \"login:token:\";\n     public static final Long LOGIN_USER_TTL = 30L;\n```\n\n### 1\uff09service\u5c42\u5b9e\u73b0\n\n```dart\n    @Override\n     public UserDTO Login(LoginFormDTO loginFormDTO, HttpSession session){\n         //\u9996\u5148\u6821\u9a8c\u624b\u673a\u53f7\u548c\u9a8c\u8bc1\u7801\u662f\u5426\u5408\u6cd5\n         String phone = loginFormDTO.getPhone();\n         if(!RegexUtils.isPhoneInvalid(phone)){\n             return null;\n         }\n         Set<Object> cacheKey = stringRedisTemplate.opsForHash()\n             .keys(LOGIN_USER_KEY + phone);\n         //\u57fa\u4e8etoken\u83b7\u53d6redis\u4e2d\u7684\u7528\u6237\n         String tokenkey=LOGIN_USER_KEY + phone;\n         if (cacheKey ==null||!cacheKey.contains(tokenkey)) {\n             //\u6821\u9a8c\u9a8c\u8bc1\u7801\n             //Object cachecode = session.getAttribute(\"code\");\n             String cachecode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);\n \n             String dtoCode = loginFormDTO.getCode();\n             if (dtoCode==null||!dtoCode.equals(cachecode)) {\n                 return null;\n             }\n             //\u6839\u636e\u624b\u673a\u53f7\u67e5\u8be2\u7528\u6237\u4fe1\u606f\n             QueryWrapper<User> queryWrapper=new QueryWrapper<User>();\n             queryWrapper.eq(\"phone\", phone);\n             //\u6839\u636e\u67e5\u8be2\u6761\u4ef6\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u7528\u6237\n             User user = userMapper.selectOne(queryWrapper);\n             if (user==null) {\n                 //\u521b\u5efa\u7528\u6237\n                 user=CreateUser(phone);\n             }\n             //\u8131\u654f\n \n             //\u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5230redis\u4e2d\n             /**\n              * \u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5230redis\u4e2d\n              * 1)\u968f\u673a\u751f\u6210token\u4f5c\u4e3a\u767b\u9646\u4ee4\u724c\n              * 2)\u5c06user\u5bf9\u8c61\u8f6c\u4e3ahash\u5b58\u50a8\n              * 3)\u5b58\u50a8\n              */\n \n             //\u5c06user\u5bf9\u8c61\u8f6c\u4e3ahash\u5b58\u50a8\n             /**\n              * copyProperties:\u5c5e\u6027\u62f7\u8d1d\u2014\u2014\u628auser\u4e2d\u7684\u5c5e\u6027\u5b57\u52a8\u62f7\u8d1d\u5230UserDTO\u4e2d\n              * BeanUtils:\u4f7f\u7528\u7684\u662f\u5305cn.hutool.core.bean\u4e0b\u7684\u5de5\u5177\u7c7b\n              */\n             UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);\n             if (userDTO==null) {\n                 return null;\n             }else {\n                 Map<String, Object> userMap = BeanUtil.beanToMap(userDTO,new HashMap<>(),\n                         CopyOptions.create()\n                                 .setIgnoreNullValue(true)\n                                 .setFieldValueEditor((fieldName,fieldValue)->fieldValue.toString()));\n                 //\u5b58\u50a8redis\u4e2d\n                 //String tokenkey = LOGIN_USER_KEY + loginFormDTO.getPhone();\n                 stringRedisTemplate.opsForHash().putAll(tokenkey,userMap);\n                 //\u8bbe\u7f6etoken\u6709\u6548\u671f\u2014\u2014\u534a\u4e2a\u5c0f\u65f6\n                 stringRedisTemplate.expire(tokenkey,LOGIN_USER_TTL, TimeUnit.MINUTES);\n             }\n \n             return userDTO;\n         }\n \n         Map<Object, Object> userMap = stringRedisTemplate.opsForHash().entries(tokenkey);\n         //\u5c06\u67e5\u8be2\u5230\u7684hash\u6570\u636e\u8f6c\u4e3auserDTO\u5bf9\u8c61\n         UserDTO cacheuser = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\n         return cacheuser;\n     }\n```\n\n\u4ee3\u7801\u89e3\u6790\uff1a\n\n**\u6211\u7684\u7528\u6237\u4fe1\u606f\u662f\u4ee5map\u5f62\u5f0f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u83b7\u53d6\u8fd9\u4e2akey,\u9700\u8981\u5148\u83b7\u53d6\u5230\u624b\u673a\u53f7**\n\n```gams\n    Set<Object> cacheKey = stringRedisTemplate.opsForHash()\n             .keys(LOGIN_USER_KEY + phone);\n```\n\n**\u4e3a\u4ec0\u4e48\u662f\u4ee5\u624b\u673a\u53f7\u7684\u4fe1\u606f\u4f5c\u4e3akey\u800c\u4e0d\u662f\u968f\u673a\u7684token\u5462\uff1f** \u56e0\u4e3atoken\u6211\u4e0d\u77e5\u9053\u600e\u4e48\u5f04\uff1f\ud83d\ude02\ud83d\ude02\ud83d\ude02\uff0c \u539f\u672c\u662f\u4ee5UUID\u4f5c\u4e3a\u4ee4\u724c\u5b58\u50a8\u7528\u6237\u4fe1\u606f\u5230redis\n\n```reasonml\n    String token = UUID.randomUUID().toString(true);\n```\n\n\u4f46\u9047\u5230\u4e00\u4e9b\u95ee\u9898\n\n> \u8fd9\u4e2a\u6807\u8bc6\u662f\u968f\u673a\u751f\u6210\u7684\uff0c\u610f\u5473\u7740\u8fd9\u91cc\u53ea\u8981\u662f\u5b58\u5728\u7528\u6237\u4fe1\u606f\uff0c\u7f13\u5b58\u4e2d\u7684token\u662f\u552f\u4e00\u7684\n>\n> \u4f46\u662f\u5982\u679c\u6211\u8981\u518d\u6b21\u767b\u5f55\uff0c\u5b83\u8981\u4e0eredis\u4e2d\u7684token\u8fdb\u884c\u6bd4\u5bf9\uff0c\u800c\u56e0\u4e3a\u6211\u7684token\u4e5f\u662f\u968f\u673a\u7684\uff0c\u90a3\u4e48\u4e24\u4e2atoken\u5fc5\u5b9a\u4f1a\u4e0d\u540c\uff0c\u8fd9\u65f6\u5019\u82e5\u662f\u6210\u529f\u5b58\u50a8\uff0c\u90a3\u4e48\u7f13\u5b58\u4e2d\u5c31\u4f1a\u5b58\u5728\u4e24\u4e2akey\uff0c\u800c\u8fd9\u4e24\u4e2akey\u6240\u5b58\u50a8\u7684\u4fe1\u606f\u53c8\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u5c31\u4e0d\u884c\u4e86\n>\n> \u6211\u8bd5\u4e86\u5f88\u4e45\uff0c\u4f46\u8fd8\u662f\u5931\u8d25\uff0c\u6700\u540e\u9000\u4e00\u6b65\uff0c\u8fd8\u662f\u4ee5\u624b\u673a\u53f7\u4f5c\u4e3akey\u7684\u7528\u6237\u4fe1\u606f\u8868\u793a\n\n\u53ef\u4ee5\u8f7b\u6613\u83b7\u53d6\uff0c\u4e5f\u66f4\u5bb9\u6613\u533a\u5206\u7528\u6237\uff0c\u7f3a\u70b9\uff1a\u4fe1\u606f\u6cc4\u9732\n\n\u6839\u636etokenkey\u4ee5entries\u65b9\u6cd5\u83b7\u53d6\u5230\u7528\u6237\u4fe1\u606f\uff0c\u5e76\u5c06\u8fd9\u4e2a\u4ee5map\u5f62\u5f0f\u5b58\u50a8\u7684\u7528\u6237\u4fe1\u606f\u8f6c\u6210java\u5bf9\u8c61\uff0c\u4f7f\u7528fillBeanWithMap\u65b9\u6cd5  \n\n```coffeescript\n    Map<Object, Object> userMap = stringRedisTemplate.opsForHash().entries(tokenkey);\n```\n\n//5\u3001\u5c06\u67e5\u8be2\u5230\u7684hash\u6570\u636e\u8f6c\u4e3auserDTO\u5bf9\u8c61\n\n```reasonml\n    UserDTO cacheuser = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\n```\n\n\u8bbe\u7f6etoken\u65f6\u95f4\uff1a\u5982\u679c\u65f6\u95f4\u8d85\u8fc7\u4e8630\u5206\u949f\uff0credis\u5c31\u4f1a\u628a\u4f60\u7684\u767b\u5f55\u5254\u9664\n\n\u8bbe\u7f6eRedis\u4e2dtoken\u7684\u6709\u6548\u671f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528Redis\u7684EXPIRE\u547d\u4ee4\n\n //\u8bbe\u7f6etoken\u6709\u6548\u671f\u2014\u2014\u534a\u4e2a\u5c0f\u65f6  \n\n```angelscript\n    stringRedisTemplate.expire\n     (tokenkey,LOGIN_USER_TTL, TimeUnit.MINUTES);\n```\n\n\u5c06tokenKey\u548c\u7528\u6237\u4fe1\u606f\u4ee5map\u96c6\u5408\u5f62\u5f0f\u5b58\u50a8redis\u4e2d  \n\n```reasonml\n    stringRedisTemplate.opsForHash().putAll(tokenkey,userMap);\n```\n\n- opsForHash() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a HashOperations \u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b\u4e86\u5bf9 Redis \u54c8\u5e0c\u8868\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u65b9\u6cd5\u3002\n- putAll() \u65b9\u6cd5\u7528\u4e8e\u5c06\u4e00\u4e2a Map \u4e2d\u7684\u6240\u6709\u952e\u503c\u5bf9\u5b58\u50a8\u5230 Redis \u7684\u54c8\u5e0c\u8868\u4e2d\u3002\u5728\u8fd9\u91cc\uff0c\u5b83\u5c06\u6574\u4e2a userMap \u5b58\u50a8\u5230 Redis \u4e2d\uff0c\u5176\u4e2d\u7684\u952e\u662f tokenkey\u3002\n\n### 2\uff09\u521b\u5efa\u7528\u6237\n\n\u8fd9\u91cc\u8fd8\u8981\u6ce8\u610f\uff1a\n\n\u521b\u5efa\u7528\u6237\u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7684\u4e09\u4e2a\u4fe1\u606f\u5b57\u6bb5\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519\n\n```reasonml\n    private User CreateUser(String phone) {\n         User user = new User();\n         user.setPhone(phone);\n         user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(10));\n         user.setIcon(LOGON_USER_ICON);\n         //\u4fdd\u5b58\u7528\u6237\n         save(user);\n         return user;\n     }\n```\n\n\u56e0\u4e3a\u4e0d\u77e5\u9053\u600e\u4e48\u83b7\u53d6\u968f\u673a\u5934\u50cf\uff0c\u6240\u4ee5\u8fd9\u91cc\u641e\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5934\u50cf\n\n### 3\uff09redis\u5e38\u91cf\u7c7b\n\n```java\n    public class RedisContants {\n     public static final String LOGIN_CODE_KEY = \"login:code:\";\n     //\u9a8c\u8bc1\u7801\u4fdd\u5b58\u65f6\u95f42\u5206\u949f\n     public static final Long LOGIN_CODE_TTL = 2L;\n     public static final String LOGIN_USER_KEY = \"login:token:\";\n     //token\u4fdd\u5b58\u65f6\u95f430\u5206\u949f\n     public static final Long LOGIN_USER_TTL = 30L;\n \n     public static final String USER_NICK_NAME_PREFIX = \"user_\";\n \n     public static final String LOGON_USER_ICON=\"https://www.kdy.icu/images/touxiang.jpg\";\n \n }\n```\n\n### 4\uff09Controller\u5c42\n\n\u6ce8\u89e3\u2018@NoRestFulApi\u53ef\u4ee5\u89e3\u9664\u90a3\u4e2a\u4f9d\u8d56\u7684\u5c01\u88c5\uff0c\u4f7f\u7528\u6211\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u5904\u7406\u7c7bResult\n\n```kotlin\n    @PostMapping(\"/login\")\n     @NoRestFulApi\n     public Result login(LoginFormDTO loginFormDTO, HttpSession session) {\n         //1\u3001\u9996\u5148\u6821\u9a8c\u624b\u673a\u53f7\u548c\u9a8c\u8bc1\u7801\u662f\u5426\u5408\u6cd5\n         String phone = loginFormDTO.getPhone();\n         if(!RegexUtils.isPhoneInvalid(phone)){\n             return Result.fail(\"\u624b\u673a\u53f7\u683c\u5f0f\u5f02\u5e38\uff01\");\n         }\n         //2\u3001\u6821\u9a8c\u9a8c\u8bc1\u7801\n         //Object cachecode = session.getAttribute(\"code\");\n         String cachecode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);\n \n         String dtoCode = loginFormDTO.getCode();\n         if (dtoCode==null||!dtoCode.equals(cachecode)) {\n             return Result.fail(\"\u9a8c\u8bc1\u7801\u4e0d\u6b63\u786e\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");\n         }\n         UserDTO login = userService.Login(loginFormDTO, session);\n         if (login==null) {\n             return Result.fail(\"\u7528\u6237\u4fe1\u606f\u4e0d\u5b58\u5728\uff01\");\n         }\n         return Result.ok(login);\n     }\n```\n\n## 3\u3001\u6d4b\u8bd5\n\n\u6211\u65b0\u5efa\u4e00\u4e2a\u7528\u6237\n\n![](https://pic.yupi.icu/5563/202311230843181.png)\n\n\u53ef\u4ee5\u770b\u5230\u7528\u6237\u521b\u5efa\u6210\u529f\uff0c\u5e76\u4e14\u5728redis\u4e2d\u4e5f\u5b58\u50a8\u4e86\u7528\u6237\u4fe1\u606f\n\n![](https://pic.yupi.icu/5563/202311230843756.png) \u4e0b\u9762\u6211\u518d\u6b21\u53d1\u9001\u9a8c\u8bc1\u7801\uff0c\u89c2\u5bdf\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u7528\u6237\u4fe1\u606f\u91cd\u590d\n\n![](https://pic.yupi.icu/5563/202311230843104.png)\n\n\u53ef\u4ee5\u770b\u5230\u7528\u6237\u4fe1\u606f\u5e76\u672a\u91cd\u590d\n\n![](https://pic.yupi.icu/5563/202311230843155.png)\n\n\u57fa\u4e8eredis\u7684\u77ed\u4fe1\u767b\u5f55\u5c31\u6b64\u7ed3\u675f\uff01\uff01\n\n\u8bf4\u8bf4\u6211\u9047\u5230\u7684\u95ee\u9898\uff1a\n\n- \u903b\u8f91\u4e0d\u6e05\u6670\u5c31\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u7136\u540e\u4e0d\u65ad\u7684\u62a5\u9519\uff0c\u4e0d\u65ad\u7684debug\uff0c\u6700\u540e\u53d1\u73b0\u903b\u8f91\u6709\u95ee\u9898\uff0c\u91cd\u65b0\u601d\u8003\u903b\u8f91\u3002\n- \u88ab\u5bf9\u65b9\u7684\u601d\u8def\u5e26\u504f\u3002\u91cd\u6784\u590d\u76d8\u7684\u76ee\u7684\u662f\u7406\u89e3\uff0c\u5f62\u6210\u81ea\u5df1\u7684\u4e00\u5957\u903b\u8f91\uff0c\u800c\u4e0d\u662f\u88ab\u522b\u4eba\u7275\u7740\u9f3b\u5b50\u8d70\u3002\u540c\u4e00\u4e2a\u529f\u80fd\u53ef\u4ee5\u5b9e\u73b0\u7684\u65b9\u6cd5\u4e0d\u6b62\u4e00\u79cd\uff0c\u800c\u81ea\u5df1\u601d\u8003\u51fa\u6765\u7684\uff0c\u81f3\u5c11\u7406\u89e3\u66f4\u900f\u5f7b\u3002\n- redis\u57fa\u7840\u4e0d\u7262\u56fa\uff0c\u5728 \u83b7\u53d6Key\u503c\u548cuser\u5bf9\u8c61\u5b58\u50a8\u8f93\u51fa\u8fd9\u91cc\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u529f\u80fd\u662f\u9ed1\u9a6c\u70b9\u8bc4\u4e2d\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u800c\u8fd9\u4e2a\u529f\u80fd\u53c8\u548c\u5176\u4ed6\u7684\u5730\u65b9\u6709\u4e00\u4e9b\u8054\u7cfb\uff0c\u5176\u4e2d\u6d89\u53ca\u5230\u5176\u4ed6\u7684\u4e00\u4e9b\u77e5\u8bc6\uff0c\u6211\u8fd8\u4e0d\u662f\u7279\u522b\u6e05\u695a\u3002\u6bd4\u5982\u8bf4\u767b\u5f55\u62e6\u622a\u5668\uff0c\u6211\u8fd9\u91cc\u5c31\u6ca1\u6709\u7528\u5230\u3002\u4e3a\u4ec0\u4e48\u6211\u4e0d\u7528\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5b83\u7684\u601d\u8def\u6211\u5e76\u4e0d\u662f\u7279\u522b\u7406\u89e3\uff0c\n\n\u7167\u642c\u7684\u8bdd\uff0c\u5c31\u4e0d\u7b26\u5408\u6211\u81ea\u5df1\u601d\u8003\u7684\u8fd9\u4e2a\u521d\u8877\uff0c\u5fc5\u987b\u5f97\u662f\u81ea\u5df1\u7684\u4e1c\u897f\uff01\u800c\u4e0d\u662f\u4ece\u522b\u4eba\u90a3\u91cc\u590d\u5236\u6765\u7684\u53c8\u4e0d\u61c2\u4ec0\u4e48\u610f\u601d\u7684\u4ee3\u7801\u3002\n\n\u6240\u4ee5\u4ee5\u6211\u81ea\u5df1\u7684\u601d\u8def\uff0c\u6211\u5c06\u57fa\u4e8eRedis\u7528\u6237\u77ed\u4fe1\u767b\u5f55\u7684\u6574\u4e2a\u6d41\u7a0b\u8fdb\u884c\u4e86\u5256\u6790\u3002"}