{"data": "# \u51fd\u6570\u5f0f\u63a5\u53e3\u7684\u4f7f\u7528\n\n> \u4f5c\u8005\uff1a[\u806a\u03b6](https://wx.zsxq.com/dweb2/index/footprint/185558512888212)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 12852\n\n\u4ecb\u7ecd Consumer\u3001Supplier\u3001Predicate\u4e0eFunction \u63a5\u53e3\u7684\u4f7f\u7528\n\n## Consumer \u7684\u4f7f\u7528\uff08\u987e\u5ba2\uff09\n\nConsumer \u7ffb\u8bd1\u8fc7\u6765\u7684\u610f\u601d\u5c31\u662f\u6d88\u8d39\u8005\uff0c\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u53ea\u8d1f\u8d23\u6d88\u8d39\u7684\u63a5\u53e3\u3002\u76f8\u5f53\u4e8e\u4f60\u662f\u4e00\u4e2a\u9910\u9986\u7684\u987e\u5ba2\uff0c\u4f60\u53ea\u8d1f\u8d23\u5403\u4f60\u70b9\u7684\u98df\u7269\u3002\n\n\u5728\u9879\u76ee\u4e2d\u4e00\u4e9b\u4e0d\u9700\u8981\u8fd4\u56de\u503c\uff0c\u53ea\u8d1f\u8d23\u6d88\u8d39\u7684\u65b9\u6cd5\u53ef\u4ee5\u7528\u8fc7 Consumer \u63a5\u53e3\u6765\u5b9e\u73b0\u3002\n\n### \u793a\u4f8b\u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e00\u4e2a\u987e\u5ba2\uff08Consumer\uff09\uff0c\u7528\u4e8e\u6d88\u8d39\u98df\u7269\nConsumer<String> customer = food -> System.out.println(\"\u5403\u6389\u4e86\uff1a\" + food);\n\n// \u53a8\u5e08\u51c6\u5907\u4e86\u4e00\u4efd\u7f8e\u98df\nString food = \"\u7f8e\u5473\u725b\u6392\";\n\n// \u987e\u5ba2\u5403\u6389\u53a8\u5e08\u51c6\u5907\u7684\u98df\u7269\ncustomer.accept(food);\n```\n\n### Sa-Token \u6e90\u7801\u4e2d\u7684\u4f7f\u7528\n\n\u5b9a\u4e49\u51fd\u6570\u5f0f\u63a5\u53e3\uff1a\n\n```java\n/**\n * \u51fd\u6570\u5f0f\u63a5\u53e3\uff1a\u5bf9\u4e00\u4e2a [Method] \u5bf9\u8c61\u8fdb\u884c\u6ce8\u89e3\u6821\u9a8c \uff08\u6ce8\u89e3\u9274\u6743\u5185\u90e8\u5b9e\u73b0\uff09\n *\n * <p>  \u53c2\u6570\uff1aMethod\u53e5\u67c4  </p>\n * <p>  \u8fd4\u56de\uff1a\u65e0  </p>\n *\n * @author click33\n * @since 1.35.0\n */\n@FunctionalInterface\npublic interface SaCheckMethodAnnotationFunction extends Consumer<Method> {\n\n}\n```\n\n\u5177\u4f53\u5b9e\u73b0\uff1a\n\n```java\n/**\n * \u5bf9\u4e00\u4e2a [Method] \u5bf9\u8c61\u8fdb\u884c\u6ce8\u89e3\u6821\u9a8c \uff08\u6ce8\u89e3\u9274\u6743\u5185\u90e8\u5b9e\u73b0\uff09\n */\npublic SaCheckMethodAnnotationFunction checkMethodAnnotation = (method) -> {\n\n    // \u5148\u6821\u9a8c Method \u6240\u5c5e Class \u4e0a\u7684\u6ce8\u89e3\n    instance.checkElementAnnotation.accept(method.getDeclaringClass());\n\n    // \u518d\u6821\u9a8c Method \u4e0a\u7684\u6ce8\u89e3\n    instance.checkElementAnnotation.accept(method);\n};\n```\n\n### \u6e90\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n@FunctionalInterface\npublic interface Consumer<T> {\n    void accept(T var1);\n\n    default Consumer<T> andThen(Consumer<? super T> after) {\n        Objects.requireNonNull(after);\n        return (t) -> {\n            this.accept(t);\n            after.accept(t);\n        };\n    }\n}\n```\n\n\u4ece\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0cConsumer\u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u6536\u6cdb\u578b\u7684 `accept`\u65b9\u6cd5\uff0c\u8fd4\u56de\u503c\u4e3a void\u3002\n\n### \u4f7f\u7528\u4f8b\u5b50\n\n#### \u6570\u636e\u7684\u6253\u5370\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n//\u7531 Consumer<String> printConsumer = (s) -> System.out.println(s); \u7b80\u5316\nConsumer<String> printConsumer = System.out::println;\nprintConsumer.accept(\"\u6211\u662f\u806a\u554a\");\n```\n\n#### \u6570\u636e\u6821\u9a8c\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\nConsumer<String> printConsumer = (s) -> {\n    //\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u542b\u6709 cong\n    if (s.contains(\"cong\")) {\n        System.out.println(\"\u5b57\u7b26\u4e32\u542b\u6709 cong\");\n    } else {\n        System.out.println(\"\u5b57\u7b26\u4e32\u4e0d\u542b\u6709 cong\");\n        throw new RuntimeException(\"\u5b57\u7b26\u4e32\u4e0d\u542b cong \u554a\");\n    }\n};\nprintConsumer.accept(\"\u6211\u662fcong\");\nprintConsumer.accept(\"\u6211\u4e0d\u662fc1ong\");\n```\n\n## Supplier \u7684\u4f7f\u7528\uff08\u53a8\u5e08\uff09\n\nSupplier \u597d\u6bd4\u4e00\u540d\u53a8\u5e08\uff0c\u5b83\u53ea\u8d1f\u8d23\u751f\u4ea7\u51fa\u7f8e\u5473\u7684\u98df\u7269\uff0c\u4ece\u6765\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u662f\u5426\u6700\u7ec8\u7684\u6d41\u5411\u54ea\u4f4d\u987e\u5ba2\u98df\u7528\u3002\n\n### \u793a\u4f8b\u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e00\u4e2a\u53a8\u5e08\uff08Supplier\uff09\uff0c\u7528\u4e8e\u4f9b\u5e94\u98df\u7269\nSupplier<String> chef = () -> \"\u7f8e\u5473\u725b\u6392\";\n\n// \u53a8\u5e08\u63d0\u4f9b\u98df\u7269\nString food = chef.get();\nSystem.out.println(\"\u53a8\u5e08\u51c6\u5907\u4e86\uff1a\" + food);\n```\n\n### Sa-Token \u6e90\u7801\u4e2d\u7684\u4f7f\u7528\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n/**\n * OAuth-Server\u7aef\uff1a\u672a\u767b\u5f55\u65f6\u8fd4\u56de\u7684View \n */\npublic Supplier<Object> notLoginView = () -> \"\u5f53\u524d\u4f1a\u8bdd\u5728OAuth-Server\u8ba4\u8bc1\u4e2d\u5fc3\u5c1a\u672a\u767b\u5f55\";\n```\n\n### \u6e90\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n@FunctionalInterface\npublic interface Supplier<T> {\n    T get();\n}\n```\n\n\u4ee3\u7801\u5341\u5206\u7b80\u5355\uff0c\u4e3b\u8981\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fd4\u56de\u6cdb\u578b\u548c\u63a5\u6536\u6cdb\u578b\u7684 `get` \u65b9\u6cd5\n\n### \u4f7f\u7528\u4f8b\u5b50\n\n#### \u751f\u6210\u968f\u673a ID\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n//\u751f\u6210 uuid \u7531 Supplier<String> demoSupplier = () -> { return IdUtil.simpleUUID(); }; \u7b80\u5316\nSupplier<String> demoSupplier = IdUtil::simpleUUID;\ndemoSupplier.get();\n```\n\n#### \u751f\u6210\u5bf9\u8c61\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u4f7f\u7528Supplier\u751f\u6210Person\u5bf9\u8c61\nSupplier<Person> personSupplier = () -> new Person(\"Alice\");\n\n// \u83b7\u53d6\u751f\u6210\u7684Person\u5bf9\u8c61\nPerson person = personSupplier.get();\nSystem.out.println(\"Person's name: \" + person.getName());\npersonSupplier.get();\n```\n\n## Function \u7684\u4f7f\u7528\uff08\u670d\u52a1\u5458\uff09\n\n\u5728\u9910\u5385\u91cc\uff0c\u670d\u52a1\u5458\uff08Function\uff09\u8d1f\u8d23\u5c06\u53a8\u5e08\u63d0\u4f9b\u7684\u98df\u7269\u9001\u5230\u987e\u5ba2\u624b\u4e2d\uff0c\u670d\u52a1\u5458\u6839\u636e\u987e\u5ba2\u7684\u9700\u6c42\u5c06\u98df\u7269\u8fdb\u884c\u52a0\u5de5\u6216\u5904\u7406\uff08\u4f8b\u5982\u52a0\u8c03\u6599\u3001\u5207\u6210\u5c0f\u5757\u7b49\uff09\u3002\n\n\u5728 Java \u4e2d\uff0cFunction<T, R> \u8868\u793a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u6536\u4e00\u4e2a\u8f93\u5165\uff08\u98df\u7269\uff09\u5e76\u8fd4\u56de\u4e00\u4e2a\u8f93\u51fa\uff08\u5904\u7406\u540e\u7684\u98df\u7269\uff09\u3002\n\n### \u793a\u4f8b\u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e00\u4e2a\u670d\u52a1\u5458\uff08Function\uff09\uff0c\u7528\u4e8e\u52a0\u5de5\u98df\u7269\nFunction<String, String> waiter = food -> \"\u52a0\u5de5\u540e\u7684\" + food;\n\n// \u53a8\u5e08\u63d0\u4f9b\u98df\u7269\nSupplier<String> chef = () -> \"\u7f8e\u5473\u725b\u6392\";\nString food = chef.get();\n\n// \u670d\u52a1\u5458\u52a0\u5de5\u98df\u7269\u540e\u9001\u5230\u987e\u5ba2\u624b\u4e2d\nString processedFood = waiter.apply(food);\nSystem.out.println(\"\u670d\u52a1\u5458\u9001\u6765\u4e86\uff1a\" + processedFood);\n```\n\n### Sa-Token \u6e90\u7801\u4e2d\u7684\u4f7f\u7528\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n/**\n * \u51fd\u6570\u5f0f\u63a5\u53e3\uff1a\u521b\u5efa SaSession \u7684\u7b56\u7565\n *\n * <p>  \u53c2\u6570\uff1aSessionId  </p>\n * <p>  \u8fd4\u56de\uff1aSaSession\u5bf9\u8c61  </p>\n *\n * @author click33\n * @since 1.35.0\n */\n@FunctionalInterface\npublic interface SaCreateSessionFunction extends Function<String, SaSession> {\n\n}\n```\n\n### \u6e90\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n@FunctionalInterface\npublic interface Function<T, R> {\n    R apply(T var1);\n\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (v) -> {\n            return this.apply(before.apply(v));\n        };\n    }\n\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (t) -> {\n            return after.apply(this.apply(t));\n        };\n    }\n\n    static <T> Function<T, T> identity() {\n        return (t) -> {\n            return t;\n        };\n    }\n}\n```\n\nFunction<T, R> \u662f\u4e00\u4e2a\u51fd\u6570\u578b\u63a5\u53e3\uff0c\u4ee3\u8868\u63a5\u53d7\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\uff08\u7c7b\u578b\u4e3aT\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\uff08\u7c7b\u578b\u4e3aR\uff09\u7684\u64cd\u4f5c\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a `apply` \u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u8f6c\u6362\u6216\u8ba1\u7b97\u3002\n\n### \u4f7f\u7528\u4f8b\u5b50\n\n#### \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\nFunction<String, Integer> stringToInt = str -> Integer.parseInt(str);\n\n// \u4f7f\u7528\u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\nString numberStr = \"123\";\nInteger number = stringToInt.apply(numberStr);\n\nSystem.out.println(\"Converted integer: \" + number);\n```\n\n#### \u51fd\u6570\u7ec4\u5408\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e24\u4e2a\u51fd\u6570\nFunction<String, Integer> strToInt = str -> Integer.parseInt(str);\nFunction<Integer, String> intToStr = num -> \"Number: \" + num;\n\n// \u5c06\u4e24\u4e2a\u51fd\u6570\u8fdb\u884c\u7ec4\u5408\nFunction<String, String> composedFunction = strToInt.andThen(intToStr);\n\n// \u4f7f\u7528\u7ec4\u5408\u51fd\u6570\u8fdb\u884c\u8f6c\u6362\nString numberStr = \"123\";\nString result = composedFunction.apply(numberStr);\n\nSystem.out.println(\"Result: \" + result);\n```\n\n## Predicate \u7684\u4f7f\u7528\uff08\u83dc\u5355\u9009\u62e9\u6807\u51c6\uff09\n\n\u5728\u9910\u5385\u91cc\uff0c\u83dc\u5355\u4e0a\u7684\u6bcf\u9053\u83dc\uff08Predicate\uff09\u90fd\u6709\u81ea\u5df1\u7684\u7279\u70b9\u6216\u6807\u51c6\uff0c\u987e\u5ba2\u53ef\u4ee5\u6839\u636e\u83dc\u5355\u4e0a\u7684\u63cf\u8ff0\uff08Predicate\uff09\u6765\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u98df\u7269\u3002\n\n\u5728 Java \u4e2d\uff0cPredicate \u8868\u793a\u4e00\u4e2a\u65ad\u8a00\uff0c\u7528\u4e8e\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u7b26\u5408\u7279\u5b9a\u7684\u6761\u4ef6\u3002\n\n### \u793a\u4f8b\u4ee3\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u5b9a\u4e49\u4e00\u4e2a\u83dc\u5355\u9009\u62e9\u6807\u51c6\uff08Predicate\uff09\nPredicate<String> isSteak = food -> food.equals(\"\u7f8e\u5473\u725b\u6392\");\n\n// \u53a8\u5e08\u63d0\u4f9b\u98df\u7269\nSupplier<String> chef = () -> \"\u7f8e\u5473\u725b\u6392\";\nString food = chef.get();\n\n// \u5224\u65ad\u98df\u7269\u662f\u5426\u7b26\u5408\u83dc\u5355\u9009\u62e9\u6807\u51c6\nif (isSteak.test(food)) {\n    System.out.println(\"\u987e\u5ba2\u70b9\u4e86\u725b\u6392\uff01\");\n} else {\n    System.out.println(\"\u987e\u5ba2\u9009\u62e9\u4e86\u5176\u4ed6\u98df\u7269\uff01\");\n}\n```\n\n### \u6e90\u7801\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n@FunctionalInterface\npublic interface Predicate<T> {\n    boolean test(T var1);\n\n    default Predicate<T> and(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> {\n            return this.test(t) && other.test(t);\n        };\n    }\n\n    default Predicate<T> negate() {\n        return (t) -> {\n            return !this.test(t);\n        };\n    }\n\n    default Predicate<T> or(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> {\n            return this.test(t) || other.test(t);\n        };\n    }\n\n    static <T> Predicate<T> isEqual(Object targetRef) {\n        return null == targetRef ? Objects::isNull : (object) -> {\n            return targetRef.equals(object);\n        };\n    }\n\n    static <T> Predicate<T> not(Predicate<? super T> target) {\n        Objects.requireNonNull(target);\n        return target.negate();\n    }\n}\n```\n\nPredicate \u662f\u4e00\u4e2a\u65ad\u8a00\u578b\u63a5\u53e3\uff0c\u4ee3\u8868\u4e00\u4e2a\u65ad\u8a00\uff08\u8f93\u5165\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u7684\u5224\u65ad\uff09\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a `test` \u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528\u4e8e\u6267\u884c\u6761\u4ef6\u5224\u65ad\u3002\n\n### \u4f7f\u7528\u793a\u4f8b\n\n#### \u5224\u65ad\u662f\u5426\u662f\u5076\u6570\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n// \u4f7f\u7528 Predicate \u63a5\u53e3\u5224\u65ad\u662f\u5426\u662f\u5076\u6570\nPredicate<Integer> isEven = num -> num % 2 == 0;\nSystem.out.println(\"Is 4 even? \" + isEven.test(4)); // true\nSystem.out.println(\"Is 7 even? \" + isEven.test(7)); // false\n```\n\n#### \u7ec4\u5408\u591a\u4e2a\u65ad\u8a00\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```java\n // \u5b9a\u4e49\u4e24\u4e2a\u65ad\u8a00\nPredicate<Integer> isEven = num -> num % 2 == 0;\nPredicate<Integer> isPositive = num -> num > 0;\n\n// \u4f7f\u7528\u903b\u8f91\u64cd\u4f5c\u7b26\u7ec4\u5408\u65ad\u8a00\nPredicate<Integer> isEvenAndPositive = isEven.and(isPositive);\n\n// \u6d4b\u8bd5\u7ec4\u5408\u65ad\u8a00\nSystem.out.println(\"Is 6 even and positive? \" + isEvenAndPositive.test(6)); // true\nSystem.out.println(\"Is -3 even and positive? \" + isEvenAndPositive.test(-3)); // false\nSystem.out.println(\"Is 9 even and positive? \" + isEvenAndPositive.test(9)); // false\n```"}