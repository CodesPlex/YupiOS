{"data": "# \u9762\u8bd5\u8d85\u9ad8\u9891\u8003\u70b9\uff1aHashMap \u6e90\u7801\u9010\u884c\u89e3\u6790\n\n> \u4f5c\u8005\uff1a[\u6a35\u8c46\u5305\u5b50](https://wx.zsxq.com/dweb2/index/group/51122858222824)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 33181\n\n## \u603b\u89c8\n\nHashMap \u5b9e\u73b0\u4e86 Map \u63a5\u53e3\u3002\u8fd9\u79cd\u5b9e\u73b0\u63d0\u4f9b\u4e86\u5404\u79cd\u6620\u5c04\u64cd\u4f5c\uff0c\u5e76\u5141\u8bb8\u6709\u7a7a\u503c\u548c\u7a7a\u952e\u3002\uff08HashMap\u7c7b\u5927\u81f4\u76f8\u5f53\u4e8eHashtable\uff0c\u53ea\u662f\u5b83\u662f\u975e\u540c\u6b65\u7684\uff0c\u5e76\u4e14\u5141\u8bb8\u6709\u7a7a\u503c\u3002\uff09HashMap \u4e0d\u80fd\u4fdd\u8bc1\u6620\u5c04\u7684\u987a\u5e8f\uff1b\u7279\u522b\u662f\uff0c\u5b83\u4e0d\u4fdd\u8bc1\u987a\u5e8f\u4f1a\u968f\u65f6\u95f4\u4fdd\u6301\u4e0d\u53d8\uff08\u6bd4\u5982\u5728 resize \u65f6\u4f1a\u91cd\u65b0\u8ba1\u7b97 hash\uff0c\u5143\u7d20\u7684\u5b58\u50a8\u4f4d\u7f6e\u4f1a\u6539\u53d8\uff09\u3002\n\nHashMap \u4e3a\u57fa\u672c\u64cd\u4f5c\uff08get\u548cput\uff09\u63d0\u4f9b\u4e86\u5e38\u91cf\u65f6\u95f4\u7684\u6027\u80fd\u3002\u800c\u8fed\u4ee3 HashMap \u9700\u8981\u7684\u65f6\u95f4\u4e0e HashMap \u5b9e\u4f8b\u7684\u201c\u5bb9\u91cf\u201d\uff08\u6876\u7684\u6570\u91cf\uff09\u52a0\u4e0a\u5176\u5927\u5c0f\uff08\u952e\u503c\u5bf9\u7684\u6570\u91cf\uff09\u6210\u6b63\u6bd4\u3002\u56e0\u6b64\u5982\u679c\u8fed\u4ee3\u6027\u80fd\u5f88\u91cd\u8981\uff0c\u5c31\u4e0d\u8981\u5c06\u521d\u59cb\u5bb9\u91cf\u8bbe\u7f6e\u5f97\u592a\u9ad8\uff08\u6216\u8005\u5c06\u8d1f\u8f7d\u56e0\u5b50\u8bbe\u7f6e\u5f97\u592a\u4f4e\uff09\u3002\n\nHashMap \u6709\u4e24\u4e2a\u4e0e\u6027\u80fd\u6709\u5173\u7684\u53c2\u6570\uff1a\u521d\u59cb\u5bb9\u91cf\u548c\u8d1f\u8f7d\u56e0\u5b50\u3002\u521d\u59cb\u5bb9\u91cf\u5c31\u662f\u5728\u521b\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u6876\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u8d1f\u8f7d\u56e0\u5b50\u662f\u5728\u6570\u7ec4\u4e2d\u586b\u5145\u952e\u503c\u5bf9\u7684\u6700\u5927\u7a0b\u5ea6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u7ec4\u88ab\u586b\u5145\u7684\u6700\u5927\u5bc6\u5ea6\u3002\u5f53\u54c8\u5e0c\u8868\u4e2d\u7684\u6761\u76ee\u6570\u91cf\uff08\u952e\u503c\u5bf9\u7684\u6570\u91cf\uff09\u8d85\u8fc7\u8d1f\u8f7d\u56e0\u5b50\u548c\u5f53\u524d\u5bb9\u91cf\u7684\u4e58\u79ef\u65f6\uff0c\u54c8\u5e0c\u8868\u5c06\u8fdb\u884c\u6269\u5bb9\uff0c\u4f7f\u54c8\u5e0c\u8868\u7684\u5bb9\u91cf\u52a0\u500d\uff0c\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\u90fd\u8981\u6839\u636e\u952e\u503c\u91cd\u65b0\u54c8\u5e0c\uff0c\u5e76\u4e14\u8f6c\u79fb\u5230\u65b0\u7684\u4f4d\u7f6e\u4e0a\u3002\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u9ed8\u8ba4\u7684\u8d1f\u8f7d\u56e0\u5b50\uff080.75\uff09\u5728\u65f6\u95f4\u548c\u7a7a\u95f4\u6210\u672c\u4e4b\u95f4\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u6298\u8877\u3002\u66f4\u9ad8\u7684\u503c\u51cf\u5c11\u4e86\u7a7a\u95f4\u5f00\u9500\uff0c\u4f46\u589e\u52a0\u4e86\u67e5\u627e\u6210\u672c\uff08\u53cd\u6620\u5728HashMap\u7c7b\u7684\u5927\u591a\u6570\u64cd\u4f5c\u4e2d\uff0c\u5305\u62ecget\u548cput\uff09\u3002\u5728\u8bbe\u7f6e\u5176\u521d\u59cb\u5bb9\u91cf\u65f6\uff0c\u5e94\u8003\u8651\u6620\u5c04\u4e2d\u9884\u671f\u7684\u952e\u503c\u5bf9\u6570\u91cf\u53ca\u5176\u8d1f\u8f7d\u56e0\u5b50\uff0c\u4ee5\u5c3d\u91cf\u907f\u514d HashMap \u7684\u6269\u5bb9\u64cd\u4f5c\u3002\u5982\u679c\u521d\u59cb\u5bb9\u91cf\u5927\u4e8e\u6761\u76ee\u6570\u91cf\u9664\u4ee5\u8d1f\u8f7d\u56e0\u5b50\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u6269\u5bb9\u64cd\u4f5c\u3002\n\n\u5982\u679c\u591a\u4e2a\u952e\u8fd4\u56de\u76f8\u540c\u7684 hashCode \u503c\uff0c\u5373\u5b83\u4eec\u5728\u54c8\u5e0c\u8868\u7684\u54c8\u5e0c\u51fd\u6570\u4e0b\u4ea7\u751f\u54c8\u5e0c\u51b2\u7a81\uff0c\u8fd9\u5c06\u964d\u4f4e\u54c8\u5e0c\u8868\u7684\u6027\u80fd\u3002\u54c8\u5e0c\u8868\u7684\u6548\u7387\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u5176\u80fd\u591f\u5c06\u5143\u7d20\u5747\u5300\u5206\u5e03\u5728\u4e0d\u540c\u7684\u6876\u4e2d\u3002\u5f53\u591a\u4e2a\u952e\u4ea7\u751f\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u65f6\uff0c\u5b83\u4eec\u4f1a\u88ab\u5b58\u653e\u5728\u540c\u4e00\u4e2a\u6876\u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8be5\u6876\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u8fc7\u591a\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4e3a\u4e86\u7f13\u89e3\u7531\u4e8e\u54c8\u5e0c\u51b2\u7a81\u5bfc\u81f4\u7684\u6027\u80fd\u4e0b\u964d\u95ee\u9898\uff0c\u5f53\u952e\u5b9e\u73b0\u4e86 Comparable \u63a5\u53e3\u65f6\uff08\u5373\u952e\u662f\u53ef\u6bd4\u8f83\u7684\uff09\uff0c\u5982\u679c\u4e24\u4e2a\u952e\u7684\u54c8\u5e0c\u503c\u76f8\u540c\uff0c\u54c8\u5e0c\u8868\u53ef\u4ee5\u901a\u8fc7\u6bd4\u8f83\u5b83\u4eec\u7684\u5927\u5c0f\u987a\u5e8f\u6765\u51b3\u5b9a\u5b83\u4eec\u5728\u6876\u4e2d\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u4ece\u800c\u51cf\u5c11\u51b2\u7a81\u7684\u53ef\u80fd\u6027\uff0c\u63d0\u9ad8\u6027\u80fd\u3002\n\n## \u5173\u952e\u53d8\u91cf\n\n1. `table`\uff1a\u7528\u4e8e\u5b58\u50a8\u952e\u503c\u5bf9\u7684\u6570\u7ec4\uff0c\u662f HashMap \u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u3002\n2. `size`\uff1aHashMap \u4e2d\u5f53\u524d\u5b58\u50a8\u7684\u952e\u503c\u5bf9\u6570\u91cf\u3002\n3. `threshold`\uff1aHashMap \u5728\u8fdb\u884c\u6269\u5bb9\u4e4b\u524d\u7684\u5bb9\u91cf\u9608\u503c\uff0c\u7b49\u4e8e table.length * loadFactor\u3002\n4. `loadFactor`\uff1a\u8d1f\u8f7d\u56e0\u5b50\uff0c\u7528\u4e8e\u63a7\u5236 HashMap \u5728\u4f55\u65f6\u8fdb\u884c\u6269\u5bb9\uff0c\u9ed8\u8ba4\u4e3a 0.75.\n5. `DEFAULT_INITIAL_CAPACITY` = 16\uff1aHashMap \u9ed8\u8ba4\u7684\u521d\u59cb\u5bb9\u91cf\u3002\n6. `MAXIMUM_CAPACITY = 1 << 30`\uff1aHashMap \u4e2d\u5bb9\u91cf\u7684\u6700\u5927\u9650\u5236\u3002\n7. `TREEIFY_THRESHOLD = 8`\uff1a\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u7684\u9608\u503c\uff0c\u5f53\u94fe\u8868\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u65f6\uff0c\u4f1a\u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u3002\n8. `UNTREEIFY_THRESHOLD = 6`\uff1a\u7ea2\u9ed1\u6811\u8f6c\u6362\u4e3a\u94fe\u8868\u7684\u9608\u503c\uff0c\u5f53\u7ea2\u9ed1\u6811\u8282\u70b9\u6570\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u65f6\uff0c\u4f1a\u5c06\u7ea2\u9ed1\u6811\u8f6c\u6362\u4e3a\u94fe\u8868\u3002\n9. `MIN_TREEIFY_CAPACITY = 64`\uff1a\u5f53\u6876\u4e2d\u7684\u8282\u70b9\u6570\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u503c\u65f6\uff0c\u6876\u4e2d\u7684\u94fe\u8868\u5c06\u8f6c\u6362\u4e3a\u7ea2\u9ed1\u6811\u3002\n\n## \u5173\u952e\u5185\u90e8\u7c7b\n\nHashMap \u4e2d\u7684\u8282\u70b9\u7c7b\uff0c\u5b9e\u73b0\u4e86 Map.Entry \u63a5\u53e3\uff0c\u662f\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u5bf9\u8c61\u3002\n\n```java\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash; // \u5b58\u50a8\u952e\u7684\u54c8\u5e0c\u503c\n    final K key; // \u952e\n    V value; // \u503c\n    Node<K,V> next;\n    // \u6210\u5458\u65b9\u6cd5\u7565\n}\n```\n\n## \u5173\u952e\u65b9\u6cd5\n\n## \u6784\u9020\u65b9\u6cd5\n\n```java\n/**\n * \u6784\u9020\u65b9\u6cd5\n * \n * @param initialCapacity \u521d\u59cb\u5bb9\u91cf\n * @param loadFactor \u8d1f\u8f7d\u56e0\u5b50\n */\npublic HashMap(int initialCapacity, float loadFactor) {\n    // \u68c0\u67e5\u53c2\u6570\u5408\u6cd5\u6027\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n    // \u5982\u679c\u521d\u59cb\u5bb9\u91cf\u5927\u4e8e HashMap \u5bb9\u91cf\u7684\u6700\u5927\u9650\u5236\uff0c\u5219\u5c06\u521d\u59cb\u5bb9\u91cf\u8bbe\u4e3a\u6700\u5927\u5bb9\u91cf                                       initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    // \u8fd9\u91cc\u7684\u5b58\u653e\u5230 threshold \u4e2d\u7684\u503c\u5e76\u4e0d\u662f\u5bb9\u91cf\u9608\u503c\n    // \u8fd9\u91cc\u7528 threshold \u4e34\u65f6\u5b58\u50a8\u5bb9\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u5927\u5c0f\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u65f6\u4f7f\u7528\n    // HashMap \u7684\u957f\u5ea6\u662f 2 \u7684\u5e42\uff0c\u901a\u8fc7 tableSizeFor \u65b9\u6cd5\u8ba1\u7b97\u5f97\u5230\n    this.threshold = tableSizeFor(initialCapacity);\n}\n```\n\n## \u6270\u52a8\u51fd\u6570\n\n```java\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n\u4e3a\u4ec0\u4e48\u8981\u7528\u6270\u52a8\u51fd\u6570\uff1f\n\n\u7b54\uff1a\u6270\u52a8\u51fd\u6570\u5c31\u662f\u51cf\u5c11\u78b0\u649e\u95ee\u9898\u3002HashMap \u5728\u8ba1\u7b97\u952e\u503c\u5bf9\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u65f6\uff0c\u4f7f\u7528\u7684\u516c\u5f0f\u662f\n\n```ini\n                                i = (n - 1) & hash\n```\n\n\u901a\u8fc7\u4f7f\u7528\u4f4d\u8fd0\u7b97\u5b9e\u73b0\u4e86\u54c8\u5e0c\u503c\u5230\u6570\u7ec4\u4e0b\u6807\u7684\u6620\u5c04\uff0c\u800c\u4e0d\u662f\u4e00\u822c\u7684\u53d6\u4f59\u3002\u8fd9\u6837\u8ba1\u7b97\u6709\u4e00\u4e2a\u524d\u63d0\uff0c\u5373 n \u662f 2 \u7684\u5e42\uff0c\u56e0\u6b64 \uff08n - 1\uff09\u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u4e0a\u90fd\u662f 1\uff0c\u518d\u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\uff0c\u786e\u4fdd\u5f97\u5230\u7684\u6570\u5168\u90e8\u5c0f\u4e8e n\n\n\u4ee5\u6570\u7ec4\u957f\u5ea6 16 \u4e3a\u4f8b\uff0c\u8ba1\u7b97\u67d0\u4e2a\u54c8\u5e0c\u503c\u4e3a 10101010 \u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\uff1a\n\nn - 1 = 16 - 1 = 15 \u7684 2\u8fdb\u5236\u8868\u793a\u662f 00001111 \u548c 10101010 \u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\u7ed3\u679c\u4e3a 00001010 \u4e5f\u5c31\u662f 10\uff0c\u5b9e\u73b0\u4e86\u54c8\u5e0c\u503c\u5230\u6570\u7ec4\u4e0b\u6807\u7684\u6620\u5c04\u3002\n\n\u4f46\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u622a\u53d6\u4e86\u6700\u4f4e\u7684\u56db\u4f4d\u503c\uff0c\u800c\u820d\u5f03\u4e86\u5176\u4ed6\u4f4d\u4e0a\u7684\u4fe1\u606f\u3002\u8fd9\u6837\u5c31\u7b97\u6563\u5217\u503c\u5206\u5e03\u518d\u677e\u6563\uff0c\u8981\u662f\u53ea\u53d6\u6700\u540e\u51e0\u4f4d\u7684\u8bdd\uff0c\u54c8\u5e0c\u78b0\u649e\u4e5f\u4f1a\u5f88\u4e25\u91cd\u3002\u5982\u679c\u6563\u5217\u672c\u8eab\u505a\u5f97\u4e0d\u597d\uff0c\u5206\u5e03\u4e0a\u6210\u7b49\u5dee\u6570\u5217\u7684\u6f0f\u6d1e\uff0c\u6070\u597d\u4f7f\u6700\u540e\u51e0\u4e2a\u4f4e\u4f4d\u5448\u73b0\u89c4\u5f8b\u6027\u91cd\u590d\uff0c\u5219\u78b0\u649e\u4f1a\u66f4\u4e25\u91cd\u3002\u56e0\u6b64\u4f7f\u7528\u6270\u52a8\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6270\u52a8\u51fd\u6570\u4e3b\u8981\u5305\u62ec\u4e09\u6b65\uff1a\n\n1. \u4f7f\u7528 key.hashCode() \u8ba1\u7b97\u952e\u503c\u7684\u54c8\u5e0c\u503c\u5e76\u8d4b\u503c\u7ed9\u53d8\u91cf h\n2. \u5c06 h \u5411\u65e0\u7b26\u53f7\u53f3\u79fb 16 \u4f4d\n3. \u5c06\u53d8\u91cf h \u548c\u5411\u53f3\u79fb16\u4f4d\u7684 h \u505a\u5f02\u6216\u8fd0\u7b97\n\n\u8fd9\u6837\u53f3\u79fb 16 \u4f4d\u6b63\u597d\u4e3a 32bit \u7684\u4e00\u534a\uff0c\u4e5f\u5c31\u662f\u81ea\u5df1\u7684\u9ad8\u534a\u533a\u548c\u4f4e\u534a\u533a\u505a\u5f02\u6216\uff0c\u4ece\u800c\u6df7\u5408\u539f\u59cb\u54c8\u5e0c\u7684\u9ad8\u4f4d\u548c\u4f4e\u4f4d\uff0c\u6765\u52a0\u5927\u4f4e\u4f4d\u7684\u968f\u673a\u6027\u3002\u800c\u4e14\u6df7\u5408\u540e\u7684\u4f4e\u4f4d\u63ba\u6742\u4e86\u9ad8\u4f4d\u7684\u90e8\u5206\u7279\u5f81\uff0c\u4f7f\u9ad8\u4f4d\u7684\u4fe1\u606f\u4e5f\u88ab\u4fdd\u7559\u4e0b\u6765\u3002\n\n## resize \u6269\u5bb9\n\n```java\n/**\n * \u5bf9\u54c8\u5e0c\u8868\u8fdb\u884c\u6269\u5bb9\u6216\u521d\u59cb\u5316\u64cd\u4f5c\u3002\n * \u6269\u5bb9\u65f6\uff0c\u4f1a\u5c06\u539f\u6709\u7684\u952e\u503c\u5bf9\u91cd\u65b0\u5206\u914d\u5230\u65b0\u7684\u6570\u7ec4\u4e2d\uff0c\u5e76\u66f4\u65b0\u5bb9\u91cf\u9608\u503c\u3002\n *\n * @return \u6269\u5bb9\u6216\u521d\u59cb\u5316\u540e\u7684\u65b0\u6570\u7ec4\n */\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table; // \u539f\u54c8\u5e0c\u8868\u6570\u7ec4\n    int oldCap = (oldTab == null) ? 0 : oldTab.length; // \u539f\u6570\u7ec4\u5bb9\u91cf\n    int oldThr = threshold; // \u539f\u5bb9\u91cf\u9608\u503c\n    int newCap, newThr = 0; // \u65b0\u6570\u7ec4\u5bb9\u91cf\u3001\u65b0\u5bb9\u91cf\u9608\u503c\n\n    // \u5904\u7406\u6570\u7ec4\u5df2\u7ecf\u521d\u59cb\u5316\u597d\u7684\u60c5\u51b5\n    // \u5982\u679c\u539f\u6570\u7ec4\u5bb9\u91cf\u5927\u4e8e 0\n    if (oldCap > 0) {\n        // \u5982\u679c\u539f\u6570\u7ec4\u5bb9\u91cf\u5df2\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u4e0a\u9650\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE; // \u5c06\u5bb9\u91cf\u9608\u503c\u8bbe\u7f6e\u4e3a\u6700\u5927\u503c\n            return oldTab; // \u8fd4\u56de\u539f\u6570\u7ec4\n        }\n        // \u5982\u679c\u6269\u5bb9\u540e\u6ca1\u8d85\u8fc7\u6700\u5927\u5bb9\u91cf\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // \u6269\u5145\u5bb9\u91cf\u9608\u503c\u4e3a\u539f\u6765\u7684\u4e24\u500d\n    }\n    // \u5904\u7406\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u6570\u7ec4\u7684\u60c5\u51b5\n    // \u5982\u679c\u539f\u6570\u7ec4\u5bb9\u91cf\u4e3a 0\uff0c\u4f46\u521d\u59cb\u5bb9\u91cf\u9608\u503c\u5927\u4e8e 0\n    else if (oldThr > 0)\n        newCap = oldThr; // \u4f7f\u7528\u4e86\u6267\u884c\u6784\u9020\u65b9\u6cd5\u65f6\u5728 threshold \u4e2d\u6682\u5b58\u7684\u5bb9\u91cf\n    else { // \u5982\u679c\u65e2\u6ca1\u6709\u539f\u6570\u7ec4\u4e5f\u6ca1\u6709\u521d\u59cb\u5bb9\u91cf\u9608\u503c\n        newCap = DEFAULT_INITIAL_CAPACITY; // \u65b0\u5bb9\u91cf\u8bbe\u4e3a\u9ed8\u8ba4\u521d\u59cb\u5bb9\u91cf\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); // \u8ba1\u7b97\u65b0\u5bb9\u91cf\u9608\u503c\n    }\n\n    // \u5982\u679c\u65b0\u5bb9\u91cf\u9608\u503c\u4ecd\u4e3a 0\uff0c\u6839\u636e\u65b0\u5bb9\u91cf\u548c\u8d1f\u8f7d\u56e0\u5b50\u8ba1\u7b97\u65b0\u5bb9\u91cf\u9608\u503c\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n\n    threshold = newThr; // \u66f4\u65b0\u5bb9\u91cf\u9608\u503c\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap]; // \u521b\u5efa\u65b0\u6570\u7ec4\n    table = newTab; // \u66f4\u65b0\u54c8\u5e0c\u8868\u6570\u7ec4\n\n    // \u5982\u679c\u539f\u6570\u7ec4\u4e3a\u7a7a\uff0c\u8bf4\u660e\u6b63\u5728\u6267\u884c\u521d\u59cb\u5316\uff0c\u76f4\u63a5\u8fd4\u56de\u521b\u5efa\u597d\u7684\u65b0\u6570\u7ec4\n    // \u5982\u679c\u539f\u6570\u7ec4\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u6b63\u5728\u6269\u5bb9\uff0c\u5c06\u539f\u6570\u7ec4\u4e2d\u7684\u952e\u503c\u5bf9\u91cd\u65b0\u5206\u914d\u5230\u65b0\u6570\u7ec4\u4e2d\n    if (oldTab != null) {\n        // \u904d\u5386\u539f\u6570\u7ec4\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            // \u5982\u679c\u5f53\u524d\u6876\u4e2d\u6709\u8282\u70b9\n            if ((e = oldTab[j]) != null) {\n                // \u6e05\u7a7a\u6876\n                oldTab[j] = null;\n                // \u5982\u679c\u6876\u4e2d\u53ea\u6709\u4e00\u4e2a\u8282\u70b9\n                // \u4e5f\u5c31\u662f\u8282\u70b9\u4e0d\u662f\u94fe\u8868\u5934\u8282\u70b9\u6216\u6811\u7684\u6839\u8282\u70b9\n                if (e.next == null)\n                    // \u76f4\u63a5\u79fb\u52a8\u5f53\u524d\u8282\u70b9\n                    newTab[e.hash & (newCap - 1)] = e;\n                // \u8282\u70b9\u662f\u6811\u8282\u70b9\uff0c\u8c03\u7528\u6811\u8282\u70b9\u7684\u62c6\u5206\u65b9\u6cd5\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // \u5f53\u524d\u8282\u70b9\u662f\u94fe\u8868\u7684\u5934\u8282\u70b9\n                    // \u4e24\u4e2a\u65b0\u7684\u94fe\u8868\u5934\u548c\u94fe\u8868\u5c3e\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    // \u5c06\u539f\u94fe\u8868\u8fdb\u884c\u62c6\u5206\n                    // \u7531\u4e8e\u65b0\u5bb9\u91cf\u662f\u65e7\u5bb9\u91cf\u7684\u4e24\u500d\uff0c\u56e0\u6b64\u5728\u8ba1\u7b97\u4e0b\u6807\u65f6\u4f1a\u591a\u622a\u53d6\u4e00\u4f4d\n                    // \u591a\u622a\u53d6\u7684\u4e00\u4f4d\u53ea\u80fd\u662f 0 \u6216\u8005 1\n                    // \u56e0\u6b64\u5f53\u524d\u94fe\u8868\u5728\u65b0\u7684 HashMap \u4e2d\u4f1a\u88ab\u5206\u5230\u4e24\u4e2a\u6876\u4e2d\n                    // \u904d\u5386\u94fe\u8868\n                    do {\n                        next = e.next;\n                        // oldCap \u662f 2 \u7684\u5e42\uff0c\u53ea\u5728\u591a\u622a\u53d6\u7684\u90a3\u4e00\u4f4d\u4e0a\u662f 1\n                        // \u5982\u679c\u591a\u622a\u53d6\u7684\u4f4d\u4e0a\u662f 0\n                        // \u628a\u5f53\u524d\u8282\u70b9\u63a5\u5230\u65b0\u94fe\u8868 1 \u7684\u5c3e\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        } else { // \u628a\u5f53\u524d\u8282\u70b9\u63a5\u5230\u65b0\u94fe\u8868 2 \u7684\u5c3e\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    // \u5c06\u4e24\u4e2a\u94fe\u8868\u653e\u5165\u65b0\u6570\u7ec4\u7684\u76f8\u5e94\u4f4d\u7f6e\n                    if (loTail != null) {\n                        loTail.next = null;\n                        // hash \u503c\u4e0d\u53d8\uff0c\u591a\u622a\u53d6\u7684\u4f4d\u4e0a\u662f 0\n                        // \u56e0\u6b64\u5728\u65b0\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4e0d\u53d8\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        // hash \u503c\u4e0d\u53d8\uff0c\u591a\u622a\u53d6\u7684\u4f4d\u4e0a\u662f 1\n                        // \u56e0\u6b64\u65b0\u7684\u4e0b\u6807 = \u65e7\u4e0b\u6807 + \u65e7\u6570\u7ec4\u5bb9\u91cf\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab; // \u8fd4\u56de\u65b0\u6570\u7ec4\n}\n```\n\n## put \u65b9\u6cd5\n\n```java\n/**\n * \u5c06\u6307\u5b9a\u7684\u952e\u503c\u5bf9\u63d2\u5165\u5230\u54c8\u5e0c\u8868\u4e2d\u3002\n *\n * @param hash \u952e\u7684\u54c8\u5e0c\u503c\n * @param key \u8981\u63d2\u5165\u7684\u952e\n * @param value \u8981\u63d2\u5165\u7684\u503c\n * @param onlyIfAbsent \u5982\u679c\u4e3a true\uff0c\u5219\u53ea\u6709\u5728\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u63d2\u5165\n * @param evict \u5982\u679c\u4e3a false\uff0c\u5219\u8868\u793a\u54c8\u5e0c\u8868\u5904\u4e8e\u521b\u5efa\u6a21\u5f0f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3a true\n * @return \u5982\u679c\u4fee\u6539\u4e86\u5df2\u6709\u952e\u503c\u5bf9\u4e2d\u7684\u503c\uff0c\u5219\u8fd4\u56de\u65e7\u503c\uff1b\u5426\u5219\u8fd4\u56de null\n */\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; // \u54c8\u5e0c\u8868\u6570\u7ec4\n    Node<K,V> p; // \u5f53\u524d\u8282\u70b9\n    int n, i; // \u54c8\u5e0c\u8868\u957f\u5ea6\u3001\u8ba1\u7b97\u7684\u6570\u7ec4\u4e0b\u6807\n\n    // \u5982\u679c\u54c8\u5e0c\u8868\u6570\u7ec4\u4e3a\u7a7a\u6216\u957f\u5ea6\u4e3a 0\uff0c\u5219\u8fdb\u884c\u521d\u59cb\u5316\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n\n    // \u8ba1\u7b97\u6570\u7ec4\u4e0b\u6807\u5e76\u83b7\u53d6\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8282\u70b9\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        // \u5982\u679c\u8be5\u4f4d\u7f6e\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u63d2\u5165\u65b0\u8282\u70b9\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; // \u4e34\u65f6\u8282\u70b9\uff0c\u7528\u4e8e\u5b58\u653e\u6709\u76f8\u540c\u952e\u7684\u8282\u70b9\n        K k; // \u4e34\u65f6\u952e\n\n        // \u5982\u679c\u8be5\u4f4d\u7f6e\u5df2\u7ecf\u5b58\u5728\u4e0e\u8981\u63d2\u5165\u7684\u952e\u76f8\u540c\u7684\u8282\u70b9\uff0c\u5219\u4fee\u6539\u8be5\u8282\u70b9\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        // \u5982\u679c\u8be5\u4f4d\u7f6e\u7684\u8282\u70b9\u662f\u6811\u8282\u70b9\uff0c\u5219\u8c03\u7528\u6811\u8282\u70b9\u7684\u63d2\u5165\u65b9\u6cd5\n        // \u5982\u679c\u6709\u76f8\u540c\u7684\u952e\uff0c\u63d2\u5165\u65b9\u6cd5\u8fd4\u56de\u5bf9\u5e94\u7684\u8282\u70b9\uff1b\u5426\u5219\u8fd4\u56de null\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            // \u904d\u5386\u4ee5\u5f53\u524d\u8282\u70b9\u4f4d\u94fe\u8868\u5934\u7684\u94fe\u8868\uff0c\u5e76\u4e14\u8ba1\u7b97\u94fe\u8868\u4e0a\u7684\u8282\u70b9\u6570\n            for (int binCount = 0; ; ++binCount) {\n                // \u5982\u679c\u904d\u5386\u5230\u94fe\u8868\u5c3e\u4ecd\u672a\u627e\u5230\n                if ((e = p.next) == null) {\n                    // \u5728\u94fe\u8868\u5c3e\u63d2\u5165\u65b0\u7684\u8282\u70b9\n                    p.next = newNode(hash, key, value, null);\n                    // \u5982\u679c\u94fe\u8868\u957f\u5ea6\u8fbe\u5230\u4e86\u8f6c\u5316\u4e3a\u6811\u7684\u9608\u503c\uff0c\u5219\u8fdb\u884c\u6811\u5316\u64cd\u4f5c\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                // \u5982\u679c\u627e\u5230\u4e86\u4e0e\u8981\u63d2\u5165\u7684\u952e\u76f8\u540c\u7684\u8282\u70b9\uff0c\u5219\u8df3\u51fa\u5faa\u73af\uff0c\u51c6\u5907\u4fee\u6539\u5f53\u524d\u8282\u70b9\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                // p = p.next\n                p = e;\n            }\n        }\n\n        // \u5982\u679c\u627e\u5230\u4e86\u4e0e\u8981\u63d2\u5165\u7684\u952e\u76f8\u540c\u7684\u8282\u70b9\n        if (e != null) {\n            // \u5b58\u50a8\u65e7\u503c\uff0c\u6700\u540e\u8fd4\u56de\n            V oldValue = e.value;\n            // \u5982\u679c\u5141\u8bb8\u8986\u76d6\u6216\u8005\u539f\u503c\u4e3a\u7a7a\uff0c\u5219\u66f4\u65b0\u503c\n            // onlyIfAbsent \u5982\u679c\u4e3a true\uff0c\u5219\u53ea\u6709\u5728\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u63d2\u5165\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            // \u6267\u884c\u8282\u70b9\u8bbf\u95ee\u540e\u7684\u64cd\u4f5c\uff0c\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\n            // \u7528\u4e8e LinkedList \u7684\u529f\u80fd\u5b9e\u73b0\uff0c\u5728 HashMap \u4e2d\u662f\u7a7a\u65b9\u6cd5\uff0c\u8be6\u89e3\u89c1\u4e0b\u6587\n            afterNodeAccess(e);\n            // \u8fd4\u56de\u65e7\u503c\n            return oldValue;\n        }\n    }\n\n    // \u54c8\u5e0c\u8868\u4fee\u6539\u6b21\u6570\u52a0 1\n    ++modCount;\n    // \u5982\u679c\u952e\u503c\u5bf9\u6570\u91cf\u8d85\u8fc7\u4e86\u9608\u503c\uff0c\u5219\u8fdb\u884c\u6269\u5bb9\n    if (++size > threshold)\n        resize();\n    // \u5728 HashMap \u4e2d\u662f\u7a7a\u65b9\u6cd5\uff0c\u8be6\u89e3\u89c1\u4e0b\u6587\n    afterNodeInsertion(evict);\n    // \u8fd4\u56de null\n    return null;\n}\n\u5728 HashMap \u4e2d\u6709\u90e8\u5206\u65b9\u6cd5\u662f\u7528\u6765\u7ed9\u5b50\u7c7b\u505a\u6269\u5c55\u4f7f\u7528\u7684\uff0c\u6bd4\u5982\nvoid afterNodeAccess(Node<K,V> p) { }\nvoid afterNodeInsertion(boolean evict) { }\nvoid afterNodeRemoval(Node<K,V> p) { }\n\u4ed6\u4eec\u5728 HashMap \u4e2d\u90fd\u662f\u7a7a\u65b9\u6cd5\uff0c\u7528\u4e8e\u7ed9 LinkedHashMap \u505a\u989d\u5916\u5904\u7406\u7684\u65b9\u6cd5\uff0cLinkedHashMap \u7ee7\u627f HashMap \u540e\u91cd\u5199\u8fd9\u4e9b\u56de\u8c03\u51fd\u6570\u5c31\u53ef\u4ee5\u5728 HashMap \u7684\u539f\u59cb\u64cd\u4f5c\u4e2d\u589e\u52a0\u989d\u5916\u5904\u7406\u3002\n\u6e90\u7801\u6ce8\u91ca\u5982\u4e0b\uff1a\nThe following package-protected methods are designed to be overridden by LinkedHashMap, but not by any other subclass.\n```\n\n## get \u65b9\u6cd5\n\n```java\n/**\n * \u83b7\u53d6\u6307\u5b9a\u952e\u5bf9\u5e94\u7684\u503c\n * @param key \u952e\n * @return \u5982\u679c\u5b58\u5728\u6307\u5b9a\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u5219\u8fd4\u56de\u8be5\u503c\uff1b\u5426\u5219\u8fd4\u56de null\n */\npublic V get(Object key) {\n    // \u4ece\u54c8\u5e0c\u8868\u4e2d\u83b7\u53d6\u6307\u5b9a\u952e\u5bf9\u5e94\u7684\u8282\u70b9\n    Node<K,V> e;\n    // \u8c03\u7528 getNode \u65b9\u6cd5\u83b7\u53d6\u8282\u70b9\n    return (e = getNode(key)) == null ? null : e.value;\n}\n\n/**\n * get \u548c\u76f8\u5173\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\n * @param key \u952e\n * @return \u952e\u503c\u5bf9\u8282\u70b9\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5bf9\u5e94\u952e\u5219\u8fd4\u56de null\n */\nfinal Node<K,V> getNode(Object key) {\n    // \u54c8\u5e0c\u8868\u6570\u7ec4\u3001\u7b2c\u4e00\u4e2a\u8282\u70b9\u3001\u5f53\u524d\u8282\u70b9\u3001\u54c8\u5e0c\u8868\u957f\u5ea6\u3001\u952e\u7684\u54c8\u5e0c\u503c\u3001\u952e\n    Node<K,V>[] tab; \n    Node<K,V> first, e; \n    int n, hash; \n    K k;\n    // \u68c0\u67e5\u54c8\u5e0c\u8868\u662f\u5426\u4e3a\u7a7a\u4e14\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5e76\u83b7\u53d6\u6307\u5b9a\u4e0b\u6807\u4f4d\u7f6e\u4e0a\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & (hash = hash(key))]) != null) {\n        // \u68c0\u67e5\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u5426\u5c31\u662f\u6240\u9700\u8282\u70b9\n        if (first.hash == hash && \n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        // \u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u4e0d\u662f\u6240\u9700\u8282\u70b9\uff0c\u4e14\u6709\u540e\u7eed\u8282\u70b9\uff0c\u5219\u904d\u5386\u94fe\u8868\u6216\u6811\u67e5\u627e\u8282\u70b9\n        if ((e = first.next) != null) {\n            // \u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u6811\u8282\u70b9\uff0c\u5219\u8c03\u7528\u6811\u8282\u70b9\u7684\u67e5\u627e\u65b9\u6cd5\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            // \u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u662f\u94fe\u8868\u8282\u70b9\uff0c\u904d\u5386\u94fe\u8868\u67e5\u627e\u8282\u70b9\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    // \u672a\u627e\u5230\u6240\u9700\u8282\u70b9\uff0c\u8fd4\u56de null\n    return null;\n}\n```\n\n## \u603b\u7ed3\n\n1. HashMap \u6709\u4e24\u4e2a\u91cd\u8981\u53c2\u6570\uff0c\u521d\u59cb\u5bb9\u91cf\u548c\u8d1f\u8f7d\u56e0\u5b50\uff08\u9ed8\u8ba4\u4e3a 0.75\uff09\u3002\u521d\u59cb\u5bb9\u91cf\u5c31\u662f\u5728\u521b\u5efa\u54c8\u5e0c\u8868\u65f6\u7684\u6876\u7684\u6570\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u8d1f\u8f7d\u56e0\u5b50\u662f\u5728\u6570\u7ec4\u4e2d\u586b\u5145\u952e\u503c\u5bf9\u7684\u6700\u5927\u7a0b\u5ea6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u6570\u7ec4\u88ab\u586b\u5145\u7684\u6700\u5927\u5bc6\u5ea6\uff0c\u5f53\u952e\u503c\u5bf9\u6570\u91cf\u5927\u4e8e\u6570\u7ec4\u5bb9\u91cf\u4e58\u8d1f\u8f7d\u56e0\u5b50\u65f6\u6570\u7ec4\u4f1a\u8fdb\u884c\u6269\u5bb9\u3002\n2. \u6784\u9020\u51fd\u6570\u5e76\u4e0d\u8d1f\u8d23\u5e95\u5c42\u6570\u7ec4\u7684\u5b9e\u4f8b\u5316\u3002\n3. resize \u65b9\u6cd5\u6574\u5408\u4e86\u6570\u7ec4\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u6269\u5bb9\u64cd\u4f5c\uff0c\u4e14\u65e0\u8bba\u662f\u6269\u5bb9\u8fd8\u662f\u521d\u59cb\u5316\u90fd\u9700\u8981\u5b9e\u4f8b\u5316\u65b0\u7684\u6570\u7ec4\u5e76\u4e14\u8d4b\u503c\u7ed9 table \u5c5e\u6027\u3002\n4. put \u65b9\u6cd5\u6267\u884c\u65f6\uff0c\u6839\u636e\u54c8\u5e0c\u503c\u627e\u5230\u6570\u7ec4\u4e0b\u6807\uff0c\u5982\u679c\u6570\u7ec4\u5f53\u524d\u4f4d\u7f6e\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u653e\u5165\u65b0\u7684\u952e\u503c\u5bf9\u3002\u5426\u5219\u5219\u6bd4\u8f83\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7684\u952e\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u952e\u76f8\u540c\u5c31\u76f4\u63a5\u8986\u76d6\u3002\u5982\u679c\u4e0d\u540c\uff0c\u518d\u6839\u636e\u7ed3\u70b9\u662f\u94fe\u8868\u8fd8\u662f\u7ea2\u9ed1\u6811\u6267\u884c\u4e0d\u540c\u7684\u904d\u5386\u65b9\u6cd5\u3002"}