{"data": "# aiohttp-debugmode\nThis package helps you easily start a aiohttp develpment server in subprocess ,everytime dependencies/statics are modified ,daemon process will automatically reload server thus helps you automation your workflow. Aiohttp-debugtoolbar included. \n\n.VERSION | LICENCE | VERSION | PUBLISH | BUILD\n:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:\n![fury](https://img.shields.io/pypi/v/aiohttp-debugmode.svg) | ![licence](https://img.shields.io/github/license/GoodManWEN/aiohttp-debugmode) | ![pyversions](https://img.shields.io/pypi/pyversions/aiohttp-debugmode.svg) | ![Publish](https://github.com/GoodManWEN/aiohttp-debugmode/workflows/Publish/badge.svg) | ![build](https://github.com/GoodManWEN/aiohttp-debugmode/workflows/Build/badge.svg)\n\n- Based on watchdog.\n- Works on Python3.7+\n- [aiohttp-debugtoolbar](https://github.com/aio-libs/aiohttp-debugtoolbar) included ,thus you can get a full report of traceback if exception raised.\n\n![](https://github.com/GoodManWEN/aiohttp-debugmode/blob/master/screenshots/carbon.png)\n![](https://github.com/GoodManWEN/aiohttp-debugmode/blob/master/screenshots/aiohttp_debugtoolba_sceenshot.png)\n*(\\* Screenshot from [aio-libs/aiohttp-debugtoolbar](https://github.com/aio-libs/aiohttp-debugtoolbar) \\*)*\n\n## Install\n\n    pip install aiohttp-debugmode\n\n## Usage\n\n`quick_start.py`\n\\# here's a demo script from aiohttp.doc\\\\quickstart\n```Python3\nfrom aiohttp import web\nroutes = web.RouteTableDef()\n\n@routes.get('/')\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\napp = web.Application()\napp.add_routes(routes)\nweb.run_app(app)\n```\n\nSimply modify severl lines like this\n```Python3\n# Add import\nfrom aiohttp_debugmode import Debugmode\n\n# Let Debugmode take over control of run_app\nDebugmode.run_app(app)\n```\n\nBy default ,`templates` & `static` floder is added to observing list of watchdog. You can manually set observe file/floder using append_observe.\n```Python3\nDebugmode.append_observe(['other/login.html' ,'assets'])\n```\n\nIf you need some kind of process when a aiohttp server starts up:\n```Python3\ndef stup():\n    ... # do something\n\nDebugmode.on_startup(stup) # accepts callable.\n```\n\n## Examples\n\n### aiohttp-debugmode with Vue\nAssume that you are usiung vue-cli and have a directory structure like this:\n```\n...\n\u251c\u2500\u2500 Project\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u251c\u2500\u2500 app.py               # aiohttp app entry\n\u2502   \u2514\u2500\u2500 frontend             # vue frontend folder\n\u2502       \u251c\u2500\u2500 dist             # webpack output directory\n\u2502       \u2502   \u251c\u2500\u2500 css\n\u2502       \u2502   \u251c\u2500\u2500 js\n\u2502       \u2502   \u2514\u2500\u2500 index.html\n\u2502       \u251c\u2500\u2500 node_modules\n\u2502       \u2502   \u2514\u2500\u2500 ...\n\u2502       \u251c\u2500\u2500 src              # vue source\n\u2502       \u2502   \u2514\u2500\u2500 ...\n\u2502       \u2514\u2500\u2500 vue.config.js\n\u2502   \u2514\u2500\u2500 ...\n```\nAssume that webpack outputs built file into `/Project/frontend/dist` floder while your aiohttp app collects templates & statics from `/Project/templates` & `/Project/static` folder.\n\nHere's a sample code:\n```Python3\nfrom aiohttp import web\nfrom aiohttp_debugmode import Debugmode\nimport aiohttp_jinja2\n\n# Pretended doing some tempate rander stuff.\n# @aiohttp_jinja2.template('index.html')\nasync def hello(request):\n    return web.Response(text=\"Randered.\") \n\n# Debugtoolbar included thus you can get \n# a full report of traceback.\nasync def error(request):\n    raise Exception('Testing.')\n\napp = web.Application()\napp.router.add_route('GET', '/', hello)\napp.router.add_route('GET', '/err', error)\napp.add_routes([web.static('/', 'static')])\n\ndef initialize():\n    import shutil , os , glob\n    # You may use os.path.abspath to get absolute path in some situation.\n    if os.path.exists('frontend\\dist\\index.html'):\n        shutil.move('frontend\\dist\\index.html' , 'templates')\n        try:\n            shutil.rmtree(filepath)\n            os.mkdir(filepath)\n            for filepath in glob.glob('frontend\\dist\\*'):\n                shutil.move(filepath , 'static')\n        except Exception as e:\n            raise e\n\nDebugmode.append_observe(['frontend\\dist']) # backslashes on windows.\nDebugmode.on_startup(initialize)\n# Debugmode takes over run_app instead of web.run_app\nDebugmode.run_app(app , host = '127.0.0.1' , port = 8080)\n```\n\nThus every time you run `npm run build` ,debugmode will catch file modified event ,init file directory and restart aiohttp server with new generated html/js/css file.\n"}