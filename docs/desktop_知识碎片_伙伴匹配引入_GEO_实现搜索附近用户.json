{"data": "# \u4f19\u4f34\u5339\u914d\u5f15\u5165 GEO \u5b9e\u73b0\u641c\u7d22\u9644\u8fd1\u7528\u6237\n\n\u4f19\u4f34\u5339\u914d\u5f15\u5165 Reids GEO \u5b9e\u73b0\u641c\u7d22\u9644\u8fd1\u7528\u6237\u529f\u80fd\n\n## \u524d\u8a00\n\n\u9c7c\u76ae\u54e5\u5728\u76f4\u64ad\u4e2d\u63d0\u51fa\u53ef\u4ee5\u901a\u8fc7Redis GEO\u5b9e\u73b0\u7f16\u8f91\u8ddd\u79bb\u548c\u641c\u7d22\u9644\u8fd1\u7528\u6237\u529f\u80fd\uff0c\u4e5f\u7b97\u662f\u662f\u4e00\u4e2a\u62d3\u5c55\u70b9\u3002\u8fd9\u4e2a\u9879\u76ee\u6211\u505a\u5b8c\u6709\u4e00\u4e2a\u591a\u6708\u4e86\uff0c\u6700\u8fd1\u5728\u505a\u5176\u62d3\u5c55\u529f\u80fd\u987a\u4fbf\u4e5f\u628a\u8fd9\u4e2a\u529f\u80fd\u5b9e\u73b0\u4e00\u6ce2\uff0c\u6574\u4f53\u7684\u5b9e\u73b0\u5e76\u4e0d\u56f0\u96be\uff0c\u5b66\u5b8c Redis \u518d\u770b\u4f1a\u66f4\u8f7b\u677e\uff08\u672a\u5b66\u8fc7\u4e5f\u6ca1\u4e8b\uff09\u3002\u8bdd\u4e0d\u591a\u8bf4\u76f4\u63a5\u5f00\u59cb\u64b8\u4ee3\u7801\u5427\u3002\n\n### \u8bbe\u8ba1\u601d\u8def\u548c\u6d41\u7a0b\n\n1. \u5728 User\uff08\u7528\u6237\uff09\u8868\u4e2d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u6bb5 longitude\uff08\u7ecf\u5ea6\uff09\u548c dimension\uff08\u7ef4\u5ea6\uff09\uff0c\u7528\u4ee5\u5b58\u50a8\u7528\u6237\u7684\u7ecf\u7eac\u5ea6\u5750\u6807\u3002\u56e0\u4e3aRedis GEO \u901a\u8fc7\u6bcf\u4e2a\u7528\u6237\u7684\u7ecf\u7eac\u5ea6\u5750\u6807\u8ba1\u7b97\u7528\u6237\u95f4\u7684\u8ddd\u79bb\uff0c\u540c\u65f6\u5176 Redis \u6570\u636e\u7c7b\u578b\u4e3aZSET\uff0cZSET \u662f\u4e00\u4e2a\u6709\u5e8f\u7684 List \u7c7b\u4f3c Java \u7684 SortedSet\u3002\u5728\u6b64\u573a\u666f value \u5c31\u662f\u7528\u6237id\uff0cscore \u662f\u7ecf\u7eac\u5ea6\u4fe1\u606f\uff08 ZSET \u6839\u636e score\u503c\u5347\u5e8f\u6392\u5e8f\uff09\u3002\n\n![](https://pic.yupi.icu/5563/202402221848343.png)\n\n```sql\ncreate table hjj.user\n(\n    username     varchar(256)                       null comment '\u7528\u6237\u6635\u79f0',\n    id           bigint auto_increment comment 'id'\n        primary key,\n    userAccount  varchar(256)                       null comment '\u8d26\u6237',\n    avatarUrl    varchar(1024)                      null comment '\u7528\u6237\u5934\u50cf',\n    gender       tinyint                            null comment '\u7528\u6237\u6027\u522b',\n    profile      varchar(512)                       null comment '\u4e2a\u4eba\u7b80\u4ecb',\n    userPassword varchar(512)                       not null comment '\u7528\u6237\u5bc6\u7801',\n    phone        varchar(128)                       null comment '\u7535\u8bdd',\n    email        varchar(512)                       null comment '\u90ae\u7bb1',\n    userStatus   int      default 0                 not null comment '\u72b6\u6001 0 - \u6b63\u5e38',\n    createTime   datetime default CURRENT_TIMESTAMP null comment '\u521b\u5efa\u65f6\u95f4',\n    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP comment '\u66f4\u65b0\u65f6\u95f4',\n    isDelete     tinyint  default 0                 not null comment '\u662f\u5426\u5220\u9664',\n    userRole     int      default 0                 not null comment '\u7528\u6237\u89d2\u8272 0 - \u666e\u901a\u7528\u6237 1 - \u7ba1\u7406\u5458',\n    planetCode   varchar(512)                       null comment '\u661f\u7403\u7f16\u53f7',\n    tags         varchar(1024)                      null comment '\u6807\u7b7e\u5217\u8868(json)',\n    longitude    decimal(10, 6)                     null comment '\u7ecf\u5ea6',\n    dimension    decimal(10, 6)                     null comment '\u7eac\u5ea6'\n)\n    comment '\u7528\u6237';\n```\n\n1. \u5728 UserVO \u7c7b\u4e2d\u6dfb\u52a0distance\u5b57\u6bb5\uff0c\u7528\u4ee5\u5411\u524d\u7aef\u8fd4\u56de\u6bcf\u4e2a\u7528\u6237\u4e0e\u81ea\u5df1\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7c7b\u578b\u4e3aDouble\u3002\n\n```java\n/**\n * \u7528\u6237\u4fe1\u606f\u5c01\u88c5\u7c7b\n */\n@Data\npublic class UserVO {\n    /**\n     * id\n     */\n    private long id;\n\n    /**\n     * \u7528\u6237\u6635\u79f0\n     */\n    private String username;\n\n    /**\n     * \u8d26\u6237\n     */\n    private String userAccount;\n\n    /**\n     * \u7528\u6237\u5934\u50cf\n     */\n    private String avatarUrl;\n\n    /**\n     * \u7528\u6237\u6027\u522b\n     */\n    private Integer gender;\n    /**\n     * \u7528\u6237\u7b80\u4ecb\n     */\n    private String profile;\n\n    /**\n     * \u7535\u8bdd\n     */\n    private String phone;\n\n    /**\n     * \u90ae\u7bb1\n     */\n    private String email;\n\n    /**\n     * \u72b6\u6001 0 - \u6b63\u5e38\n     */\n    private Integer userStatus;\n\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    private Date createTime;\n\n    /**\n     * \u66f4\u65b0\u65f6\u95f4\n     */\n    private Date updateTime;\n\n    /**\n     * \u7528\u6237\u89d2\u8272 0 - \u666e\u901a\u7528\u6237 1 - \u7ba1\u7406\u5458\n     */\n    private Integer userRole;\n\n    /**\n     * \u661f\u7403\u7f16\u53f7\n     */\n    private String planetCode;\n    /**\n     * \u6807\u7b7e\u5217\u8868 json\n     */\n    private String tags;\n\n    /**\n     * \u7528\u6237\u8ddd\u79bb\n     */\n    private Double distance;\n\n    private static final long serialVersionUID = 1L;\n}\n```\n\n## \u57fa\u672c\u4e1a\u52a1\u5b9e\u73b0\n\n### \u5bfc\u5165\u5404\u4e2a\u7528\u6237\u7ecf\u7eac\u5ea6\u6570\u636e\n\n\u7f16\u5199\u6d4b\u8bd5\u7c7b\u5bfc\u5165\u5404\u4e2a\u7528\u6237\u7684\u7ecf\u7eac\u5ea6\u4fe1\u606f\u5e76\u4e14\u5199\u5165Redis\u4e2d\uff0cRedis GEO\u4f1a\u6839\u636e\u5b83\u8ba1\u7b97\u51fa\u4e00\u4e2a score\u503c\u3002\u8fdb\u884c Redis GEO \u76f8\u5173\u64cd\u4f5c\u65f6\u53ef\u4ee5\u4f7f\u7528 Spring Data Redis \u63d0\u4f9b\u73b0\u6210\u7684\u64cd\u4f5c Redis \u7684\u6a21\u677f\u2014\u2014StringRedisTemplate\uff0c\u6ce8\u610f\u5176 Key/Value \u90fd\u662fString\u7c7b\u578b\u3002\n\nstringRedisTemplate.opsForGeo().add() \u652f\u6301\u4e00\u6b21\u4e00\u6b21\u5730\u4f20\u5165\u7ecf\u7eac\u5ea6\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7List\u548cMap\u96c6\u5408\u7c7b\u578b\u4f20\u5165\u7528\u6237\u7ecf\u7eac\u5ea6\u4fe1\u606f\uff0c\u8fd9\u91cc\u6211\u4eec\u7528List\u96c6\u5408\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3aRedis\u7684key\uff0c\u8fd9\u4e0d\u7528\u8fc7\u591a\u4ecb\u7ecd\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3aList\u7c7b\u578b\uff0c\u6cdb\u578b\u4e3aRedisGeoCommands.GeoLocation\uff0c\u5176\u53c2\u6570\u4e3a\u7528\u6237id\u548cPoint\uff08Point\u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u4e00\u4e2a\u5706\u7684\u4e00\u4e2a\u70b9\u5427\uff0c\u7ecf\u7eac\u5ea6\u5c31\u662fx/y\u5750\u6807\uff09\u3002\n\nstringRedisTemplate.opsForGeo().add()\u4f20\u5165\u7684\u53c2\u6570\uff1a\n\n![](https://pic.yupi.icu/5563/202402221848351.png)\n\n```java\n    @Test\n    public void importUserGEOByRedis() {\n        List<User> userList = userService.list(); // \u67e5\u8be2\u6240\u6709\u7528\u6237\n        String key = RedisConstant.USER_GEO_KEY; // Redis\u7684key\n        List<RedisGeoCommands.GeoLocation<String>> locationList = new ArrayList<>(userList.size()); // \u521d\u59cb\u5316\u5730\u5740\uff08\u7ecf\u7eac\u5ea6\uff09List\n        for (User user : userList) {\n            locationList.add(new RedisGeoCommands.GeoLocation<>(String.valueOf(user.getId()), new Point(user.getLongitude(),\n                    user.getDimension()))); // \u5f80locationList\u6dfb\u52a0\u6bcf\u4e2a\u7528\u6237\u7684\u7ecf\u7eac\u5ea6\u6570\u636e\n        }\n        stringRedisTemplate.opsForGeo().add(key, locationList); // \u5c06\u6bcf\u4e2a\u7528\u6237\u7684\u7ecf\u7eac\u5ea6\u4fe1\u606f\u5199\u5165Redis\u4e2d\n    }\n```\n\n\u7ed3\u679c\uff1a\n\n![](https://pic.yupi.icu/5563/202402221848324.png)\n\n### \u83b7\u53d6\u7528\u6237 id = 1 \u4e0e\u5176\u4ed6\u7528\u6237\u7684\u8ddd\u79bb\n\n\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u7c7b\u8ba1\u7b97\u7528\u6237 id = 1 \u4e0e\u5176\u4ed6\u7528\u6237\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u5229\u7528stringRedisTemplate.opsForGeo().distance()\u65b9\u6cd5\uff0c\u5176\u4e3b\u8981\u53c2\u6570\u4e3amember1\u548cmember2\uff0cMetric\u662f\u8ba1\u7b97\u8ddd\u79bb\u7684\u5355\u4f4d\u7c7b\u578b\u3002\u4ece\u540d\u79f0\u5c31\u53ef\u4ee5\u77e5\u9053member1\u548cmember2\u5176\u5b9e\u5c31\u662f\u7528\u62371\u548c\u7528\u62372\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u4e0a\u9762\u7528 locationList.add() \u6dfb\u52a0\u7528\u6237id\u548c\u7528\u6237\u7684\u7ecf\u5ea6\u5750\u6807\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2amember\u5c31\u662f\u7528\u6237id\u54af\u3002\n\n\u6240\u4ee5\u5199\u4e2a\u5faa\u73af\u5c31\u53ef\u4ee5\u7b97\u51fa\u7528\u6237 id = 1 \u4e0e\u5176\u4ed6\u7528\u6237\u7684\u8ddd\u79bb\n\n```java\n    @Test\n    public void getUserGeo() {\n        String key = RedisConstant.USER_GEO_KEY;\n        List<User> userList = userService.list();\n\n        // \u8ba1\u7b97\u6bcf\u4e2a\u7528\u6237\u4e0e\u767b\u5f55\u7528\u6237\u7684\u8ddd\u79bb\n        for (User user : userList) {\n            Distance distance = stringRedisTemplate.opsForGeo().distance(key,\n                    \"1\", String.valueOf(user.getId()), RedisGeoCommands.DistanceUnit.KILOMETERS);\n            System.out.println(\"User: \" + user.getId() + \", Distance: \" +\n                    distance.getValue() + \" \" + distance.getUnit());\n        }\n    }\n```\n\n\u7ed3\u679c\uff1a\n\n![](https://pic.yupi.icu/5563/202402221848332.png)\n\n### \u641c\u7d22\u9644\u8fd1\u7528\u6237\n\n\u5229\u7528\u73b0\u6210\u7684 stringRedisTemplate.opsForGeo().radius \u65b9\u6cd5\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f9d\u7136\u662fRedis\u7684key\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fCircle\uff0c\u770b\u4ee3\u7801\u548c\u540d\u79f0\u5c31\u77e5\u9053\u5176\u662f\u4e00\u4e2a\u5706\uff08\u4f20\u5165Point\u5373\u5706\u5fc3\u548c\u5706\u7684\u534a\u5f84\uff09\u3002\u60f3\u8c61\u641c\u7d22\u9644\u8fd1\u7684\u7528\u6237\u5c31\u662f\u641c\u7d22\u4ee5\u4f60\u4e3a\u5706\u5fc3\uff0c\u534a\u5f84\u4e3a\u641c\u7d22\u8ddd\u79bb\u7684\u5706\u5185\u7684\u7528\u6237\u3002\u7406\u89e3\u8fd9\u4e9b\u4ee3\u7801\u5c31\u80fd\u987a\u7406\u6210\u7ae0\u7684\u64b8\u51fa\u6765\u4e86\uff0c\u662f\u4e0d\u662f\u4e0d\u7b97\u96be\u3002\n\n```java\n    @Test\n    public void searchUserByGeo() {\n        User loginUser = userService.getById(1);\n        Distance geoRadius = new Distance(1500, RedisGeoCommands.DistanceUnit.KILOMETERS);\n        Circle circle  = new Circle(new Point(loginUser.getLongitude(), loginUser.getDimension()), geoRadius);\n        RedisGeoCommands.GeoRadiusCommandArgs geoRadiusCommandArgs = RedisGeoCommands.GeoRadiusCommandArgs\n                .newGeoRadiusArgs().includeCoordinates();\n        GeoResults<RedisGeoCommands.GeoLocation<String>> results = stringRedisTemplate.opsForGeo().radius(RedisConstant.USER_GEO_KEY, circle, geoRadiusCommandArgs);\n        for (GeoResult<RedisGeoCommands.GeoLocation<String>> result : results) {\n            if (!result.getContent().getName().equals(\"1\")) {\n                System.out.println(result.getContent().getName()); // \u6253\u53701500km\u5185\u7684\u7528\u6237id\n            }\n        }\n    }\n```\n\n\u6ce8\u610f\uff1a\u641c\u7d22\u9644\u8fd1\u7684\u7528\u6237\u4f1a\u641c\u7d22\u5230\u81ea\u5df1\uff0c\u6240\u4ee5\u53ef\u4ee5\u52a0\u4e00\u4e2a\u5224\u65ad\u4ee5\u6392\u9664\u81ea\u5df1\u3002\n\n\u7ed3\u679c\uff1a\n\n![](https://pic.yupi.icu/5563/202402221848356.png)\n\n## \u5e94\u7528\u81f3\u4f19\u4f34\u5339\u914d\u9879\u76ee\n\n### \u6539\u5199\u7528\u6237\u63a8\u8350\u63a5\u53e3\n\n\u6211\u7684recommend\u63a5\u53e3\u672a\u4eceRedis\u7f13\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u662f\u76f4\u63a5\u8d70\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\uff0c\u6709\u80fd\u529b\u7684\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\uff0c\u6211\u540e\u7eed\u4e5f\u4f1a\u5b9e\u73b0\u7684\u3002\u540c\u65f6\u6ce8\u610f\u8fd4\u56de\u7c7b\u578b\u662fUserVO\u4e0d\u662fUser\uff0c\u56e0\u4e3a\u6211\u7684\u524d\u7aef\u5c55\u793a\u4e86\u63a8\u8350\u7528\u6237\u548c\u81ea\u5df1\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\n\nUserController.recommendUsers:\n\n```java\n    @GetMapping(\"/recommend\")\n    public BaseResponse<List<UserVO>> recommendUsers(long pageSize, long pageNum, HttpServletRequest request){\n        User loginUser = userService.getLoginUser(request);\n        QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n        queryWrapper.ne(\"id\", loginUser.getId());\n        IPage<User> page = new Page<>(pageNum, pageSize);\n        IPage<User> userIPage = userService.page(page, queryWrapper);\n\n        String redisUserGeoKey = RedisConstant.USER_GEO_KEY;\n        // \u5c06User\u8f6c\u6362\u4e3aUserVO\n        List<UserVO> userVOList = userIPage.getRecords().stream()\n                .map(user -> {\n                    // \u67e5\u8be2\u8ddd\u79bb\n                    Distance distance = stringRedisTemplate.opsForGeo().distance(redisUserGeoKey,\n                            String.valueOf(loginUser.getId()), String.valueOf(user.getId()),\n                            RedisGeoCommands.DistanceUnit.KILOMETERS);\n                    double value = distance.getValue();\n\n                    // \u521b\u5efaUserVO\u5bf9\u8c61\u5e76\u8bbe\u7f6e\u5c5e\u6027\n                    UserVO userVO = new UserVO();\n                    // \u8fd9\u91cc\u53ef\u4ee5\u7528BeanUtils.copyProperties()\uff0c\u5c31\u6ca1\u5fc5\u8981\u91cd\u590dset\u4e86\n                    userVO.setId(user.getId());\n                    userVO.setUsername(user.getUsername());\n                    userVO.setUserAccount(user.getUserAccount());\n                    userVO.setAvatarUrl(user.getAvatarUrl());\n                    userVO.setGender(user.getGender());\n                    userVO.setProfile(user.getProfile());\n                    userVO.setPhone(user.getPhone());\n                    userVO.setEmail(user.getEmail());\n                    userVO.setUserStatus(user.getUserStatus());\n                    userVO.setCreateTime(user.getCreateTime());\n                    userVO.setUpdateTime(user.getUpdateTime());\n                    userVO.setUserRole(user.getUserRole());\n                    userVO.setPlanetCode(user.getPlanetCode());\n                    userVO.setTags(user.getTags());\n                    userVO.setDistance(value); // \u8bbe\u7f6e\u8ddd\u79bb\u503c\n                    return userVO;\n                })\n                .collect(Collectors.toList());\n        System.out.println(userVOList);\n        return ResultUtils.success(userVOList);\n    }\n```\n\n### \u6539\u5199\u5339\u914d\u7528\u6237\u63a5\u53e3\n\nUserServiceImpl.matchUsers:\n\n```java\n    /**\n     * \u63a8\u8350\u6700\u5339\u914d\u7684\u7528\u6237\n     * @return\n     */\n    @GetMapping(\"/match\")\n    public BaseResponse<List<UserVO>> matchUsers(long num, HttpServletRequest request){\n        if (num <=0 || num > 20) {\n            throw new BusinessException(ErrorCode.PARAMS_ERROR);\n        }\n        User loginUser = userService.getLoginUser(request);\n        return ResultUtils.success(userService.matchUsers(num ,loginUser));\n    }\n```\n\nUserServiceImpl.matchUsers:\n\n```java\n    @Override\n    public List<UserVO> matchUsers(long num, User loginUser) {\n        QueryWrapper<User> queryWrapper = new QueryWrapper<>();\n        queryWrapper.isNotNull(\"tags\");\n        queryWrapper.ne(\"id\", loginUser.getId());\n        queryWrapper.select(\"id\",\"tags\");\n        List<User> userList = this.list(queryWrapper);\n\n        String tags = loginUser.getTags();\n        Gson gson = new Gson();\n        List<String> tagList = gson.fromJson(tags, new TypeToken<List<String>>() {\n        }.getType());\n        // \u7528\u6237\u5217\u8868\u7684\u4e0b\u8868 => \u76f8\u4f3c\u5ea6'\n        List<Pair<User,Long>> list = new ArrayList<>();\n        // \u4f9d\u6b21\u8ba1\u7b97\u5f53\u524d\u7528\u6237\u548c\u6240\u6709\u7528\u6237\u7684\u76f8\u4f3c\u5ea6\n        for (int i = 0; i <userList.size(); i++) {\n            User user = userList.get(i);\n            String userTags = user.getTags();\n            //\u65e0\u6807\u7b7e\u7684 \u6216\u5f53\u524d\u7528\u6237\u4e3a\u81ea\u5df1\n            if (StringUtils.isBlank(userTags) || user.getId() == loginUser.getId()){\n                continue;\n            }\n            List<String> userTagList = gson.fromJson(userTags, new TypeToken<List<String>>() {\n            }.getType());\n            //\u8ba1\u7b97\u5206\u6570\n            long distance = AlgorithmUtils.minDistance(tagList, userTagList);\n            list.add(new Pair<>(user,distance));\n        }\n        //\u6309\u7f16\u8f91\u8ddd\u79bb\u6709\u5c0f\u5230\u5927\u6392\u5e8f\n        List<Pair<User, Long>> topUserPairList = list.stream()\n                .sorted((a, b) -> (int) (a.getValue() - b.getValue()))\n                .limit(num)\n                .collect(Collectors.toList());\n        //\u6709\u987a\u5e8f\u7684userID\u5217\u8868\n        List<Long> userListVo = topUserPairList.stream().map(pari -> pari.getKey().getId()).collect(Collectors.toList());\n\n        //\u6839\u636eid\u67e5\u8be2user\u5b8c\u6574\u4fe1\u606f\n        QueryWrapper<User> userQueryWrapper = new QueryWrapper<>();\n        userQueryWrapper.in(\"id\",userListVo);\n        Map<Long, List<User>> userIdUserListMap = this.list(userQueryWrapper).stream()\n                .map(user -> getSafetyUser(user))\n                .collect(Collectors.groupingBy(User::getId));\n\n        List<User> finalUserList = new ArrayList<>();\n        for (Long userId : userListVo){\n            finalUserList.add(userIdUserListMap.get(userId).get(0));\n        }\n\n        String redisUserGeoKey = RedisConstant.USER_GEO_KEY;\n        List<UserVO> finalUserVOList = finalUserList.stream().map(user -> {\n            Distance distance = stringRedisTemplate.opsForGeo().distance(redisUserGeoKey, String.valueOf(loginUser.getId()),\n                    String.valueOf(user.getId()), RedisGeoCommands.DistanceUnit.KILOMETERS);\n\n\n            UserVO userVO = new UserVO();\n            userVO.setId(user.getId());\n            // \u8fd9\u91cc\u53ef\u4ee5\u7528BeanUtils.copyProperties()\uff0c\u5c31\u6ca1\u5fc5\u8981\u91cd\u590dset\u4e86\n            userVO.setUsername(user.getUsername());\n            userVO.setUserAccount(user.getUserAccount());\n            userVO.setAvatarUrl(user.getAvatarUrl());\n            userVO.setGender(user.getGender());\n            userVO.setProfile(user.getProfile());\n            userVO.setPhone(user.getPhone());\n            userVO.setEmail(user.getEmail());\n            userVO.setUserStatus(user.getUserStatus());\n            userVO.setCreateTime(user.getCreateTime());\n            userVO.setUpdateTime(user.getUpdateTime());\n            userVO.setUserRole(user.getUserRole());\n            userVO.setPlanetCode(user.getPlanetCode());\n            userVO.setTags(user.getTags());\n            userVO.setDistance(distance.getValue());\n            return userVO;\n        }).collect(Collectors.toList());\n        return finalUserVOList;\n    }\n```\n\n### \u6dfb\u52a0\u641c\u7d22\u9644\u8fd1\u7528\u6237\u63a5\u53e3\n\nUserController.searchNearby:\n\n```java\n/**\n     * \u641c\u7d22\u9644\u8fd1\u7528\u6237\n     */\n    @GetMapping(\"/searchNearby\")\n    public BaseResponse<List<UserVO>> searchNearby(int radius, HttpServletRequest request) {\n        if (radius <= 0 || radius > 10000) {\n            throw new BusinessException(ErrorCode.PARAMS_ERROR);\n        }\n        User user = userService.getLoginUser(request);\n        User loginUser = userService.getById(user.getId());\n        List<UserVO> userVOList = userService.searchNearby(radius, loginUser);\n        return ResultUtils.success(userVOList);\n    }\n```\n\nUserServiceImpl.searchNearby:\n\n```java\n    @Override\n    public List<UserVO> searchNearby(int radius, User loginUser) {\n        String geoKey = RedisConstant.USER_GEO_KEY;\n        String userId = String.valueOf(loginUser.getId());\n        Double longitude = loginUser.getLongitude();\n        Double dimension = loginUser.getDimension();\n        if (longitude == null || dimension == null) {\n            throw new BusinessException(ErrorCode.NULL_ERROR, \"\u767b\u5f55\u7528\u6237\u7ecf\u7eac\u5ea6\u53c2\u6570\u4e3a\u7a7a\");\n        }\n        Distance geoRadius = new Distance(radius, RedisGeoCommands.DistanceUnit.KILOMETERS);\n        Circle circle = new Circle(new Point(longitude, dimension), geoRadius);\n        GeoResults<RedisGeoCommands.GeoLocation<String>> results = stringRedisTemplate.opsForGeo()\n                .radius(geoKey, circle);\n        List<Long> userIdList = new ArrayList<>();\n        for (GeoResult<RedisGeoCommands.GeoLocation<String>> result : results) {\n            String id = result.getContent().getName();\n            if (!userId.equals(id)) {\n                userIdList.add(Long.parseLong(id));\n            }\n        }\n        List<UserVO> userVOList = userIdList.stream().map(\n                id -> {\n                    UserVO userVO = new UserVO();\n                    User user = this.getById(id);\n                    BeanUtils.copyProperties(user, userVO);\n                    Distance distance = stringRedisTemplate.opsForGeo().distance(geoKey, userId, String.valueOf(id),\n                            RedisGeoCommands.DistanceUnit.KILOMETERS);\n                    userVO.setDistance(distance.getValue());\n                    return userVO;\n                }\n        ).collect(Collectors.toList());\n        return userVOList;\n    }\n```\n\n## \u524d\u7aef\u6539\u52a8\n\nIndex.vue:\n\n```js\n<template>\n  <van-search v-model=\"searchText\" placeholder=\"\u641c\u7d22\u9644\u8fd1\u7528\u6237\" @search=\"onSearch(searchText)\"/>\n  <van-cell center title=\"\u5fc3\u52a8\u6a21\u5f0f\">\n    <template #right-icon>\n      <van-switch v-model=\"isMatchMode\" size=\"24\" />\n    </template>\n  </van-cell>\n  <user-card-list :user-list=\"userList\" :loading=\"loading\"/>\n  <van-empty v-if=\"!userList || userList.length < 1\" description=\"\u6570\u636e\u4e3a\u7a7a\" />\n</template>\n\n<script setup lang=\"ts\">\nimport {ref, watchEffect} from \"vue\";\nimport {useRoute} from \"vue-router\";\n\nimport myAxios from \"../plugins/myAxios.ts\";\nimport UserCardList from \"../components/UserCardList.vue\";\nimport {UserType} from \"../models/user\"\nimport {showToast} from \"vant\";\n\nconst route = useRoute();\nconst { tags } = route.query;\nconst searchText = ref('');\nconst userList = ref([]);\nconst isMatchMode = ref<boolean>(false);\nconst loading = ref(true);\n\n/**\n * \u52a0\u8f7d\u6570\u636e\n */\nconst loadData = async () => {\n  let userListData;\n  loading.value = true;\n  //\u5fc3\u52a8\u6a21\u5f0f\n  if (isMatchMode.value){\n    const num = 10;\n    userListData = await myAxios.get('user/match',{\n      params: {\n        num,\n      },\n    })\n        .then(function (response) {\n          console.log('/user/match succeed',response);\n          return response?.data;\n        })\n        .catch(function (error) {\n          console.log('/user/match error',error);\n        });\n  }else {\n    //\u666e\u901a\u7528\u6237\u4f7f\u7528\u5206\u9875\u67e5\u8be2\n    userListData = await myAxios.get('/user/recommend',{\n      params: {\n        pageSize: 8,\n        pageNum: 1,\n      },\n    })\n        .then(function (response) {\n          console.log('/user/recommend succeed', response);\n          return response?.data;\n        })\n        .catch(function (error) {\n          console.log('/user/recommends error',error);\n        });\n\n  }\n  if (userListData){\n    userListData.forEach((user: UserType) =>{\n      if (user.tags){\n        user.tags = JSON.parse(user.tags);\n      }\n    })\n    userList.value = userListData;\n  }\n  loading.value = false;\n}\n\nwatchEffect(() =>{\n  loadData();\n})\n\nconst onSearch = async (searchText) => {\n  let userListData;\n  loading.value = true;\n  const res = await myAxios.get('/user/searchNearby', {\n    params: {\n      radius: searchText\n    }\n  })\n  if (res?.code === 0) {\n    userListData = res?.data;\n    if (userListData){\n      userListData.forEach((user: UserType) =>{\n        if (user.tags){\n          user.tags = JSON.parse(user.tags);\n        }\n      })\n      userList.value = userListData;\n    }\n    loading.value = false;\n  } else {\n    showToast('\u641c\u7d22\u5931\u8d25');\n  }\n  loading.value = false;\n};\n\n</script>\n\n<style scoped>\n\n</style>\n```\n\nuser.d.ts:\n\n```js\n    export type UserType = {\n        id: number;\n        username: string;\n        userAccount: string;\n        avatarUrl?: string;\n        gender:number;\n        profile?: string;\n        phone: string;\n        email: string;\n        userStatus: number;\n        userRole: number;\n        planetCode: string;\n        createTime: Date;\n        tags: string;\n        distance: number;\n    };\n```\n\nUserCardList.vue:\n\n```js\n  <template>\n  <van-skeleton title avatar :row=\"3\" :loading=\"loading\" v-for=\"user in userList\">\n  <van-card\n      :desc=\"user.profile\"\n      :title=\"`${user.username}(${user.planetCode})`\"\n      :price=\"`${user.distance} km`\"\n      currency=\"\"\n      :thumb=\"user.avatarUrl\"\n  >\n    <template #tags>\n      <van-tag plain type=\"danger\" v-for=\"tag in user.tags\" style=\"margin-right: 8px; margin-top: 8px\">\n        {{ tag }}\n      </van-tag>\n    </template>\n    <template #footer>\n      <van-button size=\"mini\" @click=\"toIntroUser(user)\">\u8054\u7cfb\u6211</van-button>\n    </template>\n  </van-card>\n  </van-skeleton>\n\n</template>\n\n  <script setup lang=\"ts\">\n  import {UserType} from \"../models/user\";\n  import {useRouter} from \"vue-router\";\n\n  const router = useRouter();\n\n  interface UserCardListProps{\n    loading: boolean\n    userList: UserType[];\n  }\n  withDefaults(defineProps<UserCardListProps>(), {\n    loading: true,\n  })\n\n  const toIntroUser = (user: UserType) => {\n    router.push({\n      path: '/user/intro',\n      query: {\n        userInfoParam: JSON.stringify(user)\n      }\n    });\n  }\n\n  </script>\n\n  <style scoped>\n\n  </style>\n```\n\n\u5982\u679c\u6709\u4e9b\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u8fd8\u8bf7\u5404\u4f4d\u53ca\u65f6\u6307\u6b63\u3002\n"}