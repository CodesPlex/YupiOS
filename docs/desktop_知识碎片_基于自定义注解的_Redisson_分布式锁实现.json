{"data": "# \u57fa\u4e8e\u81ea\u5b9a\u4e49\u6ce8\u89e3\u7684 Redisson \u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\n\n> \u4f5c\u8005\uff1a[are you ok?](https://blog.csdn.net/weixin_43811294)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 589\n\n## \u524d\u8a00\n\n\u5728\u9879\u76ee\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u4f7f\u7528`Redisson`\u5206\u5e03\u5f0f\u9501\u6765\u4fdd\u8bc1\u5e76\u53d1\u64cd\u4f5c\u7684\u5b89\u5168\u6027\u3002\u5728\u672a\u5f15\u5165\u57fa\u4e8e\u6ce8\u89e3\u7684\u5206\u5e03\u5f0f\u9501\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u624b\u52a8\u7f16\u5199\u83b7\u53d6\u9501\u3001\u5224\u65ad\u9501\u3001\u91ca\u653e\u9501\u7684\u903b\u8f91\uff0c\u5bfc\u81f4\u4ee3\u7801\u91cd\u590d\u4e14\u5197\u957f\u3002\u4e3a\u4e86\u7b80\u5316\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u57fa\u4e8e\u6ce8\u89e3\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u901a\u8fc7\u4e00\u4e2a\u6ce8\u89e3\u5c31\u53ef\u4ee5\u5b9e\u73b0\u83b7\u53d6\u9501\u3001\u5224\u65ad\u9501\u3001\u5904\u7406\u5b8c\u6210\u540e\u91ca\u653e\u9501\u7684\u903b\u8f91\u3002\u8fd9\u6837\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u4ee3\u7801\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387\u3002\n\n## \u76ee\u6807\n\n\u4f7f\u7528`@DistributedLock`\u5373\u53ef\u5b9e\u73b0\u83b7\u53d6\u9501\uff0c\u5224\u65ad\u9501\uff0c\u5904\u7406\u5b8c\u6210\u540e\u91ca\u653e\u9501\u7684\u903b\u8f91\u3002\n\n```java\n@RestController\npublic class HelloController {\n\n  @DistributedLock\n  @GetMapping(\"/helloWorld\")\n  public void helloWorld() throws InterruptedException {\n    System.out.println(\"helloWorld\");\n    Thread.sleep(100000);\n  }\n}\n```\n\n## \u6d89\u53ca\u77e5\u8bc6\n\n- SpringBoot\n- Spring AOP\n- Redisson\n- \u81ea\u5b9a\u4e49\u6ce8\u89e3\n- \u7edf\u4e00\u5f02\u5e38\u5904\u7406\n- SpEL\u8868\u8fbe\u5f0f\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n### \u5f15\u5165\u4f9d\u8d56\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.redisson</groupId>\n  <artifactId>redisson</artifactId>\n  <version>3.21.3</version>\n</dependency>\n<dependency>\n  <groupId>org.projectlombok</groupId>\n  <artifactId>lombok</artifactId>\n</dependency>\n```\n\n### \u6ce8\u89e3\u7c7b\n\n```java\n/**\n * \u5206\u5e03\u5f0f\u9501\u6ce8\u89e3\n * @author \u53ea\u6709\u5f71\u5b50\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DistributedLock {\n  /**\n   * \u83b7\u53d6\u9501\u5931\u8d25\u65f6\uff0c\u9ed8\u8ba4\u7684\u9519\u8bef\u63cf\u8ff0\n   */\n  String errorDesc() default \"\u4efb\u52a1\u6b63\u5728\u5904\u7406\u4e2d\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\";\n\n  /**\n   * SpEL\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u83b7\u53d6\u9501\u7684key\n   * \u793a\u4f8b\uff1a\n   * \"#name\"\u5219\u4ece\u65b9\u6cd5\u53c2\u6570\u4e2d\u83b7\u53d6name\u7684\u503c\u4f5c\u4e3akey\n   * \"#user.id\"\u5219\u4ece\u65b9\u6cd5\u53c2\u6570\u4e2d\u83b7\u53d6user\u5bf9\u8c61\u4e2d\u7684id\u4f5c\u4e3akey\n   */\n  String[] keys() default {};\n\n  /**\n   * key\u7684\u524d\u7f00\uff0c\u4e3a\u7a7a\u65f6\u53d6\u7c7b\u540d+\u65b9\u6cd5\u540d\n   */\n  String prefix() default \"\";\n}\n```\n\n### \u5207\u9762\u7c7b\n\n```java\n/**\n * \u5206\u5e03\u5f0f\u9501\u5207\u9762\u7c7b\n * @author \u53ea\u6709\u5f71\u5b50\n */\n@Slf4j\n@Aspect\n@Component\npublic class DistributedLockAspect {\n\n    @Resource\n    private RedissonClient redissonClient;\n    private static final ParameterNameDiscoverer PARAMETER_NAME_DISCOVERER = new DefaultParameterNameDiscoverer();\n\n    @Around(\"@annotation(distributedLock)\")\n    public Object around(ProceedingJoinPoint joinPoint,DistributedLock distributedLock) throws Throwable {\n        String redisKey = getRedisKey(joinPoint, distributedLock);\n        log.info(\"\u62fc\u63a5\u540e\u7684redisKey\u4e3a\uff1a\" + redisKey);\n        RLock lock = redissonClient.getLock(redisKey);\n        if (!lock.tryLock()) {\n            // \u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u5f02\u5e38\u7c7b\uff0c\u6f14\u793a\u7528RuntimeException\n            throw new RuntimeException(distributedLock.errorDesc());\n        }\n        // \u6267\u884c\u88ab\u5207\u9762\u7684\u65b9\u6cd5\n        try {\n            return joinPoint.proceed();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * \u52a8\u6001\u89e3\u5bc6\u53c2\u6570\uff0c\u62fc\u63a5redisKey\n     * @param joinPoint\n     * @param distributedLock  \u6ce8\u89e3\n     * @return\n     */\n    private String getRedisKey(ProceedingJoinPoint joinPoint, DistributedLock distributedLock) {\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\n        Method method = signature.getMethod();\n        EvaluationContext context = new MethodBasedEvaluationContext(TypedValue.NULL, method, joinPoint.getArgs(), PARAMETER_NAME_DISCOVERER);\n        StringBuilder redisKey = new StringBuilder();\n        // \u62fc\u63a5redis\u524d\u7f00\n        if (StringUtil.isNotBlank(distributedLock.prefix())) {\n            redisKey.append(distributedLock.prefix()).append(\":\");\n        } else {\n            // \u83b7\u53d6\u7c7b\u540d\n            String className = joinPoint.getTarget().getClass().getSimpleName();\n            // \u83b7\u53d6\u65b9\u6cd5\u540d\n            String methodName = joinPoint.getSignature().getName();\n            redisKey.append(className).append(\":\").append(methodName).append(\":\");\n        }\n\n        ExpressionParser parser = new SpelExpressionParser();\n        for (String key : distributedLock.keys()) {\n            // keys\u662f\u4e2aSpEL\u8868\u8fbe\u5f0f\n            Expression expression = parser.parseExpression(key);\n            Object value = expression.getValue(context);\n            redisKey.append(ObjectUtils.nullSafeToString(value));\n        }\n        return redisKey.toString();\n    }\n}\n```\n\n### \u7edf\u4e00\u5f02\u5e38\u5904\u7406\u7c7b\n\n```java\n/**\n * \u5168\u5c40\u5f02\u5e38\u5904\u7406\u7c7b\n * @author \u53ea\u6709\u5f71\u5b50\n */\n@RestControllerAdvice\npublic class ExceptionHandle {\n  @ExceptionHandler(Exception.class)\n  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n  public String sendErrorResponseSystem(Exception e) {\n    // \u8fd9\u91cc\u53ea\u662f\u6a21\u62df\u8fd4\u56de\u503c\uff0c\u5b9e\u9645\u9879\u76ee\u4e2d\u4e00\u822c\u90fd\u662f\u8fd4\u56de\u5c01\u88c5\u597d\u7684\u7edf\u4e00\u8fd4\u56de\u7c7b\n    return e.getMessage();\n  }\n}\n```\n\n> \u8fd8\u9700\u8981\u5c06redis\u914d\u7f6e\u8bfb\u5165\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4f53\u73b0\n\n## \u4f7f\u7528\u793a\u4f8b\n\n### 1. \u65e0\u53c2\u65b9\u6cd5\u6216\u8005\u9700\u8981\u52a0\u65b9\u6cd5\u7ea7\u7684\u9501\n\n```java\n@DistributedLock\n@GetMapping(\"/helloWorld\")\npublic void helloWorld() throws InterruptedException {\n  System.out.println(\"helloWorld\");\n  Thread.sleep(100000);\n}\n```\n\n\u8c03\u7528\u63a5\u53e3\uff1ahttp://localhost:8080/helloWorld\n\n```ruby\n\u62fc\u63a5\u540e\u7684redisKey\u4e3a\uff1aHelloController:helloWorld:\n```\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u65e0\u53c2\u65b9\u6cd5\u7684key\u4e3a`HelloController:helloWorld:`\uff0c\u5176\u4e2d`HelloController`\u4e3a\u7c7b\u540d\uff0c`helloWorld`\u4e3a\u65b9\u6cd5\u540d\uff0c\u56e0\u4e3a\u662f\u65e0\u53c2\u65b9\u6cd5\uff0c\u6240\u4ee5\u6ca1\u6709\u63a5\u4e0b\u6765\u7684\u53c2\u6570\u3002\n\n\u8fd9\u65f6\u5019\uff0c\u518d\u6b21\u8c03\u7528\u6539\u63a5\u53e3\uff0c\u5219\u4e0d\u4f1a\u518d\u8fdb\u53bb\u63a5\u53e3\uff0c\u4f1a\u88ab\u5207\u9762\u7c7b\u76f4\u63a5\u62e6\u622a\uff0c\u8fd4\u56de\u5982\u4e0b\u7ed3\u679c\uff1a\n\n![image-20231123222250866](https://pic.yupi.icu/5563/202311251831713.png)\n\n> \u5728\u5b9e\u9645\u751f\u4ea7\u4f7f\u7528\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u88ab\u7528\u6765\u5728\u81ea\u52a8\u4efb\u52a1\u4e0a\u6807\u6ce8\uff0c\u56e0\u4e3a\u5728\u96c6\u7fa4\u73af\u5883\u4e2d\u81ea\u52a8\u4efb\u52a1\u540c\u4e00\u65f6\u95f4\u4e00\u822c\u53ea\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u3002\n\n### 2. \u6709\u53c2\u6570\u65b9\u6cd5\uff0c\u5176\u4e2dkey\u4ecename\u4e2d\u53d6\u503c\n\n```java\n@DistributedLock(keys = \"#name\")\n@GetMapping(\"/hello1\")\npublic String hello1(String name) throws InterruptedException {\n  String s = \"hello \" + name;\n  System.out.println(s);\n  Thread.sleep(100000);\n  return s;\n}\n```\n\n\u8c03\u7528\u63a5\u53e3\u4e3a\uff1ahttp://localhost:8080/hello1?name=hurry\n\n```ruby\n\u62fc\u63a5\u540e\u7684redisKey\u4e3a\uff1aHelloController:hello1:hurry\n```\n\n\u8fd9\u65f6\u5019\uff0c\u518d\u901a\u8fc7`hurry`\u8fd9\u4e2a\u540d\u79f0\u8c03\u7528\u65f6\uff0c\u5c31\u4e0d\u4f1a\u518d\u5904\u7406\uff0c\u800cname\u6362\u4e3a`zhangsan`\u65f6\uff0c\u5219\u5c31\u80fd\u6b63\u5e38\u8fdb\u5165\u63a5\u53e3\u3002\n\n\u8fd9\u65f6\u5019redis\u4e2d\u7684key\u4e3a\n\n```bash\n> 127.0.0.1@6379 connected!\n> keys *\nHelloController:hello2:zhangsan\nHelloController:hello2:hurry\n```\n\n> \u5b9e\u9645\u4e1a\u52a1\u4e2d\uff0c\u9700\u8981\u6839\u636e\u4e0d\u540c\u7684\u53c2\u6570\u503c\u8fdb\u884c\u52a0\u9501\u7684\u573a\u666f\u3002\n\n### 3. \u6709\u53c2\u6570\u65b9\u6cd5\uff0c\u5176\u4e2dkey\u9700\u8981\u4eceuser\u5bf9\u8c61\u4e2d\u83b7\u53d6name\n\n```java\n@DistributedLock(keys = \"#user.name\")\n@GetMapping(\"/hello2\")\npublic String hello2(User user) throws InterruptedException {\n  String s = \"hello \" + user.getName();\n  System.out.println(s);\n  Thread.sleep(100000);\n  return s;\n}\n```\n\n> \u9700\u8981\u4ece\u67d0\u4e2a\u5bf9\u8c61\u4e2d\u83b7\u53d6\u6307\u5b9a\u5c5e\u6027\u4f5c\u4e3akey\u7684\u573a\u666f\n\n### 4.\u6709\u53c2\u6570\u65b9\u6cd5\uff0c\u5176\u4e2dkey\u4ecename\u4e0a\u53d6\u503c\u5e76\u6307\u5b9a\u524d\u7f00\n\n```java\n@DistributedLock(keys = \"#name\",prefix = \"testPrefix\")\n@GetMapping(\"/hello3\")\npublic String hello3(String name) throws InterruptedException {\n  String s = \"hello \" + name;\n  System.out.println(s);\n  Thread.sleep(100000);\n  return s;\n}\n```\n\n> \u9700\u8981\u6307\u5b9akey\u524d\u7f00\u7684\u573a\u666f\n\n## \u6700\u540e\n\n\u7531\u4e8e\u6587\u7ae0\u7bc7\u5e45\u539f\u56e0\uff0c\u5f88\u591a\u4e1c\u897f\u6ca1\u6709\u6df1\u5165\u7684\u8bb2\u89e3\uff0c\u4f46\u662f\u57fa\u4e8e\u4ee5\u4e0a\u4ee3\u7801\u57fa\u672c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u6ce8\u89e3\u7684\u5206\u5e03\u5f0f\u9501\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u5230\u5f00\u53d1\u6548\u7387\u3002\u5982\u679c\u8fd8\u6709\u5176\u4ed6\u9700\u8981\u62d3\u5c55\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u6ce8\u89e3\u7c7b\u589e\u52a0\u5c5e\u6027\u53ca\u5728\u5207\u9762\u7c7b\u4e2d\u901a\u8fc7\u4e0d\u540c\u7684\u5c5e\u6027\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\u6765\u5b9e\u73b0\u3002"}