{"data": "# RabbitMQ\u4e00\u6b7b\u4fe1\u961f\u5217\u4ecb\u7ecd\u548c\u5e94\u7528\n\n> \u4f5c\u8005\uff1a[\u5403\u904d\u5168\u56fd\u6c49\u5821](https://wx.zsxq.com/dweb2/index/footprint/585222581154244)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 24506\n\n\u4ecb\u7ecdRabbitMQ\u6b7b\u4fe1\u961f\u5217\u7684\u57fa\u672c\u6982\u5ff5\u548c\u5176\u5728\u9879\u76ee\u4e2d\u7684\u5e94\u7528\n\n## \u524d\u8a00\n\n\u6700\u8fd1\u5728\u505a\u4e00\u4e2aBI\u9879\u76ee\uff0c\u7528\u5230\u4e86RabbitMQ\u5f02\u6b65\u5316\u751f\u6210\u56fe\u8868\uff0c\u540c\u65f6\u8fd8\u6dfb\u52a0\u4e86\u6b7b\u4fe1\u961f\u5217\u5904\u7406\u65e0\u6cd5\u88ab\u6d88\u8d39\u8005\u6b63\u5e38\u6d88\u8d39\u7684\u6d88\u606f\u3002\u4e8e\u662f\u4fbf\u6709\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u4e0b\u9762\u7531\u6211\u5e26\u5927\u5bb6\u4ecb\u7ecdRabbitMQ\u7684\u6b7b\u4fe1\u961f\u5217\u548c\u5176\u5728\u9879\u76ee\u4e2d\u7684\u5e94\u7528\u5427\u3002\n\n## \u6b7b\u4fe1\u548c\u6b7b\u4fe1\u961f\u5217\u7684\u6982\u5ff5\n\n\u4ec0\u4e48\u662f\u6b7b\u4fe1\uff1f\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u65e0\u6cd5\u88ab\u6d88\u8d39\u548c\u5904\u7406\u7684\u6d88\u606f\u3002\u4e00\u822c\u751f\u4ea7\u8005\u5c06\u6d88\u606f\u6295\u9012\u5230broker\u6216\u8005queue\uff0c\u6d88\u8d39\u8005\u76f4\u63a5\u4ece\u4e2d\u53d6\u51fa\u6d88\u606f\u8fdb\u884c\u6d88\u8d39\u3002\u4f46\u6709\u65f6\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\u5bfc\u81f4\u6d88\u606f\u4e0d\u80fd\u88ab\u6d88\u8d39\uff0c\u5bfc\u81f4\u6d88\u606f\u79ef\u538b\u5728\u961f\u5217\u4e2d\uff0c\u8fd9\u6837\u7684\u6d88\u606f\u5982\u679c\u6ca1\u6709\u540e\u7eed\u7684\u5904\u7406\u5c31\u4f1a\u53d8\u6210\u6b7b\u4fe1\uff0c\u90a3\u4e48\u4e13\u95e8\u5b58\u653e\u6b7b\u4fe1\u7684\u961f\u5217\u5c31\u662f\u6b7b\u4fe1\u961f\u5217\u3002\n\n## \u4ec0\u4e48\u662f\u6b7b\u4fe1\u4ea4\u6362\u673a\uff1f\n\n\u90a3\u4e48\u4ec0\u4e48\u662f\u6b7b\u4fe1\u4ea4\u6362\u673a\u5462\uff1f\u6b7b\u4fe1\u4ea4\u6362\u673a\u662f\u6307\u4e13\u95e8\u5c06\u6b7b\u4fe1\u8def\u7531\u5230\u6b7b\u4fe1\u961f\u5217\u7684\u4ea4\u6362\u673a\u3002\n\n## \u4ea7\u751f\u6b7b\u4fe1\u7684\u539f\u56e0\n\n\u6839\u636e\u5b98\u65b9\u6587\u6863\uff0c\u6211\u4eec\u53d1\u73b0\u4e00\u822c\u6709\u4e09\u79cd\u573a\u666f\u4f1a\u4ea7\u751f\u6b7b\u4fe1\u3002\n\n![](https://pic.yupi.icu/5563/202402051847170.png)\n\n1. \u6d88\u606f\u8d85\u8fc7TTL\uff0c\u5373\u6d88\u606f\u8fc7\u671f\n2. \u6d88\u606f\u88abnack\u6216reject\uff0c\u4e14\u4e0d\u4e88\u91cd\u65b0\u5165\u961f\n3. \u961f\u5217\u8fbe\u5230\u6700\u5927\u957f\u5ea6\n\n## \u6b7b\u4fe1\u961f\u5217\u5b9e\u6218\u548c\u5e94\u7528\n\n\u6b7b\u4fe1\u961f\u5217\u7684\u5e94\u7528\u5e76\u4e0d\u96be\uff0c\u65e0\u975e\u5c31\u662f\u591a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4ea4\u6362\u673a\u3001routingKey\u548c\u961f\u5217\u7f62\u4e86\u3002\u5728\u58f0\u660e\u666e\u901a\u961f\u5217\u65f6\u4f20\u5165Map\u53c2\u6570\uff0c\u5f80Map\u4e2dput\u6b7b\u4fe1\u961f\u5217\u540d\u79f0\u3001\u6b7b\u4fe1routingKey\u3001\u6d88\u606fTTL\u7b49\u53c2\u6570\u5373\u53ef\u5b8c\u6210\u6b7b\u4fe1\u81ea\u52a8\u6295\u9012\u5230\u6b7b\u4fe1\u961f\u5217\u7684\u6d41\u7a0b\u3002\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u5373\u53ef\u7ed1\u5b9a\u666e\u901a\u961f\u5217\u548c\u6b7b\u4fe1\u4ea4\u6362\u673a\u4e86\uff0c\u800c\u4e14\u8fd8\u80fd\u8bbe\u7f6eroutingKey\u548c\u961f\u5217\u957f\u5ea6\u7b49\u53c2\u6570\uff0c\u65e0\u9700\u50cf\u4f20\u7edf\u7684\u90a3\u6837\u901a\u8fc7channel\u7ed1\u5b9a\u3002\n\n```java\nMap<String, Object> arguments = new HashMap<>(); // \u8fc7\u671f\u65f6\u95f4 arguments.put(\"x-message-ttl\", 10000); // \u6b63\u5e38\u961f\u5217\u8bbe\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a arguments.put(\"x-dead-letter-exchange\", DEAD_EXCHANGE); // \u8bbe\u7f6e\u6b7b\u4fe1routingKey arguments.put(\"x-dead-letter-routing-key\", \"lisi\"); // \u8bbe\u7f6e\u6b63\u5e38\u961f\u5217\u7684\u957f\u5ea6\u9650\u5236 arguments.put(\"x-max-length\", 10);\n```\n\n\u6d41\u7a0b\u56fe\uff1a\n\n![](https://pic.yupi.icu/5563/202402051847720.png)\n\n\u751f\u4ea7\u8005Producer\uff1a\n\npublic class Producer { // \u666e\u901a\u4ea4\u6362\u673a\u540d\u79f0 public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n\n```java\npublic static void main(String[] args) throws IOException {\n    Channel channel = RabbitMQUtils.getChannel();\n    //\u6b7b\u4fe1\u6d88\u606f \u8bbe\u7f6eTTL\u65f6\u95f4\n    AMQP.BasicProperties properties = new AMQP.BasicProperties()\n            .builder().expiration(\"10000\").build();\n\n    // \u5ef6\u8fdf\u6d88\u606f\n    for (int i = 0;i < 10;i++) {\n        String message = i + \"info\";\n        channel.basicPublish(NORMAL_EXCHANGE, \"zhangsan\", properties, message.getBytes());\n    }\n}\n```\n\n}\n\n\u666e\u901a\u961f\u5217\u6d88\u8d39\u8005C1\uff1a\n\n```java\npublic class Consumer01 {\n    // \u666e\u901a\u4ea4\u6362\u673a\u540d\u79f0\n    public static final String NORMAL_EXCHANGE = \"normal_exchange\";\n    // \u6b7b\u4fe1\u4ea4\u6362\u673a\u540d\u79f0\n    public static final String DEAD_EXCHANGE = \"dead_exchange\";\n    // \u666e\u901a\u961f\u5217\u540d\u79f0\n    public static final String NORMAL_QUEUE = \"normal_queue\";\n    // \u6b7b\u4fe1\u961f\u5217\u540d\u79f0\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException {\n        Channel channel = RabbitMQUtils.getChannel();\n        // \u58f0\u660e\u6b7b\u4fe1\u548c\u666e\u901a\u4ea4\u6362\u673a\uff0c\u7c7b\u578b\u4e3adirect\n        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);\n        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);\n        // \u58f0\u660e\u666e\u901a\u961f\u5217\n        Map<String, Object> arguments = new HashMap<>();\n        // \u8fc7\u671f\u65f6\u95f4\n        arguments.put(\"x-message-ttl\", 10000);\n        // \u6b63\u5e38\u961f\u5217\u8bbe\u7f6e\u6b7b\u4fe1\u4ea4\u6362\u673a\n        arguments.put(\"x-dead-letter-exchange\", DEAD_EXCHANGE);\n        // \u8bbe\u7f6e\u6b7b\u4fe1routingKey\n        arguments.put(\"x-dead-letter-routing-key\", \"lisi\");\n        // \u8bbe\u7f6e\u6b63\u5e38\u961f\u5217\u7684\u957f\u5ea6\u9650\u5236\n        arguments.put(\"x-max-length\", 10);\n\n        // \u58f0\u660e\u666e\u901a\u961f\u5217\n        channel.queueDeclare(NORMAL_QUEUE, false, false, false, arguments);\n        // \u58f0\u660e\u6b7b\u4fe1\u961f\u5217\n        channel.queueDeclare(DEAD_QUEUE, false, false, false, null);\n\n        channel.queueBind(NORMAL_QUEUE, NORMAL_EXCHANGE, \"zhangsan\");\n        channel.queueBind(DEAD_QUEUE, DEAD_EXCHANGE, \"lisi\");\n        System.out.println(\"consumer01\u7b49\u5f85\u63a5\u6536\u6d88\u606f\");\n\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            String msg = new String(message.getBody(), \"UTF-8\");\n            if (msg.equals(\"info5\")) {\n                System.out.println(\"consumer01\u63a5\u6536\u7684\u6d88\u606f\uff1a\" + new String(message.getBody()));\n                System.out.println(msg + \"\uff1a\u6b64\u6d88\u606f\u662f\u88ab\u62d2\u7edd\u7684\");\n                channel.basicReject(message.getEnvelope().getDeliveryTag(), false); //\u62d2\u7edd\u6b64\u6d88\u606f\u5e76\u4e0d\u653e\u56de\u666e\u901a\u961f\u5217\n            } else {\n                System.out.println(\"consumer01\u63a5\u6536\u7684\u6d88\u606f\uff1a\" + new String(message.getBody()));\n                channel.basicAck(message.getEnvelope().getDeliveryTag(), false);\n            }\n        };\n\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"C1\u53d6\u6d88\u6d88\u606f\");\n        };\n        channel.basicConsume(NORMAL_QUEUE, false, deliverCallback, cancelCallback);\n    }\n}\n```\n\n\u6b7b\u4fe1\u961f\u5217\u6d88\u8d39\u8005C2\n\n```java\npublic class Consumer02 {\n    // \u6b7b\u4fe1\u961f\u5217\u540d\u79f0\n    public static final String DEAD_QUEUE = \"dead_queue\";\n\n    public static void main(String[] args) throws IOException {\n        Channel channel = RabbitMQUtils.getChannel();\n        System.out.println(\"consumer02\u7b49\u5f85\u63a5\u6536\u6d88\u606f\");\n        DeliverCallback deliverCallback = (consumerTag, message) -> {\n            System.out.println(\"consumer02\u63a5\u6536\u7684\u6d88\u606f\uff1a\" + new String(message.getBody()));\n        };\n\n        CancelCallback cancelCallback = consumerTag -> {\n            System.out.println(\"C2\u53d6\u6d88\u6d88\u606f\");\n        };\n        channel.basicConsume(DEAD_QUEUE, true, deliverCallback, cancelCallback);\n    }\n}\n```\n\n\u4f9d\u6b21\u542f\u52a8\u751f\u4ea7\u8005\uff0c\u548c\u4e24\u4e2a\u6d88\u8d39\u8005\uff0c\u5e76\u505c\u6389\u666e\u901a\u961f\u5217\u7684\u6d88\u8d39\u8005\uff0c\u6211\u4eec\u53d1\u73b0\u751f\u4ea7\u8005\u53d1\u9001\u7684\u6d88\u606f\u88ab\u6b7b\u4fe1\u961f\u5217\u6d88\u8d39\u8005C2\u7ed9\u63a5\u6536\u4e86\u3002\n\n![](https://pic.yupi.icu/5563/202402051847015.png)\n\n![](https://pic.yupi.icu/5563/202402051848349.png)\n\n![](https://pic.yupi.icu/5563/202402051848550.png)\n\n> \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u5728\u666e\u901a\u961f\u5217\u4e2d\u8bbe\u7f6e\u4e86\u6d88\u606f\u7684TTL\u4e3a5s\uff0c\u4f46\u662f\u6211\u53c8\u5728\u751f\u4ea7\u8005\u8bbe\u7f6e\u53d1\u9001\u7684\u6d88\u606fTTL\u4e3a10s\uff0c\u90a3\u4e48RabbitMQ\u4f1a\u4ee5\u54ea\u4e2a\u4e3a\u51c6\u5462\uff1f\u5176\u5b9eRabbitMQ\u4f1a\u4ee5\u8f83\u77ed\u7684TTL\u4e3a\u51c6\n\n## BI\u9879\u76ee\u6dfb\u52a0\u6b7b\u4fe1\u961f\u5217\n\n### \u58f0\u660e\u4ea4\u6362\u673a\u3001\u961f\u5217\u548croutingKey\u7684\u914d\u7f6e\u7c7b\n\n```java\n@Configuration\npublic class TtlQueueConfig {\n    private final String COMMON_EXCHANGE = \"bi_common_exchange\"; // \u666e\u901a\u4ea4\u6362\u673a\u540d\u79f0\n    private final String COMMON_QUEUE = \"bi_common_queue\"; // \u666e\u901a\u961f\u5217\u540d\u79f0\n    private final String DEAD_LETTER_EXCHANGE = \"bi_dead_letter_exchange\"; // \u6b7b\u4fe1\u4ea4\u6362\u673a\u540d\u79f0\n    private final String DEAD_LETTER_QUEUE = \"bi_dead_letter_queue\"; // \u6b7b\u4fe1\u961f\u5217\u540d\u79f0\n    private final String COMMON_ROUTINGKEY = \"bi_common_routingKey\"; // \u666e\u901aroutingKey\n    private final String DEAD_LETTER_ROUTINGKEY = \"bi_dead_letter_routingKey\"; // \u6b7b\u4fe1routingKey\n\n    // \u666e\u901a\u4ea4\u6362\u673a\n    @Bean(\"commonExchange\")\n    public DirectExchange commonExchange() {\n        return new DirectExchange(COMMON_EXCHANGE);\n    }\n\n    // \u6b7b\u4fe1\u4ea4\u6362\u673a\n    @Bean(\"deadLetterExchange\")\n    public DirectExchange deadLetterExchange() {\n        return new DirectExchange(DEAD_LETTER_EXCHANGE);\n    }\n\n    // \u666e\u901a\u961f\u5217\n    @Bean(\"commonQueue\")\n    public Queue commonQueue() {\n        Map<String, Object> map = new HashMap<>(3);\n        map.put(\"x-message-ttl\", 20000);\n        map.put(\"x-dead-letter-exchange\", DEAD_LETTER_EXCHANGE);\n        map.put(\"x-dead-letter-routing-key\", DEAD_LETTER_ROUTINGKEY);\n        return QueueBuilder.durable(COMMON_QUEUE).withArguments(map).build();\n    }\n\n    // \u6b7b\u4fe1\u961f\u5217\n    @Bean(\"deadLetterQueue\")\n    public Queue deadLetterQueue() {\n        return QueueBuilder.durable(DEAD_LETTER_QUEUE).build();\n    }\n\n    @Bean\n    public Binding commonQueueBindingCommonExchange(@Qualifier(\"commonQueue\") Queue commonQueue,\n                                                    @Qualifier(\"commonExchange\") DirectExchange commonExchange) {\n        return BindingBuilder.bind(commonQueue).to(commonExchange).with(COMMON_ROUTINGKEY);\n    }\n\n    @Bean\n    public Binding deadQueueBindingDeadExchange(@Qualifier(\"deadLetterQueue\") Queue deadLetterQueue,\n                                                @Qualifier(\"deadLetterExchange\") DirectExchange deadLetterExchange){\n        return BindingBuilder.bind(deadLetterQueue).to(deadLetterExchange).with(DEAD_LETTER_ROUTINGKEY);\n    }\n}\n```\n\n### \u666e\u901a\u6d88\u8d39\u8005\uff08\u8d1f\u8d23\u5f02\u6b65\u751f\u6210\u56fe\u8868\u4fe1\u606f\uff09\n\n```java\n@Configuration\npublic class TtlQueueConfig {\n    private final String COMMON_EXCHANGE = \"bi_common_exchange\"; // \u666e\u901a\u4ea4\u6362\u673a\u540d\u79f0\n    private final String COMMON_QUEUE = \"bi_common_queue\"; // \u666e\u901a\u961f\u5217\u540d\u79f0\n    private final String DEAD_LETTER_EXCHANGE = \"bi_dead_letter_exchange\"; // \u6b7b\u4fe1\u4ea4\u6362\u673a\u540d\u79f0\n    private final String DEAD_LETTER_QUEUE = \"bi_dead_letter_queue\"; // \u6b7b\u4fe1\u961f\u5217\u540d\u79f0\n    private final String COMMON_ROUTINGKEY = \"bi_common_routingKey\"; // \u666e\u901aroutingKey\n    private final String DEAD_LETTER_ROUTINGKEY = \"bi_dead_letter_routingKey\"; // \u6b7b\u4fe1routingKey\n\n    // \u666e\u901a\u4ea4\u6362\u673a\n    @Bean(\"commonExchange\")\n    public DirectExchange commonExchange() {\n        return new DirectExchange(COMMON_EXCHANGE);\n    }\n\n    // \u6b7b\u4fe1\u4ea4\u6362\u673a\n    @Bean(\"deadLetterExchange\")\n    public DirectExchange deadLetterExchange() {\n        return new DirectExchange(DEAD_LETTER_EXCHANGE);\n    }\n\n    // \u666e\u901a\u961f\u5217\n    @Bean(\"commonQueue\")\n    public Queue commonQueue() {\n        Map<String, Object> map = new HashMap<>(3);\n        map.put(\"x-message-ttl\", 20000);\n        map.put(\"x-dead-letter-exchange\", DEAD_LETTER_EXCHANGE);\n        map.put(\"x-dead-letter-routing-key\", DEAD_LETTER_ROUTINGKEY);\n        return QueueBuilder.durable(COMMON_QUEUE).withArguments(map).build();\n    }\n\n    // \u6b7b\u4fe1\u961f\u5217\n    @Bean(\"deadLetterQueue\")\n    public Queue deadLetterQueue() {\n        return QueueBuilder.durable(DEAD_LETTER_QUEUE).build();\n    }\n\n    @Bean\n    public Binding commonQueueBindingCommonExchange(@Qualifier(\"commonQueue\") Queue commonQueue,\n                                                    @Qualifier(\"commonExchange\") DirectExchange commonExchange) {\n        return BindingBuilder.bind(commonQueue).to(commonExchange).with(COMMON_ROUTINGKEY);\n    }\n\n    @Bean\n    public Binding deadQueueBindingDeadExchange(@Qualifier(\"deadLetterQueue\") Queue deadLetterQueue,\n                                                @Qualifier(\"deadLetterExchange\") DirectExchange deadLetterExchange){\n        return BindingBuilder.bind(deadLetterQueue).to(deadLetterExchange).with(DEAD_LETTER_ROUTINGKEY);\n    }\n}\n\n\u666e\u901a\u6d88\u8d39\u8005\uff08\u8d1f\u8d23\u5f02\u6b65\u751f\u6210\u56fe\u8868\uff09\n\n@Component\n@Slf4j\npublic class BIMessageConsumer {\n    @Resource\n    private ChartService chartService;\n\n    @Resource\n    private RabbitTemplate rabbitTemplate;\n\n    @Resource\n    private AIManager aiManager;\n\n    @Resource\n    RedisTemplate<String, Object> redisTemplate;\n\n    // \u5236\u5b9a\u6d88\u8d39\u8005\u76d1\u542c\u54ea\u4e2a\u961f\u5217\u548c\u6d88\u606f\u786e\u8ba4\u673a\u5236\n    @SneakyThrows\n    @RabbitListener(queues = {\"bi_common_queue\"}, ackMode = \"MANUAL\")\n    public void receiveMessage(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag) {\n        log.info(\"receiveMessage is {}\", message);\n        if(StringUtils.isBlank(message)) {\n            // \u5982\u679c\u5931\u8d25\uff0c\u6d88\u606f\u62d2\u7edd\n            channel.basicNack(deliveryTag, false, false);\n            log.info(\"\u6d88\u606f\u4e3a\u7a7a\u62d2\u7edd\u63a5\u6536\");\n            log.info(\"\u6b64\u6d88\u606f\u6b63\u5728\u88ab\u8f6c\u53d1\u5230\u6b7b\u4fe1\u961f\u5217\u4e2d\");\n        }\n\n        long chartId = Long.parseLong(message);\n        Chart chart = chartService.getById(chartId);\n        if (chart == null) {\n            channel.basicNack(deliveryTag, false, false);\n            log.info(\"\u56fe\u6807\u4e3a\u7a7a\u62d2\u7edd\u63a5\u6536\");\n            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR, \"\u56fe\u8868\u4e3a\u7a7a\");\n        }\n\n        // \u5148\u4fee\u6539\u56fe\u8868\u4efb\u52a1\u72b6\u6001\u4e3a\u201c\u6267\u884c\u4e2d\u201d\u3002\u7b49\u6267\u884c\u6210\u529f\u540e\uff0c\u4fee\u6539\u4e3a\u201c\u5df2\u5b8c\u6210\u201d\u3001\u4fdd\u5b58\u6267\u884c\u7ed3\u679c\uff1b\u6267\u884c\u5931\u8d25\u540e\uff0c\u72b6\u6001\u4fee\u6539\u4e3a\u201c\u5931\u8d25\u201d\uff0c\u8bb0\u5f55\u4efb\u52a1\u5931\u8d25\u4fe1\u606f\u3002\n        Chart updateChart = new Chart();\n        updateChart.setId(chart.getId());\n        updateChart.setStatus(\"running\");\n        boolean b = chartService.updateById(updateChart);\n        if (!b) {\n            channel.basicNack(deliveryTag, false, false);\n            handlerChartUpdateError(chart.getId(), \"\u66f4\u65b0\u56fe\u8868\u6267\u884c\u72b6\u6001\u5931\u8d25\");\n            return;\n        }\n        // \u8c03\u7528AI\n        String result = aiManager.doChat(CommonConstant.BI_MODEL_ID, buildUserInput(chart));\n        String[] splits = result.split(\"\u3010\u3010\u3010\u3010\u3010\");\n        if (splits.length < 3) {\n            channel.basicNack(deliveryTag, false, false);\n            handlerChartUpdateError(chart.getId(), \"AI\u751f\u6210\u9519\u8bef\");\n            return;\n        }\n        String genChart = splits[1].trim();\n        String genResult = splits[2].trim();\n        Chart updateChartResult = new Chart();\n        updateChartResult.setId(chart.getId());\n        updateChartResult.setGenChart(genChart);\n        updateChartResult.setGenResult(genResult);\n        updateChartResult.setStatus(\"succeed\");\n        boolean updateResult = chartService.updateById(updateChartResult);\n        if (!updateResult) {\n            channel.basicNack(deliveryTag, false, false);\n            handlerChartUpdateError(chart.getId(), \"\u66f4\u65b0\u56fe\u8868\u6210\u529f\u72b6\u6001\u5931\u8d25\");\n        }\n        Long userId = chartService.queryUserIdByChartId(chartId);\n        String myChartId = String.format(\"lingxibi:chart:list:%s\", userId);\n        redisTemplate.delete(myChartId);\n\n        // \u5982\u679c\u4efb\u52a1\u6267\u884c\u6210\u529f\uff0c\u624b\u52a8\u6267\u884cack\n        channel.basicAck(deliveryTag, false);\n    }\n\n\n    private void handlerChartUpdateError(long chartId, String execMessage) {\n        Chart updateChartResult = new Chart();\n        updateChartResult.setId(chartId);\n        updateChartResult.setStatus(\"failed\");\n        updateChartResult.setExecMessage(execMessage);\n        boolean updateResult = chartService.updateById(updateChartResult);\n        if (!updateResult) {\n            log.error(\"\u66f4\u65b0\u56fe\u8868\u5931\u8d25\u72b6\u6001\u5931\u8d25\" + chartId + \",\" + execMessage);\n        }\n    }\n\n    /**\n     * \u6784\u5efa\u7528\u6237\u8f93\u5165\n     * @param chart\n     * @return\n     */\n    private String buildUserInput(Chart chart) {\n        String goal = chart.getGoal();\n        String chartType = chart.getChartType();\n        String csvData = chart.getChartData();\n\n        // \u6784\u9020\u7528\u6237\u8f93\u5165\n        StringBuilder userInput = new StringBuilder();\n        userInput.append(\"\u5206\u6790\u9700\u6c42\uff1a\").append(\"\\n\");\n        // \u62fc\u63a5\u5206\u6790\u76ee\u6807\n        String userGoal = goal;\n        if (StringUtils.isNotBlank(chartType)) {\n            userGoal += \",\u8bf7\u4f7f\u7528\" + chartType;\n        }\n        userInput.append(userGoal).append(\"\\n\");\n        userInput.append(\"\u539f\u59cb\u6570\u636e\uff1a\").append(\"\\n\");\n        // \u538b\u7f29\u540e\u7684\u6570\u636e\n\n        userInput.append(csvData).append(\"\\n\");\n        return userInput.toString();\n    }\n}\n```\n\n### \u6b7b\u4fe1\u961f\u5217\u6d88\u8d39\u8005\uff08\u8d1f\u8d23\u5904\u7406\u6b7b\u4fe1\uff09\n\n\u6536\u5230\u6b7b\u4fe1\u540e\u6211\u662f\u76f4\u63a5\u786e\u8ba4\u4e86\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53ef\u80fd\u4e0d\u597d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u6362\u6210\u5176\u4ed6\u65b9\u5f0f\u6bd4\u5982\u91cd\u65b0\u5165\u961f\uff0c\u6216\u8005\u5199\u5165\u6570\u636e\u5e93\u5e76\u6253\u4e0a\u65e5\u5fd7\u7b49\u7b49\u3002\n\n```java\n@Component\n@Slf4j\npublic class TtlQueueConsumer {\n    @Resource\n    BIMessageProducer biMessageProducer;\n\n    @SneakyThrows\n    @RabbitListener(queues = \"bi_dead_letter_queue\", ackMode = \"MANUAL\")\n    public void doTTLMessage(String message, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long deliveryTag) {\n        log.info(\"\u5df2\u7ecf\u63a5\u53d7\u5230\u6b7b\u4fe1\u6d88\u606f\uff1a{}\", message);\n        biMessageProducer.sendMessage(message);\n        channel.basicAck(deliveryTag, false);\n    }\n}\n```\n\n\u5982\u679c\u6211\u7684\u6587\u7ae0\u5bf9\u4f60\u6709\u5e2e\u52a9\u7684\u8bdd\uff0c\u4e0d\u59a8\u7ed9\u6211\u70b9\u4e2a\u8d5e\u5457\uff0c\u6211\u4f1a\u6301\u7eed\u5e26\u6765\u4e0d\u4e00\u6837\u7684\u5185\u5bb9\u3002\u5982\u679c\u5bf9Java\u76f8\u5173\u77e5\u8bc6\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u5173\u6ce8\u6211\uff0c\u5e26\u4f60\u8d70\u8fdbJava\u7684\u4e16\u754c\u3002"}