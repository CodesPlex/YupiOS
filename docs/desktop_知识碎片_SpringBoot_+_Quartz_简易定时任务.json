{"data": "# SpringBoot + Quartz \u7b80\u6613\u5b9a\u65f6\u4efb\u52a1\n\n> \u4f5c\u8005\uff1a[A\u8fbe\u8fbe](https://music.163.com/#/user/home?id=1711732324)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 19158\n\nspringboot\u9879\u76ee\u4f7f\u7528Quartz \u5b9e\u73b0\u7b80\u6613\u5b9a\u65f6\u4efb\u52a1 \u76f8\u6bd4\u8f83@scheduled \u6ce8\u89e3 \u66f4\u5177\u7075\u6d3b\u6027 \u540e\u7eed\u53ef\u5b9e\u73b0\u5b9a\u65f6\u4efb\u52a1\u7684\u589e\u5220\u6539\u67e5\u7b49\u5f85 \u5b9e\u73b0\u52a8\u6001\u5b9a\u65f6\u4efb\u52a1\n\n**springboot+Quartz \u5b9e\u73b0\u7b80\u6613\u5b9a\u65f6\u4efb\u52a1\uff08\u914d\u7f6e\u5728yml\u6587\u4ef6\u4e2d\uff09**\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\u7531\u4ee5\u4e0b\u4e09\u4e2a\u90e8\u5206\u6784\u6210\uff1a\n\n- Job\uff1a\u6267\u884c\u5b9e\u9645\u4efb\u52a1\u7684\u5bf9\u8c61\u3002\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u88ab\u6267\u884c\u7684\u65b9\u6cd5\u6216\u662f\u7ee7\u627f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u5e76\u5b9e\u73b0\u5b83\u7684\u62bd\u8c61\u65b9\u6cd5\u3002\n- Trigger\uff1a\u89c4\u5b9a\u4efb\u52a1\u4f55\u65f6\u88ab\u6267\u884c\u7684\u5bf9\u8c61\u3002\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u5b83\u7684\u6267\u884c\u65f6\u95f4\u3001\u6267\u884c\u9891\u7387\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u53c2\u6570\u3002\n- Scheduler\uff1a\u7ba1\u7406\u548c\u8c03\u5ea6 Job \u548c Trigger \u7684\u5bf9\u8c61\u3002\u5b83\u8d1f\u8d23\u5c06\u4efb\u52a1\u4e0e\u89e6\u53d1\u5668\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5e76\u6309\u7167\u6307\u5b9a\u7684\u65f6\u95f4\u8868\u6267\u884c\u4efb\u52a1\u3002\n\n------\n\n- **\u9996\u5148\u5bfc\u5165Quartz\u4f9d\u8d56**\n\n```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-quartz</artifactId>\n    <version>2.2.3</version>\n</dependency>\n```\n\n- **\u7136\u540e\u521b\u5efa\u6211\u4eec\u7684\u5b9a\u65f6Job \uff1a\u6b64\u65f6\u6f14\u793a\u4e00\u4e2a\u5b9a\u65f6\u63d2\u5165\u6570\u636e\u7684\u4efb\u52a1 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5b9a\u65f6\u8c03\u7528\u4e00\u4e2amapper\u4e2d\u7684\u65b9\u6cd5**\n\n```java\n@Slf4j\npublic class InsertJob implements Job {\n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        System.out.println(new Date());\n        System.out.println(\"\u6267\u884c\u5b9a\u65f6\u4efb\u52a1\");\n        MeterReadingMonthMapper meterReadingMonthMapper = SpringContextHolder.getBean(MeterReadingMonthMapper.class);\n        try {\n            meterReadingMonthMapper.insertLastMonthlyWaterConsumption();\n            System.out.println(\"\u5b9a\u65f6\u4efb\u52a1\u6267\u884c\u6210\u529f\uff01\");\n        }catch (Exception e){\n            throw new JobExecutionException(\"\u5b9a\u65f6\u4efb\u52a1\u6267\u884c\u5931\u8d25\uff01\");\n        }\n    }\n}\n```\n\n**\u6ce8\u610f\uff1a\u4e0a\u9762\u6ca1\u6709\u7528\u6ce8\u89e3@Autowired\u6216 @Resouce\u5f15\u5165bean \u56e0\u4e3a\u8fd9\u6837\u884c\u4e0d\u901a\uff0c\u56e0\u4e3a\u5b9a\u65f6\u4efb\u52a1\u7684 Job \u5bf9\u8c61\u5b9e\u4f8b\u5316\u7684\u8fc7\u7a0b\u662f\u901a\u8fc7 Quartz \u5185\u90e8\u81ea\u5df1\u5b8c\u6210\u7684\uff0c\u4f46\u662f\u6211\u4eec\u901a\u8fc7 Spring \u8fdb\u884c\u6ce8\u5165\u7684 Bean \u5374\u662f\u7531 Spring \u5bb9\u5668\u7ba1\u7406\u7684\uff0cQuartz \u5185\u90e8\u65e0\u6cd5\u611f\u77e5\u5230 Spring \u5bb9\u5668\u7ba1\u7406\u7684 Bean\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u5728\u521b\u5efa Job \u7684\u65f6\u5019\u5c31\u7ed9\u88c5\u914d\u8fdb\u53bb\u3002\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2aSpringContextHolder\u5de5\u5177\u7c7b\u52a9\u624b\u5e2e\u6211\u4eec\u5b8c\u6210\u3002**\n\n- **\u7136\u540e\u65b0\u5efaSpringContextHolder\u5de5\u5177\u7c7b**\n\n```java\n/**\n * \u968f\u65f6\u53d6spring bean\u7684\u5de5\u5177\u7c7b\n */\n@Component\npublic class SpringContextHolder implements ApplicationContextAware {\n\n   private static ApplicationContext applicationContext;\n   \n    /**\n     * \u5b9e\u73b0ApplicationContextAware\u63a5\u53e3\u7684context\u6ce8\u5165\u51fd\u6570, \u5c06\u5176\u5b58\u5165\u9759\u6001\u53d8\u91cf.\n     */\n    public void setApplicationContext(ApplicationContext applicationContext) {\n        SpringContextHolder.applicationContext = applicationContext;\n    }\n\n    /**\n     * \u53d6\u5f97\u5b58\u50a8\u5728\u9759\u6001\u53d8\u91cf\u4e2d\u7684ApplicationContext.\n     */\n    public static ApplicationContext getApplicationContext() {\n        checkApplicationContext();\n        return applicationContext;\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfApplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(String name) {\n        checkApplicationContext();\n        return (T) applicationContext.getBean(name);\n    }\n\n    /**\n     * \u4ece\u9759\u6001\u53d8\u91cfApplicationContext\u4e2d\u53d6\u5f97Bean, \u81ea\u52a8\u8f6c\u578b\u4e3a\u6240\u8d4b\u503c\u5bf9\u8c61\u7684\u7c7b\u578b.\n     * \u5982\u679c\u6709\u591a\u4e2aBean\u7b26\u5408Class, \u53d6\u51fa\u7b2c\u4e00\u4e2a.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getBean(Class<T> clazz) {\n        checkApplicationContext();\n        Map beanMaps = applicationContext.getBeansOfType(clazz);\n        if (beanMaps!=null && !beanMaps.isEmpty()) {\n            return (T) beanMaps.values().iterator().next();\n        } else{\n            return null;\n        }\n    }\n    /**\n     * spring\u5bb9\u5668\u662f\u5426\u5305\u542b\u8be5\u5b9e\u4f8b\n     * @param name\n     * @return\n     */\n    public static boolean containsBean(String name) {\n       return applicationContext.containsBean(name);\n    }\n\n    private static void checkApplicationContext() {\n        if (applicationContext == null) {\n            throw new IllegalStateException(\"applicaitonContext\u672a\u6ce8\u5165,\u8bf7\u5728applicationContext.xml\u4e2d\u5b9a\u4e49SpringContextHolder\");\n        }\n    }\n}\n```\n\n- **\u521b\u5efa\u8c03\u5ea6\u5668scheduler\u4e0e\u89e6\u53d1\u5668trigger**\n\n**\u9644\uff1a**[Cron - \u5728\u7ebfCron\u8868\u8fbe\u5f0f\u751f\u6210\u5668 (](http://cron.ciding.cc/)<ciding.cc>[)](http://cron.ciding.cc/)\n\n```java\npublic class InsertRunner extends Thread{\n\n    @Override\n    public void run() {\n        try {\n            // 1\u3001\u521b\u5efaScheduler\uff08\u8c03\u5ea6\u5668\uff09\n            SchedulerFactory schedulerFactory = new StdSchedulerFactory();\n            Scheduler scheduler = schedulerFactory.getScheduler();\n            Trigger trigger = TriggerBuilder.newTrigger()\n                    .withIdentity(\"everymonth\", \"myInsert\") // \u89e6\u53d1\u5668\u540d\u79f0\u548c\u5206\u7ec4\u81ea\u5b9a\u4e49\n                    .withSchedule(CronScheduleBuilder.cronSchedule(\"0/5 * * * * ? \")) // \u5b9a\u65f6\uff1a\u6b64\u5904cron\u8868\u8fbe\u5f0f\u6bcf5s\u6267\u884c\u4e00\u6b21\n                    .build();\n                TriggerKey key = trigger.getKey();\n                JobDetail job = JobBuilder.newJob(InsertJob.class)\n                        .withIdentity(key.getName(), key.getGroup())\n                        .build();\n                //4\u3001\u5c06Job\u548cTrigger\u4ea4\u7ed9Scheduler\u8c03\u5ea6\n                scheduler.scheduleJob(job, trigger);\n            // 5\u3001\u542f\u52a8Scheduler\n            scheduler.start();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n\n- **\u914d\u7f6e\u5728\u9879\u76ee\u542f\u52a8\u65f6\u542f\u52a8\uff1a\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u7f16\u5199\u5728\u540c\u5305\u4e0b\u7684service\u5b9e\u73b0\u7c7b\u4e2d**\n\n```java\n@Value(\"${task.insertTask.insertMonth}\")\nprivate String insertMonth;\n@PostConstruct\npublic void init() throws Exception {\n    // \u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\n    if (insertMonth.equals(\"1\")) {\n        Thread thread = new Thread(new InsertRunner());\n        thread.start();\n    }\n}\n```\n\n- **\u6839\u636e\u4e0a\u8ff0\uff0c\u5c06\u914d\u7f6e\u9879\u76ee\u542f\u52a8\u914d\u7f6e\u5728application.yml\u4e2d \uff0c\u503c\u4e3a1\u5219\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1**\n\n```java\ntask:\n  insertTask:\n    insertMonth: 1 #\u662f\u5426\u5f00\u542f\u5b9a\u65f6\u4efb\u52a1\n```\n\n- **\u6700\u540e\uff0c\u542f\u52a8\u9879\u76ee\uff0c\u5927\u529f\u544a\u6210\uff01**"}