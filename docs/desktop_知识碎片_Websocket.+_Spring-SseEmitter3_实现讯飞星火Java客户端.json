{"data": "# Websocket.+ Spring-SseEmitter3 \u5b9e\u73b0\u8baf\u98de\u661f\u706bJava\u5ba2\u6237\u7aef\n\n> \u4f5c\u8005\uff1a[\u6478\u9c7c\u6446\u70c2\u5c0f\u80fd\u624b](http://blog.dhx.icu)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 1083\n\n\u901a\u8fc7websocket+SseEmitter\u5b9e\u73b0\u8baf\u98de\u661f\u706bJava\u5ba2\u6237\u7aef , \u4e00\u952eCV\u5373\u53ef\u63a5\u5165springboot\u9879\u76ee\u4f7f\u7528\n\n\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u8bb0\u5f55\u5b8c\u6210 \u5bf9\u63a5\u8baf\u98de\u661f\u706b\u7684Java \u5ba2\u6237\u7aef (\u9002\u914d\u4e8eSpring) , \u65b9\u4fbf\u5728\u4e4b\u540e\u9879\u76ee\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u5feb\u901f\u63a5\u5165\n\n- \u661f\u706b\u8ba4\u77e5\u5927\u6a21\u578bWeb API\u6587\u6863 : [https://www.xfyun.cn/doc/spark/Web.html#_1-%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E](https://www.xfyun.cn/doc/spark/Web.html#_1-\u63a5\u53e3\u8bf4\u660e)\n\n## websocket\n\n### \u7b80\u4ecb\n\n\u5728\u6b64\u4e4b\u524d\u6211\u4eec\u5148\u6765\u7b80\u5355\u4e86\u89e3\u4e00\u4e0bwebsocket\u534f\u8bae\n\n**WebSocket**\u662f\u4e00\u79cd\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u5efa\u7acb\u957f\u8fde\u63a5\u7684\u6280\u672f\uff0c\u4f7f\u5f97\u4e24\u8005\u53ef\u4ee5\u901a\u8fc7TCP\u5957\u63a5\u5b57\u8fdb\u884c\u5168\u53cc\u5de5\u901a\u4fe1\u3002\n\n\u901a\u4fe1\u7684**\u53cc\u65b9\u90fd\u53ef\u4ee5\u540c\u65f6\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e**\uff0c\u800c\u65e0\u9700\u7b49\u5f85\u5bf9\u65b9\u5b8c\u6210\u5176\u64cd\u4f5c\u3002\n\n\u5176\u5b9e\u73b0\u4e86\u6d4f\u89c8\u5668\u4e0e\u670d\u52a1\u5668**\u5168\u53cc\u5de5**\u901a\u4fe1\uff0c\u80fd\u66f4\u597d\u7684\u8282\u7701\u670d\u52a1\u5668\u8d44\u6e90\u548c\u5e26\u5bbd\u5e76\u8fbe\u5230\u5b9e\u65f6\u901a\u8baf\n\n**WebSocket**\u5efa\u7acb\u5728 TCP \u4e4b\u4e0a\uff0c\u540c HTTP \u4e00\u6837\u901a\u8fc7 TCP \u6765\u4f20\u8f93\u6570\u636e\uff0c\u4f46\u662f\u5b83\u548c HTTP \u6700\u5927\u4e0d\u540c\u662f\uff1a\n\n- WebSocket \u662f\u4e00\u79cd**\u53cc\u5411\u901a\u4fe1\u534f\u8bae**\uff0c\u5728\u5efa\u7acb\u8fde\u63a5\u540e\uff0cWebSocket \u670d\u52a1\u5668\u548c Browser/Client Agent \u90fd\u80fd\u4e3b\u52a8\u7684\u5411\u5bf9\u65b9\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e\n- WebSocket \u9700\u8981\u7c7b\u4f3c TCP \u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7aef\u901a\u8fc7\u63e1\u624b\u8fde\u63a5\uff0c\u8fde\u63a5\u6210\u529f\u540e\u624d\u80fd\u76f8\u4e92\u901a\u4fe1\u3002\n- HTTP\u662f\u4e00\u79cd\u65e0\u72b6\u6001\u7684\u8bf7\u6c42/\u54cd\u5e94\u534f\u8bae\u3002\u5b83\u5141\u8bb8\u5ba2\u6237\u7aef\u4ece\u670d\u52a1\u5668\u83b7\u53d6\u8d44\u6e90\uff0c\u4f46\u662f\u5e76\u4e0d\u652f\u6301\u6301\u4e45\u8fde\u63a5\u6216\u53cc\u5411\u901a\u4fe1\u3002\u6bcf\u6b21\u8bf7\u6c42\u90fd\u9700\u8981\u91cd\u65b0\u5efa\u7acbTCP\u8fde\u63a5\uff0c\u56e0\u6b64\u5bf9\u4e8e\u9891\u7e41\u4ea4\u4e92\u7684\u5e94\u7528\u6765\u8bf4\u6548\u7387\u8f83\u4f4e\u3002\n\n> \u5173\u4e8e \u5168\u53cc\u5de5\u901a\u4fe1\u548c\u534a\u53cc\u5de5\u901a\u4fe1\n>\n> \u5728\u901a\u4fe1\u7cfb\u7edf\u4e2d\uff0c**\u53cc\u5de5\u662f\u6307\u540c\u65f6\u8fdb\u884c\u7684\u4e24\u4e2a\u65b9\u5411\u7684\u6570\u636e\u4f20\u8f93**\u3002\u5176\u4e2d\uff0c\u5168\u53cc\u5de5\u8868\u793a\u6570\u636e\u53ef\u4ee5\u5728\u4e24\u4e2a\u65b9\u5411\u540c\u65f6\u4f20\u8f93\uff0c**\u800c\u534a\u53cc\u5de5\u5219\u6307\u6570\u636e\u5728\u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u4f20\u8f93\u3002**\n>\n> \u573a\u666f\u7684\u573a\u666f\u6bd4\u5982 : **\u7535\u8bdd\u5bf9\u8bdd\u548c\u9762\u5bf9\u9762\u4ea4\u8c08**\n\n### demo\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7 `javax.websocket`\u5305\u6765\u5b9e\u73b0\u7b80\u5355\u7684demo , \u66f4\u597d\u7406\u89e3websocket\u7684\u5de5\u4f5c\u6d41\u7a0b\u4ee5\u53ca\u65b9\u5f0f\n\n\u51c6\u5907\u5de5\u4f5c:\n\n- Postman : \u5145\u5f53 websocket \u5ba2\u6237\u7aef\n- Springboot Application : \u642d\u5efawebsocket server\n\n\u5f15\u5165\u4f9d\u8d56\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n```\n\n\u793a\u4f8b\u4ee3\u7801\n\n#### `WebSocketServer.java`\n\n\u8be5\u6587\u4ef6 \u4f1a\u5728\u5ba2\u6237\u7aef\u8fde\u63a5 , \u65ad\u5f00 , \u53d1\u9001\u6d88\u606f\u7684\u65f6\u5019\u6253\u5370\u76f8\u5173\u7684\u65e5\u5fd7\u4fe1\u606f , \u63a5\u6536\u53c2\u6570\u4e3a `userId`\n\n\u5176\u4e2d\u6709\u51e0\u4e2a\u5173\u952e\u7684\u4e8b\u4ef6\n\n- onclose\uff1a\u7528\u4e8e\u6307\u5b9a\u8fde\u63a5\u5173\u95ed\u540e\u7684\u56de\u8c03\u51fd\u6570\uff1b\n- onerror\uff1a\u7528\u4e8e\u6307\u5b9a\u8fde\u63a5\u5931\u8d25\u540e\u7684\u56de\u8c03\u51fd\u6570\uff1b\n- onmessage\uff1a\u7528\u4e8e\u6307\u5b9a\u5f53\u4ece\u670d\u52a1\u5668\u63a5\u53d7\u5230\u4fe1\u606f\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff1b\n- onopen\uff1a\u7528\u4e8e\u6307\u5b9a\u8fde\u63a5\u6210\u529f\u540e\u7684\u56de\u8c03\u51fd\u6570\uff1b\n\n```java\n@Slf4j\n@ServerEndpoint(\"/user/{userId}\")\npublic class WebSocketServer {\n\n    private static AtomicInteger onlineCount = new AtomicInteger(0);\n    /**\n     * \u7f51\u7edc\u5957\u63a5\u5b57\u8bbe\u7f6e concurrent\u5305\u7684\u7ebf\u7a0b\u5b89\u5168Set\uff0c\u7528\u6765\u5b58\u653e\u6bcf\u4e2a\u5ba2\u6237\u7aef\u5bf9\u5e94\u7684WebSocket\u5bf9\u8c61\u3002\n     */\n    private static CopyOnWriteArraySet<WebSocketServer> webSocketSet = new CopyOnWriteArraySet<>();\n\n    /**\n     * \u4f1a\u8bdd \u4e0e\u67d0\u4e2a\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u4f1a\u8bdd\uff0c\u9700\u8981\u901a\u8fc7\u5b83\u6765\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\n     */\n    private Session session;\n    /**\n     * id\n     */\n    private String userId = \"\";\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"userId\") String userId) {\n        this.session = session;\n        webSocketSet.add(this);     // \u52a0\u5165set\u4e2d\n        this.userId = userId;\n        addOnlineCount();           // \u5728\u7ebf\u6570\u52a01\n        log.info(\"\u6709\u65b0\u5ba2\u6237\u7aef\u5f00\u59cb\u76d1\u542c,userId=\" + userId + \",\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a:\" + getOnlineCount());\n    }\n\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(this);  // \u4eceset\u4e2d\u5220\u9664\n        subOnlineCount();              // \u5728\u7ebf\u6570\u51cf1\n        // \u65ad\u5f00\u8fde\u63a5\u60c5\u51b5\u4e0b\uff0c\u66f4\u65b0\u4e3b\u677f\u5360\u7528\u60c5\u51b5\u4e3a\u91ca\u653e\n        log.info(\"\u91ca\u653e\u7684userId=\" + userId + \"\u7684\u5ba2\u6237\u7aef\");\n        releaseResource();\n    }\n\n    private void releaseResource() {\n        log.info(\"\u6709\u4e00\u8fde\u63a5\u5173\u95ed\uff01\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a\" + getOnlineCount());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        log.info(\"\u6536\u5230\u6765\u81ea\u5ba2\u6237\u7aef userId=\" + userId + \" \u7684\u4fe1\u606f:\" + message);\n        // \u7fa4\u53d1\u6d88\u606f\n        HashSet<String> userIds = new HashSet<>();\n        for (WebSocketServer item : webSocketSet) {\n            userIds.add(item.userId);\n        }\n        try {\n            sendMessage(\"\u5ba2\u6237\u7aef \" + this.userId + \"\u53d1\u5e03\u6d88\u606f\uff1a\" + message, userIds);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        log.error(session.getBasicRemote() + \"\u5ba2\u6237\u7aef\u53d1\u751f\u9519\u8bef\");\n        error.printStackTrace();\n    }\n\n\n    public void sendMessage(String message, HashSet<String> toSids) throws IOException {\n        log.info(\"\u63a8\u9001\u6d88\u606f\u5230\u5ba2\u6237\u7aef \" + toSids + \"\uff0c\u63a8\u9001\u5185\u5bb9:\" + message);\n\n        for (WebSocketServer item : webSocketSet) {\n            try {\n                //\u8fd9\u91cc\u53ef\u4ee5\u8bbe\u5b9a\u53ea\u63a8\u9001\u7ed9\u4f20\u5165\u7684userId\uff0c\u4e3anull\u5219\u5168\u90e8\u63a8\u9001\n                if (toSids.size() <= 0) {\n                    item.sendMessage(message);\n                } else if (toSids.contains(item.userId)) {\n                    item.sendMessage(message);\n                }\n            } catch (IOException e) {\n                continue;\n            }\n        }\n    }\n\n    public void sendMessage(String message) throws IOException {\n        this.session.getBasicRemote().sendText(message);\n    }\n\n    public static int getOnlineCount() {\n        return onlineCount.get();\n    }\n\n    public static void addOnlineCount() {\n        onlineCount.getAndIncrement();\n    }\n\n    public static void subOnlineCount() {\n        onlineCount.getAndDecrement();\n    }\n\n}\n```\n\n#### websocketConfig\n\n```java\n@Configuration\npublic class WebSocketConfig {\n\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n}\n```\n\n#### \u63a7\u5236\u5c42\u4ee3\u7801\n\n\u7f16\u5199\u63a7\u5236\u5c42\u63a5\u53e3 , \u8c03\u7528\u63a5\u53e3\u4f1a\u5411(\u6307\u5b9auserId\u7684)\u5ba2\u6237\u7aef\u53d1\u9001\u4fe1\u606f\n\n```java\n@RestController\n@Slf4j\npublic class TestController {\n\n    @Resource\n    WebSocketServer webSocketServer;\n\n    @GetMapping(\"/test/send/ws/{userId}\")\n    public String send2WS(@PathVariable String userId){\n        try {\n            webSocketServer.sendMessage(\"this is a message from server!\", new HashSet<>(Arrays.asList(String.valueOf(userId))));\n            return \"success\";\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n\n#### \u6d4b\u8bd5\n\n\u542f\u52a8\u9879\u76ee , \u63a5\u7740\u6211\u4eec\u901a\u8fc7postman\u8fdb\u884c\u6d4b\u8bd5![](https://pic.yupi.icu/5563/202311191321280.png)\n\n\u63a5\u7740\u8bbf\u95ee `http://localhost:8080/test/send/ws/1`\n\n\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u63d0\u524d\u9884\u8bbe\u597d\u7684\u6d88\u606f\n\n![](https://pic.yupi.icu/5563/202311191321358.png)\n\n## \u8baf\u98de\u661f\u706b\n\n\u4e86\u89e3\u5b8cwebsocket\u4e4b\u540e, \u6211\u4eec\u6765\u52a8\u624b\u5b9e\u73b0\u4e00\u4e2a \u901a\u7528\u7684 `SparkManager`\n\n### \u7533\u8bf7key\n\n\u8bbf\u95ee [\u5b98\u7f51](https://console.xfyun.cn/sale/buy?wareId=9048&packageId=9048001&serviceName=\u661f\u706b\u8ba4\u77e5\u5927\u6a21\u578bV3.0&businessId=bm3`) \u8d2d\u4e70 \u514d\u8d39\u7684\u4e2a\u4eba\u4f53\u9a8c\u5305\u5373\u53ef\n\n- \u5305\u542b\u4e86 200w \u4e2atoken , \u8db3\u591f\u5f00\u53d1\u8fc7\u7a0b\u4f7f\u7528\n\n![](https://pic.yupi.icu/5563/202311191321364.png)\n\n### \u8bf7\u6c42\u6d41\u7a0b\u5206\u6790\n\n\u8fd9\u91cc\u53c2\u8003\u5b98\u65b9\u7ed9\u51fa\u7684 \u793a\u4f8b\u4ee3\u7801 \u7684\u7ed3\u6784 , \u5206\u6790\u5177\u4f53\u8bf7\u6c42\u7684\u6d41\u7a0b\n\n1. \u901a\u8fc7 apikey apiSecret \u7b49\u914d\u7f6e\u4fe1\u606f , \u6784\u5efa \u8bf7\u6c42\u7684websokcet\u7684url\n\n2. \u521b\u5efawebsocket\u8fde\u63a5\n\n   \u8fd9\u91cc\u7684\u6838\u5fc3\u903b\u8f91\u90fd\u5199\u5728 websocket \u7684 \u4e8b\u4ef6\u4e2d\n\n   - onOpen : \u8fde\u63a5\u5f00\u542f , **\u521b\u5efa\u7ebf\u7a0b** , \u6784\u5efa\u5e76\u8bf7\u6c42\u5927\u6a21\u578b\n   - onMessage : \u5927\u6a21\u578b\u8fd4\u56dechat\u7684\u7ed3\u679c , \u8fd9\u91cc\u901a\u8fc7 \u8fd4\u56de\u7684 \u4e1a\u52a1\u72b6\u6001\u7801 , \u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c , \u6bd4\u5982 :\n     - \u53d1\u751f\u5f02\u5e38, \u9000\u51fachat\n     - \u4fdd\u5b58chat\u7684\u7ed3\u679c\n     - \u6709\u5173 \u5386\u53f2chat\u8bb0\u5f55\u7684\u64cd\u4f5c\n   - onFailure : \u53d1\u751f\u9519\u8bef , \u9000\u51fa\n\n\u8fd9\u91cc\u7684 \u793a\u4f8b\u4ee3\u7801 \u6570\u636e\u662f\u4fdd\u5b58\u5728\u7c7b\u7684\u5c5e\u6027\u4e2d\u7684, \u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86 \u6b64\u6b21\u8bf7\u6c42\u7684\u72b6\u6001\u4fe1\u606f , \u5e76\u4e0d\u652f\u6301\u591a\u7ebf\u7a0b\u8bbf\u95ee ,\n\n\u56e0\u6b64\u540e\u7eed\u5728\u6b64 demo \u7684\u57fa\u7840\u4e4b\u4e0a\u8fdb\u884c\u6539\u5584, \u4f7f\u5f97\u652f\u6301\u5d4c\u5165\u5230\u6b63\u5e38\u7684\u9879\u76ee\u4e2d\n\n### \u9274\u6743-AuthUtil\n\n- \u5b98\u65b9\u6587\u6863 : [https://www.xfyun.cn/doc/spark/general_url_authentication.html#_1-%E9%89%B4%E6%9D%83%E8%AF%B4%E6%98%8E](https://www.xfyun.cn/doc/spark/general_url_authentication.html#_1-\u9274\u6743\u8bf4\u660e)\n\n\u4e3b\u8981\u53c2\u6570\u5982\u4e0b\n\n| \u53c2\u6570          | \u7c7b\u578b   | \u5fc5\u987b | \u8bf4\u660e                                                | \u793a\u4f8b                                                 |\n| ------------- | ------ | ---- | --------------------------------------------------- | ---------------------------------------------------- |\n| host          | string | \u662f   | \u8bf7\u6c42\u7684\u4e3b\u673a                                          | aichat.xf-yun.com(\u4f7f\u7528\u65f6\u9700\u66ff\u6362\u4e3a\u5b9e\u9645\u4f7f\u7528\u7684\u63a5\u53e3\u5730\u5740\uff09 |\n| date          | string | \u662f   | \u5f53\u524d\u65f6\u95f4\u6233\uff0c\u91c7\u7528RFC1123\u683c\u5f0f\uff0c\u65f6\u95f4\u504f\u5dee\u9700\u63a7\u5236\u5728300s\u5185 | Fri, 05 May 2023 10:43:39 GMT                        |\n| authorization | string | \u662f   | base64\u7f16\u7801\u7684\u7b7e\u540d\u4fe1\u606f                                | \u53c2\u8003\u4e0b\u65b9\u751f\u6210\u65b9\u5f0f                                     |\n\n> \u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f\u65e5\u671f\u7684\u683c\u5f0f\u662f \u82f1\u6587 , \u5728\u683c\u5f0f\u5316\u65e5\u671f\u7684\u65f6\u5019\u9700\u8981\u8bbe\u7f6e\u4e3a US\n\n\u4e3b\u8981\u6d41\u7a0b\n\n1. \u83b7\u53d6 RFC_1123 \u683c\u5f0f\u65e5\u671f\n2. \u83b7\u53d6\u6388\u6743\u4fe1\u606f\n3. \u52a0\u5bc6\n4. \u62fc\u63a5url\n\n```java\npublic static String genAuthUrl(String apiKey, String apiSecret, String host, String path) throws Exception {\n    if (StringUtils.isAnyBlank(apiKey, apiSecret, host, path)) {\n        throw new InvalidParameterException(\"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a!\");\n    }\n    try {\n        String date = getRFC1123Date();\n        String httpUrl = generateAuthorization(date, host, path, apiSecret, apiKey);\n        return httpUrl;\n    } catch (Exception e) {\n        throw e;\n    }\n}\n```\n\n### \u6784\u5efa\u8bf7\u6c42\u7c7b\n\n\u63a5\u53e3\u8bf7\u6c42\u5b57\u6bb5\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1aheader\uff0cparameter, payload\u3002 \u5b57\u6bb5\u89e3\u91ca\u5982\u4e0b\n\n**header\u90e8\u5206**\n\n| \u53c2\u6570\u540d\u79f0 | \u7c7b\u578b   | \u5fc5\u4f20 | \u53c2\u6570\u8981\u6c42   | \u53c2\u6570\u8bf4\u660e                                    |\n| -------- | ------ | ---- | ---------- | ------------------------------------------- |\n| app_id   | string | \u662f   |            | \u5e94\u7528appid\uff0c\u4ece\u5f00\u653e\u5e73\u53f0\u63a7\u5236\u53f0\u521b\u5efa\u7684\u5e94\u7528\u4e2d\u83b7\u53d6 |\n| uid      | string | \u5426   | \u6700\u5927\u957f\u5ea632 | \u6bcf\u4e2a\u7528\u6237\u7684id\uff0c\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u7528\u6237              |\n\n**parameter.chat\u90e8\u5206**\n\n| \u53c2\u6570\u540d\u79f0    | \u7c7b\u578b   | \u5fc5\u4f20 | \u53c2\u6570\u8981\u6c42                                                     | \u53c2\u6570\u8bf4\u660e                                                     |\n| ----------- | ------ | ---- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| domain      | string | \u662f   | \u53d6\u503c\u4e3a[general,generalv2,generalv3]                          | \u6307\u5b9a\u8bbf\u95ee\u7684\u9886\u57df,general\u6307\u5411V1.5\u7248\u672c,generalv2\u6307\u5411V2\u7248\u672c,generalv3\u6307\u5411V3\u7248\u672c \u3002\u6ce8\u610f\uff1a\u4e0d\u540c\u7684\u53d6\u503c\u5bf9\u5e94\u7684url\u4e5f\u4e0d\u4e00\u6837\uff01 |\n| temperature | float  | \u5426   | \u53d6\u503c\u4e3a[0,1],\u9ed8\u8ba4\u4e3a0.5                                        | \u6838\u91c7\u6837\u9608\u503c\u3002\u7528\u4e8e\u51b3\u5b9a\u7ed3\u679c\u968f\u673a\u6027\uff0c\u53d6\u503c\u8d8a\u9ad8\u968f\u673a\u6027\u8d8a\u5f3a\u5373\u76f8\u540c\u7684\u95ee\u9898\u5f97\u5230\u7684\u4e0d\u540c\u7b54\u6848\u7684\u53ef\u80fd\u6027\u8d8a\u9ad8 |\n| max_tokens  | int    | \u5426   | V1.5\u53d6\u503c\u4e3a[1,4096] V2.0\u53d6\u503c\u4e3a[1,8192]\uff0c\u9ed8\u8ba4\u4e3a2048\u3002 V3.0\u53d6\u503c\u4e3a[1,8192]\uff0c\u9ed8\u8ba4\u4e3a2048\u3002 | \u6a21\u578b\u56de\u7b54\u7684tokens\u7684\u6700\u5927\u957f\u5ea6                                   |\n| top_k       | int    | \u5426   | \u53d6\u503c\u4e3a[1\uff0c6],\u9ed8\u8ba4\u4e3a4                                         | \u4ecek\u4e2a\u5019\u9009\u4e2d\u968f\u673a\u9009\u62e9\u2f00\u4e2a\uff08\u2fae\u7b49\u6982\u7387\uff09                          |\n| chat_id     | string | \u5426   | \u9700\u8981\u4fdd\u969c\u7528\u6237\u4e0b\u7684\u552f\u4e00\u6027                                       | \u7528\u4e8e\u5173\u8054\u7528\u6237\u4f1a\u8bdd                                             |\n\n**payload.message.text\u90e8\u5206**\n\n*\u6ce8\uff1atext\u4e0b\u6240\u6709content\u7d2f\u8ba1\u5185\u5bb9 tokens\u9700\u8981\u63a7\u5236\u57288192\u5185*\n\n| \u53c2\u6570\u540d\u79f0 | \u7c7b\u578b   | \u5fc5\u4f20 | \u53c2\u6570\u8981\u6c42                              | \u53c2\u6570\u8bf4\u660e                                    |\n| -------- | ------ | ---- | ------------------------------------- | ------------------------------------------- |\n| role     | string | \u662f   | \u53d6\u503c\u4e3a[user,assistant]                | user\u8868\u793a\u662f\u7528\u6237\u7684\u95ee\u9898\uff0cassistant\u8868\u793aAI\u7684\u56de\u590d |\n| content  | string | \u662f   | \u6240\u6709content\u7684\u7d2f\u8ba1tokens\u9700\u63a7\u52368192\u4ee5\u5185 | \u7528\u6237\u548cAI\u7684\u5bf9\u8bdd\u5185\u5bb9                          |\n\n\u6784\u5efa\u8bf7\u6c42\u7c7bChatRequest\u5982\u4e0b\n\n> \u76f4\u63a5\u4f7f\u7528 JsonObject \u6216\u8005map \u7528\u6765\u6784\u5efa\u90fd\u662f\u53ef\u4ee5\u7684, \u4e0d\u8fc7\u6211\u8ba4\u4e3a\u901a\u8fc7\u7c7b\u4ee5\u53ca\u5c5e\u6027\u6765\u6784\u5efa\u4f1a\u66f4\u65b9\u4fbf\u540e\u7eed\u7684\u6269\u5c55\n>\n> - \u4f7f\u7528Lombok\u63d0\u4f9b\u7684` @Data` \u4ee5\u53ca `@Builder `\u90fd\u662f\u5341\u5206\u65b9\u4fbf\u7684\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ChatRequest {\n    private Header header;\n    private Parameter parameter;\n    private Payload payload;\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Header {\n        private String appId;\n        private String uid;\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Parameter {\n        private Chat chat;\n\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Chat {\n        private String domain;\n        private double temperature;\n        private int maxTokens;\n\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Payload {\n        private Message message;\n    }\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor\n    public static class Message {\n        private List<Text> text;\n    }\n\n    @Data\n    public static class Text {\n        String role;\n        String content;\n    }\n}\n```\n\n### \u6784\u5efa\u7ed3\u679c\u7c7b\n\n**header\u90e8\u5206**\n\n| \u5b57\u6bb5\u540d  | \u7c7b\u578b   | \u5b57\u6bb5\u8bf4\u660e                                                     |\n| ------- | ------ | ------------------------------------------------------------ |\n| code    | int    | \u9519\u8bef\u7801\uff0c0\u8868\u793a\u6b63\u5e38\uff0c\u975e0\u8868\u793a\u51fa\u9519\uff1b\u8be6\u7ec6\u91ca\u4e49\u53ef\u5728\u63a5\u53e3\u8bf4\u660e\u6587\u6863\u6700\u540e\u7684\u9519\u8bef\u7801\u8bf4\u660e\u4e86\u89e3 |\n| message | string | \u4f1a\u8bdd\u662f\u5426\u6210\u529f\u7684\u63cf\u8ff0\u4fe1\u606f                                       |\n| sid     | string | \u4f1a\u8bdd\u7684\u552f\u4e00id\uff0c\u7528\u4e8e\u8baf\u98de\u6280\u672f\u4eba\u5458\u67e5\u8be2\u670d\u52a1\u7aef\u4f1a\u8bdd\u65e5\u5fd7\u4f7f\u7528,\u51fa\u73b0\u8c03\u7528\u9519\u8bef\u65f6\u5efa\u8bae\u7559\u5b58\u8be5\u5b57\u6bb5 |\n| status  | int    | \u4f1a\u8bdd\u72b6\u6001\uff0c\u53d6\u503c\u4e3a[0,1,2]\uff1b0\u4ee3\u8868\u9996\u6b21\u7ed3\u679c\uff1b1\u4ee3\u8868\u4e2d\u95f4\u7ed3\u679c\uff1b2\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\u7ed3\u679c |\n\n**payload.choices\u90e8\u5206**\n\n| \u5b57\u6bb5\u540d  | \u7c7b\u578b   | \u5b57\u6bb5\u8bf4\u660e                                                     |\n| ------- | ------ | ------------------------------------------------------------ |\n| status  | int    | \u6587\u672c\u54cd\u5e94\u72b6\u6001\uff0c\u53d6\u503c\u4e3a[0,1,2]; 0\u4ee3\u8868\u9996\u4e2a\u6587\u672c\u7ed3\u679c\uff1b1\u4ee3\u8868\u4e2d\u95f4\u6587\u672c\u7ed3\u679c\uff1b2\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\u6587\u672c\u7ed3\u679c |\n| seq     | int    | \u8fd4\u56de\u7684\u6570\u636e\u5e8f\u53f7\uff0c\u53d6\u503c\u4e3a[0,9999999]                            |\n| content | string | AI\u7684\u56de\u7b54\u5185\u5bb9                                                 |\n| role    | string | \u89d2\u8272\u6807\u8bc6\uff0c\u56fa\u5b9a\u4e3aassistant\uff0c\u6807\u8bc6\u89d2\u8272\u4e3aAI                      |\n| index   | int    | \u7ed3\u679c\u5e8f\u53f7\uff0c\u53d6\u503c\u4e3a[0,10]; \u5f53\u524d\u4e3a\u4fdd\u7559\u5b57\u6bb5\uff0c\u5f00\u53d1\u8005\u53ef\u5ffd\u7565         |\n\n**payload.usage\u90e8\u5206(\u5728\u6700\u540e\u4e00\u6b21\u7ed3\u679c\u8fd4\u56de)**\n\n| \u5b57\u6bb5\u540d            | \u7c7b\u578b | \u5b57\u6bb5\u8bf4\u660e                                                     |\n| ----------------- | ---- | ------------------------------------------------------------ |\n| question_tokens   | int  | \u4fdd\u7559\u5b57\u6bb5\uff0c\u53ef\u5ffd\u7565                                             |\n| prompt_tokens     | int  | \u5305\u542b\u5386\u53f2\u95ee\u9898\u7684\u603btokens\u5927\u5c0f                                   |\n| completion_tokens | int  | \u56de\u7b54\u7684tokens\u5927\u5c0f                                             |\n| total_tokens      | int  | prompt_tokens\u548ccompletion_tokens\u7684\u548c\uff0c\u4e5f\u662f\u672c\u6b21\u4ea4\u4e92\u8ba1\u8d39\u7684tokens\u5927\u5c0f |\n\n```java\n@Data\npublic class ChatResponse {\n\n    private Header header;\n\n    private Payload payload;\n\n    @Data\n    public static class Header {\n        private int code;\n        private String message;\n        private String sid;\n        private int status;\n    }\n\n    @Data\n    public static class Payload {\n        private Choices choices;\n        private Usage usage;\n\n\n    }\n\n    @Data\n    public static class Choices {\n        private int status;\n        private int seq;\n        private List<ContentRoleIndex> text;\n    }\n\n    @Data\n    public static class ContentRoleIndex {\n        private String content;\n        private String role;\n        private int index;\n    }\n\n    @Data\n    public static class Usage {\n        private Tokens text;\n\n        @Data\n        public static class Tokens {\n            private int question_tokens;\n            private int prompt_tokens;\n            private int completion_tokens;\n            private int total_tokens;\n        }\n    }\n\n}\n```\n\n### \u53d1\u8d77\u8bf7\u6c42\n\n\u5bf9\u63a5\u524d\u9762\u7684\u6d41\u7a0b\u5206\u6790 , \u6211\u4eec\u7684\u53d1\u8d77\u8bf7\u6c42\u7684\u64cd\u4f5c\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u4e2d\u6267\u884c\n\n> \u6ce8\u610f : \u8fd9\u91cc\u7684\u4ee3\u7801\u5e76\u4e0d\u662f\u6700\u7ec8\u7684\u7248\u672c\n\n```java\npublic String doChat(String message) throws Exception {\n    NewQuestion = message;\n    // \u6784\u5efa\u9274\u6743url\n    String authUrl = AuthUtil.genAuthUrl(apiKey, apiSecret, host, path);\n    OkHttpClient client = new OkHttpClient.Builder().build();\n    // \u6784\u5efawebsocket\u8bf7\u6c42\n    Request request = new Request.Builder().url(authUrl).build();\n    totalAnswer = new StringBuilder();\n    // \u53d1\u8d77websocket\u8bf7\u6c42\n    WebSocket webSocket = client.newWebSocket(request, new MySparkManager(11111L, false));\n    return totalAnswer.toString();\n}\n```\n\n\u5728\u8fde\u63a5\u5efa\u7acb\u4e4b\u540e , \u6267\u884c`onOpen`\u65b9\u6cd5 , \u8fd9\u91cc\u6211\u4eec\u65b0\u5f00\u542f\u4e00\u4e2a\u7ebf\u7a0b , \u7528\u6765\u4e0e \u6a21\u578b\u4ea4\u4e92\n\n```java\n@Override\npublic void onOpen(WebSocket webSocket, Response response) {\n    super.onOpen(webSocket, response);\n    myThread = new MyThread(webSocket, userId);\n    myThread.start();\n}\n```\n\n\u5176\u4e2d Thread\u7684 run() \u65b9\u6cd5\u4e3b\u8981\u4efb\u52a1\u4e3a \u6784\u5efa\u5e76\u53d1\u8d77\u8bf7\u6c42\n\n```java\npublic void run() {\n    try {\n        ChatRequest chatRequest = new ChatRequest();\n        ChatRequest.builder()\n            .header(ChatRequest.Header.builder()\n                    .app_id(appid)\n                    .uid((int) userId)\n                    .build())\n            .parameter(Parameter.builder()\n                       .chat(Chat.builder()\n                             .domain(domain)\n                             .temperature(0.5)\n                             .maxTokens(4096)\n                             .build())\n                       .build())\n            .payload(ChatRequest.Payload.builder()\n                     .message(ChatRequest.Message\n                              .builder()\n                              .text(Collections.singletonList(\n                                  Text.builder()\n                                  .content(NewQuestion)\n                                  .role(\"user\")\n                                  .build()))\n                              .build())\n                     .build());\n        webSocket.send(chatRequest.toString());\n        // \u7b49\u5f85\u670d\u52a1\u7aef\u8fd4\u56de\u5b8c\u6bd5\u540e\u5173\u95ed\n        while (true) {\n            // System.err.println(wsCloseFlag + \"---\");\n            Thread.sleep(200);\n            if (wsCloseFlag) {\n                break;\n            }\n        }\n        webSocket.close(1000, \"\");\n        myThread.interrupt();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}\n```\n\n### \u63a5\u6536\u54cd\u5e94\u7ed3\u679c\n\n```java\n@Override\npublic void onMessage(WebSocket webSocket, String text) {\n    // System.out.println(userId + \"\u7528\u6765\u533a\u5206\u90a3\u4e2a\u7528\u6237\u7684\u7ed3\u679c\" + text);\n    ChatResponse chatResponse = JSONUtil.toBean(text, ChatResponse.class);\n    if (chatResponse.getHeader().getCode() != 0) {\n        System.out.println(\"\u53d1\u751f\u9519\u8bef\uff0c\u9519\u8bef\u7801\u4e3a\uff1a\" + chatResponse.getHeader().getCode());\n        System.out.println(\"\u672c\u6b21\u8bf7\u6c42\u7684sid\u4e3a\uff1a\" + chatResponse.getHeader().getSid());\n        webSocket.close(1000, \"\");\n    }\n    List<ContentRoleIndex> textList = chatResponse.getPayload().getChoices().getText();\n    for (ContentRoleIndex temp : textList) {\n        totalAnswer.append(temp.getContent());\n    }\n    if (chatResponse.getHeader().getStatus() == 2) {\n        // \u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\uff0c\u91ca\u653e\u8d44\u6e90\n        ContentRoleIndex contentRoleIndex = new ContentRoleIndex();\n        contentRoleIndex.setRole(\"assistant\");\n        contentRoleIndex.setContent(totalAnswer.toString());\n        wsCloseFlag = true;\n    }\n}\n```\n\n### \u5e76\u53d1\u8bbf\u95ee\u6539\u9020\n\n\u539f\u672c\u7684\u4e3b\u8981\u95ee\u9898\u5c31\u662f userId \u4e0e answer \u7ed1\u5b9a\u5728\u4e00\u8d77\u4e86, \u5e76\u4e14\u53ea\u6709\u4e00\u4e2adoChat () \u65b9\u6cd5, \u56e0\u6b64\u8fd9\u91cc\u7684\u4e3b\u8981\u505a\u6cd5\u5c31\u662f\u628adoChat()\u72ec\u7acb\u51fa\u6765\n\n\u5e76\u4e14\u5bf9\u4e8e\u539f\u672c\u7684\u4ee3\u7801, \u662f\u4e0d\u80fd\u6ce8\u5165Spring Bean \u7684 , \u56e0\u6b64\u9700\u8981\u51c6\u5907\u4e00\u4e2a\u6784\u9020\u5668\n\n\u4e3b\u8981\u53c2\u6570\u6709\n\n- \u914d\u7f6e\u4fe1\u606f\n- userId\n- \u95ee\u9898\n\n```java\nSparkChat(SparkConfig sparkConfig, long userId, String question) {\n    this.userId = userId;\n    this.question = question;\n    this.apiKey = sparkConfig.getApiKey();\n    this.apiSecret = sparkConfig.getApiSecret();\n    this.appid = sparkConfig.getAppId();\n    if (sparkConfig.getModelVersion() != null) {\n        this.host = sparkConfig.getHostInfos().get(Integer.parseInt(sparkConfig.getModelVersion()) - 1).getHost();\n        this.path = sparkConfig.getHostInfos().get(Integer.parseInt(sparkConfig.getModelVersion()) - 1).getPath();\n        this.domain = sparkConfig.getHostInfos().get(Integer.parseInt(sparkConfig.getModelVersion()) - 1).getDomain();\n    } else {\n        this.host = sparkConfig.getDefaultHostInfo().getHost();\n        this.path = sparkConfig.getDefaultHostInfo().getPath();\n        this.domain = sparkConfig.getDefaultHostInfo().getDomain();\n    }\n}\n```\n\n\u539f\u672c\u7684\u4ee3\u7801 \u6838\u5fc3\u903b\u8f91\u5c31\u4e0e websocket \u7684\u4e8b\u4ef6\u76f8\u7ed1\u5b9a\n\n```java\n@Slf4j\n@Data\npublic class SparkChatListener extends WebSocketListener {\n    public StringBuilder totalAnswer = new StringBuilder();\n\n    /**\n     * websocket\u8fde\u63a5\u5173\u95ed\u6807\u5fd7\n     */\n    private Boolean wsCloseFlag;\n    @Override\n    public void onOpen(WebSocket webSocket, Response response) {\n        super.onOpen(webSocket, response);\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String text) {\n        ChatResponse chatResponse = JSONUtil.toBean(text, ChatResponse.class);\n        if (chatResponse.getHeader().getCode() != 0) {\n            log.info(\"\u53d1\u751f\u9519\u8bef\uff0c\u9519\u8bef\u7801\u4e3a\uff1a\" + chatResponse.getHeader().getCode());\n            log.info(\"\u672c\u6b21\u8bf7\u6c42\u7684sid\u4e3a\uff1a\" + chatResponse.getHeader().getSid());\n            webSocket.close(1000, chatResponse.getHeader().getMessage());\n        }\n        List<ContentRoleIndex> textList = chatResponse.getPayload().getChoices().getText();\n        for (ContentRoleIndex temp : textList) {\n            totalAnswer.append(temp.getContent());\n        }\n        if (chatResponse.getHeader().getStatus() == 2) {\n            // \u53ef\u4ee5\u5173\u95ed\u8fde\u63a5\uff0c\u91ca\u653e\u8d44\u6e90\n            ContentRoleIndex contentRoleIndex = new ContentRoleIndex();\n            contentRoleIndex.setRole(\"assistant\");\n            contentRoleIndex.setContent(totalAnswer.toString());\n            wsCloseFlag = true;\n        }\n    }\n\n    @Override\n    public void onFailure(WebSocket webSocket, Throwable t, Response response) {\n        super.onFailure(webSocket, t, response);\n        if (response != null) {\n            int code = response.code();\n            try {\n                log.info(\"[Spark-chat-websocket]failure code:{} , boyd{}\", code, response.body().string());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n```\n\n### SparkManager\n\n\u8fd9\u91cc\u7684manager \u4e3b\u8981\u7684\u64cd\u4f5c\u5c31\u662f `doChat()`\n\n```java\npublic String doChat(long userId,String question) throws Exception {\n    // \u6784\u5efa\u9274\u6743url\n    String authUrl = AuthUtil.genAuthUrl(apiKey, apiSecret, host, path);\n    OkHttpClient client = new OkHttpClient.Builder().build();\n    // \u6784\u5efawebsocket\u8bf7\u6c42\n    Request request = new Request.Builder().url(authUrl).build();\n    SparkChat sparkChat = new SparkChat(sparkConfig, userId,question);\n    // \u53d1\u8d77websocket\u8bf7\u6c42\n    WebSocket webSocket = client.newWebSocket(request,sparkChat );\n    return sparkChat.getTotalAnswer().toString();\n}\n```\n\n\u53e6\u5916\u4e3a\u4e86 \u8131\u79bb WebSocketListener \u4e0e \u914d\u7f6e\u4fe1\u606f\u548c\u7528\u6237\u4fe1\u606f\u7684\u8026\u5408 , \u6211\u4eec\u628a\u6784\u5efa\u8bf7\u6c42\u7684\u903b\u8f91\u653e\u5230 Manager\u4e2d\n\n![](https://pic.yupi.icu/5563/202311191321286.png)\n\n\u5f53\u7136\u540e\u7eed\u5982\u679c\u9700\u8981\u6709 \u6570\u636e\u6301\u4e45\u5316 or \u5173\u8054\u5386\u53f2\u8bb0\u5f55 , \u518d\u6b21\u57fa\u7840\u4e4b\u4e0a\u4fee\u6539\u5373\u53ef\n\n### \u63a7\u5236\u5c42\u63a5\u53e3\n\n```java\n@PostMapping(\"/test/spark\")\npublic String chat(@RequestParam(\"question\") String question) {\n    try {\n        return sparkManager.doChat(132, question);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n```\n\n![](https://pic.yupi.icu/5563/202311191321241.png)\n\n## HTTP\u6d41\u5f0f\u4f20\u8f93-SseEmitter\n\n\u6211\u4eec\u5728\u4f7f\u7528\u5b98\u7f51\u7684\u5927\u6a21\u578b\u5bf9\u8bdd\u7684\u65f6\u5019 , \u56de\u7b54\u90fd\u662f\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u54cd\u5e94\u51fa\u6765\u7684, \u8fd9\u91cc\u6211\u4eec\u60f3\u8fbe\u5230\u7c7b\u4f3c\u7684\u6548\u679c , \u53ef\u4ee5\u91c7\u7528HTTP\u63a8\u6d41\u53cd\u9988\u7ed3\u679c\n\n\u90a3\u4e48\u4e0a\u9762\u7684\u4ee3\u7801\u663e\u7136\u662f\u8fbe\u4e0d\u5230\u6211\u4eec\u671f\u671b\u7684\u7ed3\u679c\u7684 , \u6b64\u5904\u53ef\u4ee5\u6ce8\u610f\u539f\u672c `SparkManager.dochat()` \u4e2d\u7684\u4e00\u4e2a\u64cd\u4f5c\n\n\u8fd9\u91cc\u662f\u4f7f\u7ebf\u7a0b\u7b49\u5f85AI\u56de\u7b54\u95ee\u9898\u5b8c\u6bd5 , \u6700\u540e\u8fd4\u56de\n\n> websocket\u8fde\u63a5\u5173\u95ed\u8868\u793a \u672c\u6b21\u7684\u4ea4\u4e92\u5df2\u7ecf\u7ed3\u675f\n\n```java\nwhile (!sparkChat.getWsCloseFlag()) {\n    Thread.sleep(200);\n}\nreturn sparkChat.getTotalAnswer().toString();\n```\n\n------\n\n**Spring SseEmitter**\u4e3b\u8981\u7528\u4e8e\u5b9e\u73b0\u670d\u52a1\u5668\u7aef\u5411\u5ba2\u6237\u7aef\u7684\u5b9e\u65f6\u6570\u636e\u63a8\u9001\u3002\n\n\u4e0e\u4f20\u7edf\u7684Http\u957f\u8fde\u63a5\u4e0d\u540c\uff0cSseEmitter**\u5141\u8bb8\u670d\u52a1\u5668\u80fd\u4e3b\u52a8\u5411\u6d4f\u89c8\u5668\u63a8\u9001\u4fe1\u606f**\u3002\n\n> \u8fd9\u79cd\u4ece\u670d\u52a1\u7aef\u5355\u5411\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u4fe1\u606f\u7684\u6a21\u5f0f\uff0c\u57fa\u4e8eHttp\u534f\u8bae**\uff0c\u76f8\u6bd4\u4e8eWebSocket\u6765\u8bf4\u66f4\u4e3a\u8f7b\u91cf**\u3002\n\n\u4e3b\u8981\u529f\u80fd\u548c\u7528\u9014\u6709\u4ee5\u4e0b\u51e0\u4e2a:\n\n1. **\u80fd\u4e3b\u52a8\u5411\u5355\u4e2a\u5ba2\u6237\u7aef\u63a8\u9001\u6d88\u606f**\u3002SseEmitter\u80fd\u5339\u914d\u552f\u4e00\u7684\u5ba2\u6237\u7aef\u8bf7\u6c42\uff0c\u5e76\u4e0e\u8be5\u5ba2\u6237\u7aef\u4fdd\u6301\u6301\u4e45\u8fde\u63a5\u3002\u901a\u8fc7\u6b64\u8fde\u63a5\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u968f\u65f6\u5c06\u4e8b\u4ef6\u63a8\u9001\u7ed9\u8fd9\u4e2a\u5ba2\u6237\u7aef\u3002\n2. **\u80fd\u63a8\u9001\u91cd\u590d\u7684\u6d88\u606f**\u3002SseEmitter\u5141\u8bb8\u670d\u52a1\u5668\u4e0d\u505c\u53d1\u9001\u76f8\u540c\u7684\u6d88\u606f\u7ed9\u5ba2\u6237\u7aef\uff0c\u5f62\u6210\u4e00\u4e2a\u8fde\u7eed\u7684\u4e8b\u4ef6\u6d41\u3002\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u76d1\u542c\u8fd9\u4e2a\u4e8b\u4ef6\u6d41\u5373\u53ef\u3002\n3. **\u652f\u6301\u5ef6\u8fdf\u548c\u5b9a\u65f6\u63a8\u9001**\u3002\u901a\u8fc7@Scheduled\u6ce8\u89e3\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u5728\u6307\u5b9a\u65f6\u95f4\u63a8\u9001\u6307\u5b9a\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n4. **\u652f\u6301\u63a8\u9001\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6**\u3002\u5ba2\u6237\u7aef\u901a\u8fc7\u4e8b\u4ef6\u7684\u540d\u79f0\u80fd\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u4e8b\u4ef6\uff0c\u5e76\u4f5c\u51fa\u4e0d\u540c\u7684\u54cd\u5e94\u3002\n5. **\u652f\u6301\u63a8\u9001\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548cPOJO\u5bf9\u8c61**\u3002\u670d\u52a1\u5668\u53ef\u4ee5\u63a8\u9001String\u3001int\u7b49\u57fa\u672c\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u63a8\u9001\u4efb\u610f\u7684Java\u5bf9\u8c61\u3002\n6. **\u80fd\u4e3b\u52a8\u901a\u77e5\u5ba2\u6237\u7aef\u5173\u95ed**\u3002\u901a\u8fc7\u8c03\u7528complete()\u6216error()\u65b9\u6cd5\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u4e3b\u52a8\u544a\u77e5\u5ba2\u6237\u7aef\u8fde\u63a5\u5df2\u5173\u95ed\u3002\n7. **\u89e3\u8026\u670d\u52a1\u5668\u7aef\u548c\u5ba2\u6237\u7aef**\u3002\u670d\u52a1\u5668\u7aef\u4ec5\u8d1f\u8d23\u63a8\u9001\u4e8b\u4ef6\uff0c\u4e0e\u5177\u4f53\u7684\u5ba2\u6237\u7aef\u65e0\u5173\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u6539\u9020\u539f\u672c\u7684SparkManager \u4ee5\u53ca \u63a7\u5236\u5c42\u4ee3\u7801\n\n\u7531\u4e8e\u6211\u4eec\u9700\u8981\u5728\u63a7\u5236\u5c42\u8fd4\u56de AI \u56de\u7b54\u7684\u4fe1\u606f , \u56e0\u6b64\u8fd9\u91cc\u6dfb\u52a0\u4e00\u4e2a\u516c\u5171\u7684 \u5bf9\u8c61 answer , \u539f\u672c\u7684SparkChatListener \u76f4\u63a5\u64cd\u4f5c\u8fd9\u4e2a\u5728\u63a7\u5236\u5c42\u4e2d\u4f20\u5165\u7684answer\n\n\u540c\u65f6\u6211\u4eec\u901a\u8fc7 webSocketFlag\u8fdb\u884c\u5224\u65ad , \u8f6e\u8be2 answer\u662f\u5426\u6709\u53d8\u5316 , \u5982\u679c\u6709\u5219\u901a\u8fc7 emitter \u8fd4\u56de\u7ed9 client\n\n#### \u6838\u5fc3\u4ee3\u7801\n\n\u8fd9\u91cc\u9700\u8981\u5148\u8fd4\u56de \u7ed9\u5ba2\u6237\u7aef emitter \u5bf9\u8c61 , \u7136\u540e\u901a\u8fc7\u5f02\u6b65\u65b9\u6cd5\u6765\u53d1\u9001 answer\u4fe1\u606f\n\n```java\n@GetMapping(value = \"test/spark\", produces = {MediaType.TEXT_EVENT_STREAM_VALUE})\npublic SseEmitter chat(@RequestParam(\"question\") String question) {\n    long userId = 132;\n    final SseEmitter emitter = sparkManager.getConn(userId);\n    CompletableFuture.runAsync(()->{\n        StringBuilder answerCache = new StringBuilder();\n        SparkChatListener sparkChatListener = sparkManager.doChat(userId, question, answerCache);\n        int lastIdx = 0, len = 0;\n        try {\n            while (!sparkChatListener.getWsCloseFlag()) {\n                if(lastIdx < (len = answerCache.length())){\n                    emitter.send(answerCache.substring(lastIdx, len).getBytes());\n                    lastIdx = len;\n                }\n                Thread.sleep(100);\n            }\n            log.info(answerCache.toString());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    });\n    return emitter;\n}\n```\n\n\u5bf9\u5e94\u7684\u83b7\u53d6emitter \u8fde\u63a5\u7684\u65b9\u6cd5\u653e\u5230 SparkManager\u4e2d\n\n\u8fd9\u91cc\u7684key\u901a\u8fc7\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u4f20\u5165\u5373\u53ef (\u5b9e\u9645\u7684\u5e94\u7528\u53ef\u4ee5\u4f20\u5165userId \u7b49)\n\n```java\n    // \u7528\u6765\u7f13\u5b58 \u7528\u6237\u7684SseEmitter\nprivate static final Map<Object, SseEmitter> SSE_CACHE = new ConcurrentHashMap<>();\n\n\npublic SseEmitter getConn(Object key) {\n    final SseEmitter sseEmitter = SSE_CACHE.get(key);\n    if (sseEmitter != null) {\n        return sseEmitter;\n    } else {\n        // \u8bbe\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\uff0c\u9700\u8981\u914d\u5408\u914d\u7f6e\u9879 spring.mvc.async.request-timeout: 600000 \u4e00\u8d77\u4f7f\u7528\n        final SseEmitter emitter = new SseEmitter(600000L);\n        // \u6ce8\u518c\u8d85\u65f6\u56de\u8c03\uff0c\u8d85\u65f6\u540e\u89e6\u53d1\n        emitter.onTimeout(() -> {\n            log.info(\"\u8fde\u63a5\u5df2\u8d85\u65f6\uff0c\u6b63\u51c6\u5907\u5173\u95ed\uff0ckey = {}\", key);\n            SSE_CACHE.remove(key);\n        });\n        // \u6ce8\u518c\u5b8c\u6210\u56de\u8c03\uff0c\u8c03\u7528 emitter.complete() \u89e6\u53d1\n        emitter.onCompletion(() -> {\n            log.info(\"\u8fde\u63a5\u5df2\u5173\u95ed\uff0c\u6b63\u51c6\u5907\u91ca\u653e\uff0ckey = {}\", key);\n            SSE_CACHE.remove(key);\n            log.info(\"\u8fde\u63a5\u5df2\u91ca\u653e\uff0ckey = {}\", key);\n        });\n        // \u6ce8\u518c\u5f02\u5e38\u56de\u8c03\uff0c\u8c03\u7528 emitter.completeWithError() \u89e6\u53d1\n        emitter.onError(throwable -> {\n            log.error(\"\u8fde\u63a5\u5df2\u5f02\u5e38\uff0c\u6b63\u51c6\u5907\u5173\u95ed\uff0ckey = {}\", key, throwable);\n            SSE_CACHE.remove(key);\n        });\n        SSE_CACHE.put(key, emitter);\n        return emitter;\n    }\n}\n```\n\n\u4e0a\u9762\u4fee\u6539\u7684\u4ee3\u7801\u76f8\u5f53\u4e8e\u628a\u539f\u672c\u5728 SparkManager\u4e2d\u76d1\u542c\u7684\u6d88\u606f\u7684\u903b\u8f91\u653e\u5230\u4e86\u63a7\u5236\u5c42\u7684\u5f02\u6b65\u65b9\u6cd5\u4e2d , \u56e0\u6b64\u4e5f\u9700\u8981\u4fee\u6539\u539f\u672c\u7684doChat\u65b9\u6cd5\n\n```java\npublic SparkChatListener doChat(long userId, String question, StringBuilder answer) {\n    // \u6784\u5efa\u9274\u6743url\n    String authUrl = AuthUtil.genAuthUrl(sparkConfig.getApiKey(), sparkConfig.getApiSecret(),\n                                         sparkConfig.getDefaultHostInfo().getHost(), sparkConfig.getDefaultHostInfo().getPath());\n    if (authUrl == null) {\n        throw new RuntimeException(\"authUrl \u751f\u6210\u5931\u8d25 !\");\n    }\n    OkHttpClient client = new OkHttpClient.Builder().build();\n    // \u6784\u5efa\u804a\u5929\u8bf7\u6c42\n    ChatRequest chatRequest = buildChatRequest(userId, question);\n    System.out.println(JSONUtil.toJsonStr(chatRequest));\n    // \u6784\u5efawebsocket\u8bf7\u6c42\n    Request request = new Request.Builder().url(authUrl).build();\n    SparkChatListener sparkChat = new SparkChatListener(answer);\n    // \u53d1\u8d77websocket\u8bf7\u6c42\n    WebSocket webSocket = client.newWebSocket(request, sparkChat);\n    webSocket.send(JSONUtil.toJsonStr(chatRequest));\n    return sparkChat;\n}\n```\n\n### \u6d4b\u8bd5\n\n\u8bbf\u95ee `http://localhost:8080/test/spark?question=Spring SseEmitter  \u662f\u4ec0\u4e48?`\n\n\u53ef\u4ee5\u770b\u5230 \u95ee\u9898\u7684\u5185\u5bb9\u662f\u9010\u6b65\u7684\u505a\u51fa\u54cd\u5e94\u7684\n\n![](https://pic.yupi.icu/5563/202311191321411.png)\n\n\u5982\u679c\u9700\u8981\u66f4\u5feb\u7684\u54cd\u5e94 , \u53ef\u4ee5\u4fee\u6539 \u63a7\u5236\u5c42\u4e2d `Thread.sleep()` \u7684 \u53c2\u6570(\u8d8a\u5c0f\u8d8a\u7075\u654f , \u4e0d\u8fc7\u9891\u7e41\u7684\u8bbf\u95ee\u4e5f\u4f1a\u589e\u5927CPU\u7684\u538b\u529b)\n\n![](https://pic.yupi.icu/5563/202311191321105.png)"}