{"data": "# \u4f7f\u7528 canal \u5b9e\u73b0\u589e\u91cf\u8ba2\u9605\u548c\u6d88\u8d39\n\n> \u4f5c\u8005\uff1a[\u60f3\u98de\u5929\u7684\u732a\u5934](https://www.code-nav.cn/)\uff0c[\u7f16\u7a0b\u5bfc\u822a\u661f\u7403](https://wx.zsxq.com/dweb2/index/group/51122858222824) \u7f16\u53f7 9414\n\n\u662f\u4e0d\u662f\u8fd8\u6709\u4e3a\u6570\u636e\u540c\u6b65\u627e\u4e0d\u5230\u5408\u9002\u7684\u65b9\u6848\u53d1\u6101\uff1f\u672c\u6587\u5c06\u4ecb\u7ecd\u4e00\u6b3e\u963f\u91cc\u5f00\u6e90\u7684\u6570\u636e\u540c\u6b65\u6846\u67b6\n\n## \u80cc\u666f\n\n\u5728\u5de5\u4f5c\u4e2d\u6211\u4eec\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5b9e\u65f6\u7684\u7edf\u8ba1\u6216\u8005\u5904\u7406\u4e00\u4e9b\u4e1a\u52a1\u8868\u4e2d\u7684\u6570\u636e\u65f6\u5019\uff0c\u6211\u4eec\u90fd\u4f1a\u8fdb\u884c\u6570\u636e\u540c\u6b65\u6216\u8005\u53eb\u6570\u636e\u8fc1\u79fb\u7684\u6b65\u9aa4\uff0c\u662f\u4e3a\u4e86\u4e0d\u5f71\u54cd\u4e3b\u4e1a\u52a1\u8868\u7684\u7a33\u5b9a\u6027\uff0c\u5f53\u7136\u5982\u679c\u5bf9\u6570\u636e\u7684\u5b9e\u65f6\u6027\u6ca1\u6709\u5f88\u9ad8\u7684\u8981\u6c42\u7684\u8bdd\u3001\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b9a\u65f6\u4efb\u52a1\u53bb\u5b9a\u65f6\u6293\u53d6\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u8003\u8651\u65f6\u95f4\u95f4\u9694\uff0c\u4ee5\u53ca\u6bcf\u6b21\u6293\u53d6\u7684\u6570\u636e\u91cf\uff0c\u5982\u679c\u4e1a\u52a1\u5c42\u9762\u6bcf\u5206\u949f\u6709300\u6761\u6570\u636e\u8fdb\u6765\uff0c\u4f46\u662f\u6211\u7684\u5b9a\u65f6\u4efb\u52a1\u5374\u662f\u6bcf\u5206\u949f\u6293200\u6761\u8fd9\u662f\u4e0d\u662f\u5c31\u51fa\u73b0\u95ee\u9898\u4e86\uff1f\u6216\u8005\u8bf4\u67d0\u4e00\u5929\u4e1a\u52a1\u505a\u5927\u4e86\u6570\u636e\u91cf\u589e\u52a0\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u4e0d\u8bf4\u67e5\u8be2\u91cf\u5927\uff0c\u5360\u7528\u8d44\u6e90\uff0c\u5728\u7a0b\u5e8f\u65b9\u9762\u5c31\u53ef\u80fd\u9020\u6210\u5f88\u591a\u95ee\u9898\uff0c\u4e25\u91cd\u7684\u8bdd\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u4e1a\u52a1\u3002\u90a3\u4e48\u8fd9\u91cc\u5c31\u6709\u5fc5\u8981\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u6b3e\u6570\u636e\u540c\u6b65\u6846\u67b6\u4e86\u3002\n\n## \u4ecb\u7ecd\n\n![](https://pic.yupi.icu/5563/202311281215501.png)\n\n\u65e9\u671f\u963f\u91cc\u5df4\u5df4\u56e0\u4e3a\u676d\u5dde\u548c\u7f8e\u56fd\u53cc\u673a\u623f\u90e8\u7f72\uff0c\u5b58\u5728\u8de8\u673a\u623f\u540c\u6b65\u7684\u4e1a\u52a1\u9700\u6c42\uff0c\u5b9e\u73b0\u65b9\u5f0f\u4e3b\u8981\u662f\u57fa\u4e8e\u4e1a\u52a1 trigger \u83b7\u53d6\u589e\u91cf\u53d8\u66f4\u3002\u4ece 2010 \u5e74\u5f00\u59cb\uff0c\u4e1a\u52a1\u9010\u6b65\u5c1d\u8bd5\u6570\u636e\u5e93\u65e5\u5fd7\u89e3\u6790\u83b7\u53d6\u589e\u91cf\u53d8\u66f4\u8fdb\u884c\u540c\u6b65\uff0c\u7531\u6b64\u884d\u751f\u51fa\u4e86\u5927\u91cf\u7684\u6570\u636e\u5e93\u589e\u91cf\u8ba2\u9605\u548c\u6d88\u8d39\u4e1a\u52a1\u3002\n\n**canal [k\u0259'n\u00e6l]**\uff0c\u8bd1\u610f\u4e3a\u6c34\u9053/\u7ba1\u9053/\u6c9f\u6e20\uff0c\u4e3b\u8981\u7528\u9014\u662f\u57fa\u4e8e MySQL \u6570\u636e\u5e93\u589e\u91cf\u65e5\u5fd7\u89e3\u6790\uff0c\u63d0\u4f9b\u589e\u91cf\u6570\u636e\u8ba2\u9605\u548c\u6d88\u8d39\n\n\u57fa\u4e8e\u65e5\u5fd7\u589e\u91cf\u8ba2\u9605\u548c\u6d88\u8d39\u7684\u4e1a\u52a1\u5305\u62ec\n\n- \u6570\u636e\u5e93\u955c\u50cf\n- \u6570\u636e\u5e93\u5b9e\u65f6\u5907\u4efd\n- \u7d22\u5f15\u6784\u5efa\u548c\u5b9e\u65f6\u7ef4\u62a4(\u62c6\u5206\u5f02\u6784\u7d22\u5f15\u3001\u5012\u6392\u7d22\u5f15\u7b49)\n- \u4e1a\u52a1 cache \u5237\u65b0\n- \u5e26\u4e1a\u52a1\u903b\u8f91\u7684\u589e\u91cf\u6570\u636e\u5904\u7406\n\n\u5f53\u524d\u7684 canal \u652f\u6301\u6e90\u7aef MySQL \u7248\u672c\u5305\u62ec 5.1.x , 5.5.x , 5.6.x , 5.7.x , 8.0.x\n\n### \u539f\u7406\n\n![](https://pic.yupi.icu/5563/202311281215510.png)\n\n### MySQL\u4e3b\u5907\u590d\u5236\u539f\u7406\n\n- MySQL master \u5c06\u6570\u636e\u53d8\u66f4\u5199\u5165\u4e8c\u8fdb\u5236\u65e5\u5fd7( binary log, \u5176\u4e2d\u8bb0\u5f55\u53eb\u505a\u4e8c\u8fdb\u5236\u65e5\u5fd7\u4e8b\u4ef6binary log events\uff0c\u53ef\u4ee5\u901a\u8fc7 show binlog events \u8fdb\u884c\u67e5\u770b)\n- MySQL slave \u5c06 master \u7684 binary log events \u62f7\u8d1d\u5230\u5b83\u7684\u4e2d\u7ee7\u65e5\u5fd7(relay log)\n- MySQL slave \u91cd\u653e relay log \u4e2d\u4e8b\u4ef6\uff0c\u5c06\u6570\u636e\u53d8\u66f4\u53cd\u6620\u5b83\u81ea\u5df1\u7684\u6570\u636e\n\n### canal \u5de5\u4f5c\u539f\u7406\n\n- canal \u6a21\u62df MySQL slave \u7684\u4ea4\u4e92\u534f\u8bae\uff0c\u4f2a\u88c5\u81ea\u5df1\u4e3a MySQL slave \uff0c\u5411 MySQL master \u53d1\u9001dump \u534f\u8bae\n- MySQL master \u6536\u5230 dump \u8bf7\u6c42\uff0c\u5f00\u59cb\u63a8\u9001 binary log \u7ed9 slave (\u5373 canal )\n- canal \u89e3\u6790 binary log \u5bf9\u8c61(\u539f\u59cb\u4e3a byte \u6d41)\n\n## canal\u7684\u73af\u5883\u642d\u5efa\n\n### \u5f00\u542fbinlog\u65e5\u5fd7\n\n\u4e0a\u9762\u4ecb\u7ecd\u4e86canal\u7684\u5b9e\u73b0\u662f\u57fa\u4e8emysql\u7684binlog\u65e5\u5fd7\uff0c\u90a3\u5c31\u662f\u8bf4\u6211\u4eec\u9996\u5148\u8981\u628amysql\u7684binlog\u65e5\u5fd7\u529f\u80fd\u5f00\u542f\u4e86\u3002\n\n\u5148\u8fdb\u5165mysql\uff1a\n\n```bash\nmysql -uroot -p\n```\n\n\u6267\u884c\u8fd9\u4e2a\uff1a\n\n```bash\nshow variables like 'log_%';\n```\n\n\u770b\u5230\u8fd9\u4e2alog_bin\u6253\u5f00\u5373\u53ef\n\n![](https://pic.yupi.icu/5563/202311281215518.png)\n\n\u5982\u679c\u663e\u793a\u4e3aOFF\u72b6\u6001\u8bf4\u660e\u6ca1\u6709\u6253\u5f00\uff0c\u9700\u8981\u4fee\u6539mysql\u7684\u914d\u7f6e\u6587\u4ef6`my.cnf`\n\n```bash\nvi /etc/my.cnf\n### \u8ffd\u52a0\u5185\u5bb9\nlog-bin=mysql-bin   #binlog \u6587\u4ef6\u540d\nbinlog_format=ROW   #\u9009\u62e9row\u6a21\u5f0f\nserver_id=1         #mysql\u7684\u5b9e\u4f8bid\uff0c\u4e0d\u80fd\u548ccanal\u7684slaveId\u91cd\u590d\n### \u91cd\u542fmysql\nservice mysql restart \n### \u767b\u5f55\u67e5\u770b\u3001\nshow variables like 'log_%';\n```\n\n### \u521b\u5efacanal\u7528\u6237\n\nroot\u7528\u6237\u8fdb\u5165mysql\u73af\u5883\uff0c\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\n\n```bash\n# \u4fee\u6539\u5bc6\u7801\u6821\u9a8c\u89c4\u5219\nset global validate_password_length=0;\nset global validate_password_policy=LOW;\n# \u521b\u5efa\u7528\u6237canal\uff0c\u5bc6\u7801\u4e3acanal\nCREATE USER canal IDENTIFIED BY 'canal';  \n# canal\u7528\u6237\u6388\u6743\nGRANT SELECT,UPDATE,INSERT,DELETE,REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';\n# \u5237\u65b0\u6743\u9650\nFLUSH PRIVILEGES;\n```\n\n### \u914d\u7f6e\u6587\u4ef6\n\n```properties\n### vi conf/example/instance.properties\n#\u9700\u8981\u6539\u6210\u81ea\u5df1\u7684\u6570\u636e\u5e93\u4fe1\u606f\ncanal.instance.master.address=192.168.44.132:3306\n#\u9700\u8981\u6539\u6210\u81ea\u5df1\u7684\u6570\u636e\u5e93\u7528\u6237\u540d\u4e0e\u5bc6\u7801\ncanal.instance.dbUsername=root\ncanal.instance.dbpassword=root\n#\u9700\u8981\u6539\u6210\u540c\u6b65\u7684\u6570\u636e\u5e93\u8868\u89c4\u5219\uff0c\u4f8b\u5982\u53ea\u662f\u540c\u6b65\u4e00\u4e0b\u8868\ncanal.instance.filter.regex=.*\\canal.instance.filter.regex=guli ucenter.ucenter member\n```\n\n\u6b63\u5219\u89c4\u5219\uff1a\n\n1. \u591a\u4e2a\u6b63\u5219\u4e4b\u95f4\u4ee5\u9017\u53f7(,)\u5206\u9694\uff0c\u8f6c\u4e49\u7b26\u9700\u8981\u53cc\u659c\u6760\n2. \u6240\u6709\u8868: `.*` or `.*\\\\**`\n3. \u5e93\u4e0b\u7684\u6240\u6709\u8868 \uff1a `canal\\\\..*`\n4. \u5e93\u4e0b\u7684\u4ee5canal\u6253\u5934\u7684\u8868\uff1a`canal\\.canal.*`\n5. \u5e93\u4e0b\u7684\u4e00\u5f20\u8868\uff1a`canal.test1`\n6. \u591a\u4e2a\u89c4\u5219\u7ec4\u5408\u4f7f\u7528 `\uff0c` \u9694\u5f00\n\n> **\u6ce8\u610f:\u6b64\u8fc7\u6ee4\u6761\u4ef6\u53ea\u9488\u5bf9row\u6a21\u5f0f\u7684\u6570\u636e\u6709\u6548(ps mixed/statement\u56e0\u4e3a\u4e0d\u89e3\u6790sql**\n\n### \u542f\u52a8\n\n**\u8fdb\u5165bin\u76ee\u5f55\u4e0b\u542f\u52a8**\n\n```bash\nsh bin/startup.sh\n```\n\n## \u6574\u5408Spring\n\n### maven\u4f9d\u8d56\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <!--mysql-->\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>commons-dbutils</groupId>\n        <artifactId>commons-dbutils</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.alibaba.otter</groupId>\n        <artifactId>canal.client</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### \u914d\u7f6e\u6587\u4ef6\n\n```properties\n# \u670d\u52a1\u7aef\u53e3\nserver.port=10001\n# \u670d\u52a1\u540d\nspring.application.name=canal-client\n# \u73af\u5883\u8bbe\u7f6e\uff1adev\u3001test\u3001prod\nspring.profiles.active=dev\n# mysql\u6570\u636e\u5e93\u8fde\u63a5\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.datasource.url=jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8\nspring.datasource.username=root\nspring.datasource.password=root\n```\n\n### \u7f16\u5199\u4ee3\u7801\n\n```java\n @Component\n    public class CanalClient {\n\n        //sql\u961f\u5217\n        private Queue<String> SQL_QUEUE = new ConcurrentLinkedQueue<>();\n\n        @Resource\n        private DataSource dataSource;\n\n        /**\n         * canal\u5165\u5e93\u65b9\u6cd5\n         */\n        public void run() {\n\n            CanalConnector connector = CanalConnectors.newSingleConnector(new InetSocketAddress(\"192.168.61.111\",\n                    11111), \"example\", \"\", \"\");\n            int batchSize = 1000;\n            try {\n                connector.connect();\n                connector.subscribe(\".*\\\\..*\");\n                connector.rollback();\n                try {\n                    while (true) {\n                        //\u5c1d\u8bd5\u4ecemaster\u90a3\u8fb9\u62c9\u53bb\u6570\u636ebatchSize\u6761\u8bb0\u5f55\uff0c\u6709\u591a\u5c11\u53d6\u591a\u5c11\n                        Message message = connector.getWithoutAck(batchSize);\n                        long batchId = message.getId();\n                        int size = message.getEntries().size();\n                        if (batchId == -1 || size == 0) {   //\u6570\u636e\u6ca1\u6709\u53d8\u5316(size>=1,\u6709\u53d8\u5316)\n                            Thread.sleep(1000);\n                        } else {\n                            dataHandle(message.getEntries());\n                        }\n                        connector.ack(batchId);\n\n                        //\u5f53\u961f\u5217\u91cc\u9762\u5806\u79ef\u7684sql\u5927\u4e8e\u4e00\u5b9a\u6570\u503c\u7684\u65f6\u5019\u5c31\u6a21\u62df\u6267\u884c\n                        if (SQL_QUEUE.size() >= 1) {\n                            executeQueueSql();\n                        }\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } catch (InvalidProtocolBufferException e) {\n                    e.printStackTrace();\n                }\n            } finally {\n                connector.disconnect();\n            }\n        }\n\n        /**\n         * \u6a21\u62df\u6267\u884c\u961f\u5217\u91cc\u9762\u7684sql\u8bed\u53e5\n         */\n        public void executeQueueSql() {\n            int size = SQL_QUEUE.size();\n            for (int i = 0; i < size; i++) {\n                String sql = SQL_QUEUE.poll();\n                System.out.println(\"[sql]----> \" + sql);\n\n                this.execute(sql.toString());\n            }\n        }\n\n        /**\n         * \u6570\u636e\u5904\u7406\n         *\n         * @param entrys\n         */\n        private void dataHandle(List<CanalEntry.Entry> entrys) throws InvalidProtocolBufferException {\n            for (CanalEntry.Entry entry : entrys) {\n                if (EntryType.ROWDATA == entry.getEntryType()) {\n                    RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());\n                    CanalEntry.EventType eventType = rowChange.getEventType();\n                    if (eventType == EventType.DELETE) {\n                        saveDeleteSql(entry);\n                    } else if (eventType == EventType.UPDATE) {\n                        saveUpdateSql(entry);\n                    } else if (eventType == CanalEntry.EventType.INSERT) {\n                        saveInsertSql(entry);\n                    }\n                }\n            }\n        }\n\n        /**\n         * \u4fdd\u5b58\u66f4\u65b0\u8bed\u53e5\n         *\n         * @param entry\n         */\n        private void saveUpdateSql(CanalEntry.Entry entry) {\n            try {\n                RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());\n                List<RowData> rowDatasList = rowChange.getRowDatasList();\n                for (RowData rowData : rowDatasList) {\n                    List<CanalEntry.Column> newColumnList = rowData.getAfterColumnsList();\n                    StringBuffer sql = new StringBuffer(\"update \" + entry.getHeader().getTableName() + \" set \");\n                    for (int i = 0; i < newColumnList.size(); i++) {\n                        sql.append(\" \" + newColumnList.get(i).getName()\n                                + \" = '\" + newColumnList.get(i).getValue() + \"'\");\n                        if (i != newColumnList.size() - 1) {\n                            sql.append(\",\");\n                        }\n                    }\n                    sql.append(\" where \");\n                    List<CanalEntry.Column> oldColumnList = rowData.getBeforeColumnsList();\n                    for (CanalEntry.Column column : oldColumnList) {\n                        if (column.getIsKey()) {\n                            //\u6682\u65f6\u53ea\u652f\u6301\u5355\u4e00\u4e3b\u952e\n                            sql.append(column.getName() + \"=\" + column.getValue());\n                            break;\n                        }\n                    }\n                    SQL_QUEUE.add(sql.toString());\n                }\n            } catch (InvalidProtocolBufferException e) {\n                e.printStackTrace();\n            }\n        }\n\n        /**\n         * \u4fdd\u5b58\u5220\u9664\u8bed\u53e5\n         *\n         * @param entry\n         */\n        private void saveDeleteSql(CanalEntry.Entry entry) {\n            try {\n                RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());\n                List<RowData> rowDatasList = rowChange.getRowDatasList();\n                for (RowData rowData : rowDatasList) {\n                    List<CanalEntry.Column> columnList = rowData.getBeforeColumnsList();\n                    StringBuffer sql = new StringBuffer(\"delete from \" + entry.getHeader().getTableName() + \" where \");\n                    for (CanalEntry.Column column : columnList) {\n                        if (column.getIsKey()) {\n                            //\u6682\u65f6\u53ea\u652f\u6301\u5355\u4e00\u4e3b\u952e\n                            sql.append(column.getName() + \"=\" + column.getValue());\n                            break;\n                        }\n                    }\n                    SQL_QUEUE.add(sql.toString());\n                }\n            } catch (InvalidProtocolBufferException e) {\n                e.printStackTrace();\n            }\n        }\n\n        /**\n         * \u4fdd\u5b58\u63d2\u5165\u8bed\u53e5\n         *\n         * @param entry\n         */\n        private void saveInsertSql(CanalEntry.Entry entry) {\n            try {\n                RowChange rowChange = CanalEntry.RowChange.parseFrom(entry.getStoreValue());\n                List<CanalEntry.RowData> rowDatasList = rowChange.getRowDatasList();\n                for (RowData rowData : rowDatasList) {\n                    List<CanalEntry.Column> columnList = rowData.getAfterColumnsList();\n                    StringBuffer sql = new StringBuffer(\"insert into \" + entry.getHeader().getTableName() + \" (\");\n                    for (int i = 0; i < columnList.size(); i++) {\n                        sql.append(columnList.get(i).getName());\n                        if (i != columnList.size() - 1) {\n                            sql.append(\",\");\n                        }\n                    }\n                    sql.append(\") VALUES (\");\n                    for (int i = 0; i < columnList.size(); i++) {\n                        sql.append(\"'\" + columnList.get(i).getValue() + \"'\");\n                        if (i != columnList.size() - 1) {\n                            sql.append(\",\");\n                        }\n                    }\n                    sql.append(\")\");\n                    SQL_QUEUE.add(sql.toString());\n                }\n            } catch (InvalidProtocolBufferException e) {\n                e.printStackTrace();\n            }\n        }\n\n        /**\n         * \u5165\u5e93\n         * @param sql\n         */\n        public void execute(String sql) {\n            Connection con = null;\n            try {\n                if(null == sql) return;\n                con = dataSource.getConnection();\n                QueryRunner qr = new QueryRunner();\n                int row = qr.execute(con, sql);\n                System.out.println(\"update: \"+ row);\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                DbUtils.closeQuietly(con);\n            }\n        }\n}\n```\n\n## \u603b\u7ed3\n\n\u76ee\u524d\u5927\u591a\u6570\u4f01\u4e1a\u90fd\u5728\u9009\u62e9canal\u4f5c\u4e3a\u6570\u636e\u540c\u6b65\u7684\u6280\u672f\u65b9\u6848\uff0c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u5176\u5b9e\u5176\u4e2d\u7684\u5185\u5bb9\u8fd8\u6709\u5f88\u591a\uff0c\u4f01\u4e1a\u4e2d\u5927\u591a\u662f\u7ed3\u5408kafka\u548czookpeer\u53bb\u8fdb\u884c\u591a\u8282\u70b9\u6ce8\u518c\u5904\u7406\u6570\u636e\uff0c\u672c\u6587\u53ea\u662f\u7b80\u5355\u4e86\u89e3\uff0c\u63d0\u4f9b\u4e00\u79cd\u89e3\u51b3\u65e5\u5e38\u5f00\u53d1\u8bbe\u8ba1\u7684\u7ecf\u9a8c\u3002\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u7684\u89e3\u51b3\u6570\u636e\u540c\u6b65\u7684\u95ee\u9898\u3002"}